/*  Generated by Setup/src/Bindings.bf
 *  Do not edit manually!
 */

using System;
using System.Interop;
using Vulkan;

namespace Vulkan;

static
{
	public const CallingConventionAttribute.Kind VKAPI_CALL =
#if BF_PLATFORM_WINDOWS
		.Stdcall;
#else
		.Cdecl;
#endif

	public struct VkBool32 : uint32
	{
		[Inline]
		public static operator bool(Self s) => s != VK_FALSE;

		[Inline]
		public static operator Self(bool b) => b ? VK_TRUE : VK_FALSE;
	}

	[Comptime(ConstEval=true)]
	public static uint32 VK_MAKE_API_VERSION(uint32 variant, uint32 major, uint32 minor, uint32 patch)
		=> (variant << 29U) | (major << 22U) | (minor << 12U) | (patch);

	[Comptime(ConstEval=true)]
	public static uint32 VK_MAKE_VIDEO_STD_VERSION(uint32 major, uint32 minor, uint32 patch)
		=> (major << 22) | (minor << 12) | (patch);
	
	public const c_uint VK_VERSION_1_0 = 1;

	public const c_uint VK_USE_64_BIT_PTR_DEFINES = 1;

	public const void* VK_NULL_HANDLE = ((void*)0);

	public const c_uint VK_API_VERSION_1_0 = VK_MAKE_API_VERSION(0,1,0,0);

	public const c_uint VK_HEADER_VERSION = 304;

	public const c_uint VK_HEADER_VERSION_COMPLETE = VK_MAKE_API_VERSION(0,1,4,VK_HEADER_VERSION);

	public const c_uint VK_ATTACHMENT_UNUSED = (~0);

	public const c_uint VK_FALSE = 0;

	public const float VK_LOD_CLAMP_NONE = 1000.0F;

	public const c_uint VK_QUEUE_FAMILY_IGNORED = (~0);

	public const c_uint VK_REMAINING_ARRAY_LAYERS = (~0);

	public const c_uint VK_REMAINING_MIP_LEVELS = (~0);

	public const c_uint VK_SUBPASS_EXTERNAL = (~0);

	public const c_uint VK_TRUE = 1;

	public const c_ulonglong VK_WHOLE_SIZE = (~0U);

	public const c_uint VK_MAX_MEMORY_TYPES = 32;

	public const c_uint VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;

	public const c_uint VK_UUID_SIZE = 16;

	public const c_uint VK_MAX_EXTENSION_NAME_SIZE = 256;

	public const c_uint VK_MAX_DESCRIPTION_SIZE = 256;

	public const c_uint VK_MAX_MEMORY_HEAPS = 16;

	public const c_uint VK_VERSION_1_1 = 1;

	public const c_uint VK_API_VERSION_1_1 = VK_MAKE_API_VERSION(0,1,1,0);

	public const c_uint VK_MAX_DEVICE_GROUP_SIZE = 32;

	public const c_uint VK_LUID_SIZE = 8;

	public const c_uint VK_QUEUE_FAMILY_EXTERNAL = (~1);

	public const c_uint VK_VERSION_1_2 = 1;

	public const c_uint VK_API_VERSION_1_2 = VK_MAKE_API_VERSION(0,1,2,0);

	public const c_uint VK_MAX_DRIVER_NAME_SIZE = 256;

	public const c_uint VK_MAX_DRIVER_INFO_SIZE = 256;

	public const c_uint VK_VERSION_1_3 = 1;

	public const c_uint VK_API_VERSION_1_3 = VK_MAKE_API_VERSION(0,1,3,0);

	public const c_uint VK_VERSION_1_4 = 1;

	public const c_uint VK_API_VERSION_1_4 = VK_MAKE_API_VERSION(0,1,4,0);

	public const c_uint VK_MAX_GLOBAL_PRIORITY_SIZE = 16;

	public const c_uint VK_KHR_surface = 1;

	public const c_uint VK_KHR_SURFACE_SPEC_VERSION = 25;

	public const c_char* VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";

	public const c_uint VK_KHR_swapchain = 1;

	public const c_uint VK_KHR_SWAPCHAIN_SPEC_VERSION = 70;

	public const c_char* VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";

	public const c_uint VK_KHR_display = 1;

	public const c_uint VK_KHR_DISPLAY_SPEC_VERSION = 23;

	public const c_char* VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";

	public const c_uint VK_KHR_display_swapchain = 1;

	public const c_uint VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 10;

	public const c_char* VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";

	public const c_uint VK_KHR_sampler_mirror_clamp_to_edge = 1;

	public const c_uint VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 3;

	public const c_char* VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";

	public const c_uint VK_KHR_video_queue = 1;

	public const c_uint VK_KHR_VIDEO_QUEUE_SPEC_VERSION = 8;

	public const c_char* VK_KHR_VIDEO_QUEUE_EXTENSION_NAME = "VK_KHR_video_queue";

	public const c_uint VK_KHR_video_decode_queue = 1;

	public const c_uint VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION = 8;

	public const c_char* VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_decode_queue";

	public const c_uint VK_KHR_video_encode_h264 = 1;

	public const c_uint VULKAN_VIDEO_CODEC_H264STD_H_ = 1;

	public const c_uint vulkan_video_codec_h264std = 1;

	public const c_uint VULKAN_VIDEO_CODECS_COMMON_H_ = 1;

	public const c_uint vulkan_video_codecs_common = 1;

	public const c_uint STD_VIDEO_H264_CPB_CNT_LIST_SIZE = 32;

	public const c_uint STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS = 6;

	public const c_uint STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS = 16;

	public const c_uint STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS = 6;

	public const c_uint STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS = 64;

	public const c_uint STD_VIDEO_H264_MAX_NUM_LIST_REF = 32;

	public const c_uint STD_VIDEO_H264_MAX_CHROMA_PLANES = 2;

	public const float STD_VIDEO_H264_NO_REFERENCE_PICTURE = 0xFF;

	public const c_uint VULKAN_VIDEO_CODEC_H264STD_ENCODE_H_ = 1;

	public const c_uint vulkan_video_codec_h264std_encode = 1;

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(1,0,0);

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_1_0_0;

	public const c_char* VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_encode";

	public const c_uint VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION = 14;

	public const c_char* VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME = "VK_KHR_video_encode_h264";

	public const c_uint VK_KHR_video_encode_h265 = 1;

	public const c_uint VULKAN_VIDEO_CODEC_H265STD_H_ = 1;

	public const c_uint vulkan_video_codec_h265std = 1;

	public const c_uint STD_VIDEO_H265_CPB_CNT_LIST_SIZE = 32;

	public const c_uint STD_VIDEO_H265_SUBLAYERS_LIST_SIZE = 7;

	public const c_uint STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS = 6;

	public const c_uint STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS = 16;

	public const c_uint STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS = 6;

	public const c_uint STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS = 64;

	public const c_uint STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS = 6;

	public const c_uint STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS = 64;

	public const c_uint STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS = 2;

	public const c_uint STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS = 64;

	public const c_uint STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE = 6;

	public const c_uint STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE = 19;

	public const c_uint STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE = 21;

	public const c_uint STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE = 3;

	public const c_uint STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE = 128;

	public const c_uint STD_VIDEO_H265_MAX_NUM_LIST_REF = 15;

	public const c_uint STD_VIDEO_H265_MAX_CHROMA_PLANES = 2;

	public const c_uint STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS = 64;

	public const c_uint STD_VIDEO_H265_MAX_DPB_SIZE = 16;

	public const c_uint STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS = 32;

	public const c_uint STD_VIDEO_H265_MAX_LONG_TERM_PICS = 16;

	public const c_uint STD_VIDEO_H265_MAX_DELTA_POC = 48;

	public const float STD_VIDEO_H265_NO_REFERENCE_PICTURE = 0xFF;

	public const c_uint VULKAN_VIDEO_CODEC_H265STD_ENCODE_H_ = 1;

	public const c_uint vulkan_video_codec_h265std_encode = 1;

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(1,0,0);

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_1_0_0;

	public const c_char* VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_encode";

	public const c_uint VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION = 14;

	public const c_char* VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME = "VK_KHR_video_encode_h265";

	public const c_uint VK_KHR_video_decode_h264 = 1;

	public const c_uint VULKAN_VIDEO_CODEC_H264STD_DECODE_H_ = 1;

	public const c_uint vulkan_video_codec_h264std_decode = 1;

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(1,0,0);

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0;

	public const c_char* VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_decode";

	public const c_uint STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE = 2;

	public const c_uint VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION = 9;

	public const c_char* VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME = "VK_KHR_video_decode_h264";

	public const c_uint VK_KHR_dynamic_rendering = 1;

	public const c_uint VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION = 1;

	public const c_char* VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME = "VK_KHR_dynamic_rendering";

	public const c_uint VK_KHR_multiview = 1;

	public const c_uint VK_KHR_MULTIVIEW_SPEC_VERSION = 1;

	public const c_char* VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";

	public const c_uint VK_KHR_get_physical_device_properties2 = 1;

	public const c_uint VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 2;

	public const c_char* VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";

	public const c_uint VK_KHR_device_group = 1;

	public const c_uint VK_KHR_DEVICE_GROUP_SPEC_VERSION = 4;

	public const c_char* VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";

	public const c_uint VK_KHR_shader_draw_parameters = 1;

	public const c_uint VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";

	public const c_uint VK_KHR_maintenance1 = 1;

	public const c_uint VK_KHR_MAINTENANCE_1_SPEC_VERSION = 2;

	public const c_char* VK_KHR_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_maintenance1";

	public const c_uint VK_KHR_MAINTENANCE1_SPEC_VERSION = VK_KHR_MAINTENANCE_1_SPEC_VERSION;

	public const c_char* VK_KHR_MAINTENANCE1_EXTENSION_NAME = VK_KHR_MAINTENANCE_1_EXTENSION_NAME;

	public const c_uint VK_KHR_device_group_creation = 1;

	public const c_uint VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = 1;

	public const c_char* VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";

	public const c_uint VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE;

	public const c_uint VK_KHR_external_memory_capabilities = 1;

	public const c_uint VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;

	public const c_char* VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";

	public const c_uint VK_LUID_SIZE_KHR = VK_LUID_SIZE;

	public const c_uint VK_KHR_external_memory = 1;

	public const c_uint VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = 1;

	public const c_char* VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";

	public const c_uint VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL;

	public const c_uint VK_KHR_external_memory_fd = 1;

	public const c_uint VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1;

	public const c_char* VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";

	public const c_uint VK_KHR_external_semaphore_capabilities = 1;

	public const c_uint VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1;

	public const c_char* VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";

	public const c_uint VK_KHR_external_semaphore = 1;

	public const c_uint VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1;

	public const c_char* VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";

	public const c_uint VK_KHR_external_semaphore_fd = 1;

	public const c_uint VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1;

	public const c_char* VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";

	public const c_uint VK_KHR_push_descriptor = 1;

	public const c_uint VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 2;

	public const c_char* VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";

	public const c_uint VK_KHR_shader_float16_int8 = 1;

	public const c_uint VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";

	public const c_uint VK_KHR_16bit_storage = 1;

	public const c_uint VK_KHR_16BIT_STORAGE_SPEC_VERSION = 1;

	public const c_char* VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";

	public const c_uint VK_KHR_incremental_present = 1;

	public const c_uint VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 2;

	public const c_char* VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";

	public const c_uint VK_KHR_descriptor_update_template = 1;

	public const c_uint VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1;

	public const c_char* VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";

	public const c_uint VK_KHR_imageless_framebuffer = 1;

	public const c_uint VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = 1;

	public const c_char* VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";

	public const c_uint VK_KHR_create_renderpass2 = 1;

	public const c_uint VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = 1;

	public const c_char* VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";

	public const c_uint VK_KHR_shared_presentable_image = 1;

	public const c_uint VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";

	public const c_uint VK_KHR_external_fence_capabilities = 1;

	public const c_uint VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = 1;

	public const c_char* VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";

	public const c_uint VK_KHR_external_fence = 1;

	public const c_uint VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = 1;

	public const c_char* VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";

	public const c_uint VK_KHR_external_fence_fd = 1;

	public const c_uint VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = 1;

	public const c_char* VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";

	public const c_uint VK_KHR_performance_query = 1;

	public const c_uint VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION = 1;

	public const c_char* VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query";

	public const c_uint VK_KHR_maintenance2 = 1;

	public const c_uint VK_KHR_MAINTENANCE_2_SPEC_VERSION = 1;

	public const c_char* VK_KHR_MAINTENANCE_2_EXTENSION_NAME = "VK_KHR_maintenance2";

	public const c_uint VK_KHR_MAINTENANCE2_SPEC_VERSION = VK_KHR_MAINTENANCE_2_SPEC_VERSION;

	public const c_char* VK_KHR_MAINTENANCE2_EXTENSION_NAME = VK_KHR_MAINTENANCE_2_EXTENSION_NAME;

	public const c_uint VK_KHR_get_surface_capabilities2 = 1;

	public const c_uint VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1;

	public const c_char* VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";

	public const c_uint VK_KHR_variable_pointers = 1;

	public const c_uint VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = 1;

	public const c_char* VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";

	public const c_uint VK_KHR_get_display_properties2 = 1;

	public const c_uint VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = 1;

	public const c_char* VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";

	public const c_uint VK_KHR_dedicated_allocation = 1;

	public const c_uint VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = 3;

	public const c_char* VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";

	public const c_uint VK_KHR_storage_buffer_storage_class = 1;

	public const c_uint VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = 1;

	public const c_char* VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";

	public const c_uint VK_KHR_relaxed_block_layout = 1;

	public const c_uint VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = 1;

	public const c_char* VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";

	public const c_uint VK_KHR_get_memory_requirements2 = 1;

	public const c_uint VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = 1;

	public const c_char* VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";

	public const c_uint VK_KHR_image_format_list = 1;

	public const c_uint VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = 1;

	public const c_char* VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";

	public const c_uint VK_KHR_sampler_ycbcr_conversion = 1;

	public const c_uint VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = 14;

	public const c_char* VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";

	public const c_uint VK_KHR_bind_memory2 = 1;

	public const c_uint VK_KHR_BIND_MEMORY_2_SPEC_VERSION = 1;

	public const c_char* VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";

	public const c_uint VK_KHR_maintenance3 = 1;

	public const c_uint VK_KHR_MAINTENANCE_3_SPEC_VERSION = 1;

	public const c_char* VK_KHR_MAINTENANCE_3_EXTENSION_NAME = "VK_KHR_maintenance3";

	public const c_uint VK_KHR_MAINTENANCE3_SPEC_VERSION = VK_KHR_MAINTENANCE_3_SPEC_VERSION;

	public const c_char* VK_KHR_MAINTENANCE3_EXTENSION_NAME = VK_KHR_MAINTENANCE_3_EXTENSION_NAME;

	public const c_uint VK_KHR_draw_indirect_count = 1;

	public const c_uint VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1;

	public const c_char* VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";

	public const c_uint VK_KHR_shader_subgroup_extended_types = 1;

	public const c_uint VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types";

	public const c_uint VK_KHR_8bit_storage = 1;

	public const c_uint VK_KHR_8BIT_STORAGE_SPEC_VERSION = 1;

	public const c_char* VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";

	public const c_uint VK_KHR_shader_atomic_int64 = 1;

	public const c_uint VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";

	public const c_uint VK_KHR_shader_clock = 1;

	public const c_uint VK_KHR_SHADER_CLOCK_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock";

	public const c_uint VK_KHR_video_decode_h265 = 1;

	public const c_uint VULKAN_VIDEO_CODEC_H265STD_DECODE_H_ = 1;

	public const c_uint vulkan_video_codec_h265std_decode = 1;

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(1,0,0);

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0;

	public const c_char* VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_decode";

	public const c_uint STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE = 8;

	public const c_uint VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION = 8;

	public const c_char* VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME = "VK_KHR_video_decode_h265";

	public const c_uint VK_KHR_global_priority = 1;

	public const c_uint VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION = 1;

	public const c_char* VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_KHR_global_priority";

	public const c_uint VK_MAX_GLOBAL_PRIORITY_SIZE_KHR = VK_MAX_GLOBAL_PRIORITY_SIZE;

	public const c_uint VK_KHR_driver_properties = 1;

	public const c_uint VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = 1;

	public const c_char* VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";

	public const c_uint VK_MAX_DRIVER_NAME_SIZE_KHR = VK_MAX_DRIVER_NAME_SIZE;

	public const c_uint VK_MAX_DRIVER_INFO_SIZE_KHR = VK_MAX_DRIVER_INFO_SIZE;

	public const c_uint VK_KHR_shader_float_controls = 1;

	public const c_uint VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = 4;

	public const c_char* VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";

	public const c_uint VK_KHR_depth_stencil_resolve = 1;

	public const c_uint VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = 1;

	public const c_char* VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";

	public const c_uint VK_KHR_swapchain_mutable_format = 1;

	public const c_uint VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";

	public const c_uint VK_KHR_timeline_semaphore = 1;

	public const c_uint VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = 2;

	public const c_char* VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore";

	public const c_uint VK_KHR_vulkan_memory_model = 1;

	public const c_uint VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = 3;

	public const c_char* VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";

	public const c_uint VK_KHR_shader_terminate_invocation = 1;

	public const c_uint VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation";

	public const c_uint VK_KHR_fragment_shading_rate = 1;

	public const c_uint VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = 2;

	public const c_char* VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate";

	public const c_uint VK_KHR_dynamic_rendering_local_read = 1;

	public const c_uint VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION = 1;

	public const c_char* VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME = "VK_KHR_dynamic_rendering_local_read";

	public const c_uint VK_KHR_shader_quad_control = 1;

	public const c_uint VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME = "VK_KHR_shader_quad_control";

	public const c_uint VK_KHR_spirv_1_4 = 1;

	public const c_uint VK_KHR_SPIRV_1_4_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4";

	public const c_uint VK_KHR_surface_protected_capabilities = 1;

	public const c_uint VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";

	public const c_uint VK_KHR_separate_depth_stencil_layouts = 1;

	public const c_uint VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts";

	public const c_uint VK_KHR_present_wait = 1;

	public const c_uint VK_KHR_PRESENT_WAIT_SPEC_VERSION = 1;

	public const c_char* VK_KHR_PRESENT_WAIT_EXTENSION_NAME = "VK_KHR_present_wait";

	public const c_uint VK_KHR_uniform_buffer_standard_layout = 1;

	public const c_uint VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = 1;

	public const c_char* VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";

	public const c_uint VK_KHR_buffer_device_address = 1;

	public const c_uint VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 1;

	public const c_char* VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address";

	public const c_uint VK_KHR_deferred_host_operations = 1;

	public const c_uint VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = 4;

	public const c_char* VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations";

	public const c_uint VK_KHR_pipeline_executable_properties = 1;

	public const c_uint VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = 1;

	public const c_char* VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";

	public const c_uint VK_KHR_map_memory2 = 1;

	public const c_uint VK_KHR_MAP_MEMORY_2_SPEC_VERSION = 1;

	public const c_char* VK_KHR_MAP_MEMORY_2_EXTENSION_NAME = "VK_KHR_map_memory2";

	public const c_uint VK_KHR_shader_integer_dot_product = 1;

	public const c_uint VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME = "VK_KHR_shader_integer_dot_product";

	public const c_uint VK_KHR_pipeline_library = 1;

	public const c_uint VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION = 1;

	public const c_char* VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library";

	public const c_uint VK_KHR_shader_non_semantic_info = 1;

	public const c_uint VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info";

	public const c_uint VK_KHR_present_id = 1;

	public const c_uint VK_KHR_PRESENT_ID_SPEC_VERSION = 1;

	public const c_char* VK_KHR_PRESENT_ID_EXTENSION_NAME = "VK_KHR_present_id";

	public const c_uint VK_KHR_video_encode_queue = 1;

	public const c_uint VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION = 12;

	public const c_char* VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_encode_queue";

	public const c_uint VK_KHR_synchronization2 = 1;

	public const c_uint VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME = "VK_KHR_synchronization2";

	public const c_uint VK_KHR_fragment_shader_barycentric = 1;

	public const c_uint VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1;

	public const c_char* VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_KHR_fragment_shader_barycentric";

	public const c_uint VK_KHR_shader_subgroup_uniform_control_flow = 1;

	public const c_uint VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME = "VK_KHR_shader_subgroup_uniform_control_flow";

	public const c_uint VK_KHR_zero_initialize_workgroup_memory = 1;

	public const c_uint VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION = 1;

	public const c_char* VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = "VK_KHR_zero_initialize_workgroup_memory";

	public const c_uint VK_KHR_workgroup_memory_explicit_layout = 1;

	public const c_uint VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION = 1;

	public const c_char* VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = "VK_KHR_workgroup_memory_explicit_layout";

	public const c_uint VK_KHR_copy_commands2 = 1;

	public const c_uint VK_KHR_COPY_COMMANDS_2_SPEC_VERSION = 1;

	public const c_char* VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2";

	public const c_uint VK_KHR_format_feature_flags2 = 1;

	public const c_uint VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION = 2;

	public const c_char* VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME = "VK_KHR_format_feature_flags2";

	public const c_uint VK_KHR_ray_tracing_maintenance1 = 1;

	public const c_uint VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION = 1;

	public const c_char* VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_ray_tracing_maintenance1";

	public const c_uint VK_KHR_portability_enumeration = 1;

	public const c_uint VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION = 1;

	public const c_char* VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME = "VK_KHR_portability_enumeration";

	public const c_uint VK_KHR_maintenance4 = 1;

	public const c_uint VK_KHR_MAINTENANCE_4_SPEC_VERSION = 2;

	public const c_char* VK_KHR_MAINTENANCE_4_EXTENSION_NAME = "VK_KHR_maintenance4";

	public const c_uint VK_KHR_shader_subgroup_rotate = 1;

	public const c_uint VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION = 2;

	public const c_char* VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME = "VK_KHR_shader_subgroup_rotate";

	public const c_uint VK_KHR_shader_maximal_reconvergence = 1;

	public const c_uint VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME = "VK_KHR_shader_maximal_reconvergence";

	public const c_uint VK_KHR_maintenance5 = 1;

	public const c_uint VK_KHR_MAINTENANCE_5_SPEC_VERSION = 1;

	public const c_char* VK_KHR_MAINTENANCE_5_EXTENSION_NAME = "VK_KHR_maintenance5";

	public const c_uint VK_KHR_ray_tracing_position_fetch = 1;

	public const c_uint VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION = 1;

	public const c_char* VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME = "VK_KHR_ray_tracing_position_fetch";

	public const c_uint VK_KHR_pipeline_binary = 1;

	public const c_uint VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR = 32;

	public const c_uint VK_KHR_PIPELINE_BINARY_SPEC_VERSION = 1;

	public const c_char* VK_KHR_PIPELINE_BINARY_EXTENSION_NAME = "VK_KHR_pipeline_binary";

	public const c_uint VK_KHR_cooperative_matrix = 1;

	public const c_uint VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION = 2;

	public const c_char* VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_KHR_cooperative_matrix";

	public const c_uint VK_KHR_compute_shader_derivatives = 1;

	public const c_uint VK_KHR_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1;

	public const c_char* VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_KHR_compute_shader_derivatives";

	public const c_uint VK_KHR_video_decode_av1 = 1;

	public const c_uint VULKAN_VIDEO_CODEC_AV1STD_H_ = 1;

	public const c_uint vulkan_video_codec_av1std = 1;

	public const c_uint STD_VIDEO_AV1_NUM_REF_FRAMES = 8;

	public const c_uint STD_VIDEO_AV1_REFS_PER_FRAME = 7;

	public const c_uint STD_VIDEO_AV1_TOTAL_REFS_PER_FRAME = 8;

	public const c_uint STD_VIDEO_AV1_MAX_TILE_COLS = 64;

	public const c_uint STD_VIDEO_AV1_MAX_TILE_ROWS = 64;

	public const c_uint STD_VIDEO_AV1_MAX_SEGMENTS = 8;

	public const c_uint STD_VIDEO_AV1_SEG_LVL_MAX = 8;

	public const c_uint STD_VIDEO_AV1_PRIMARY_REF_NONE = 7;

	public const c_uint STD_VIDEO_AV1_SELECT_INTEGER_MV = 2;

	public const c_uint STD_VIDEO_AV1_SELECT_SCREEN_CONTENT_TOOLS = 2;

	public const c_uint STD_VIDEO_AV1_SKIP_MODE_FRAMES = 2;

	public const c_uint STD_VIDEO_AV1_MAX_LOOP_FILTER_STRENGTHS = 4;

	public const c_uint STD_VIDEO_AV1_LOOP_FILTER_ADJUSTMENTS = 2;

	public const c_uint STD_VIDEO_AV1_MAX_CDEF_FILTER_STRENGTHS = 8;

	public const c_uint STD_VIDEO_AV1_MAX_NUM_PLANES = 3;

	public const c_uint STD_VIDEO_AV1_GLOBAL_MOTION_PARAMS = 6;

	public const c_uint STD_VIDEO_AV1_MAX_NUM_Y_POINTS = 14;

	public const c_uint STD_VIDEO_AV1_MAX_NUM_CB_POINTS = 10;

	public const c_uint STD_VIDEO_AV1_MAX_NUM_CR_POINTS = 10;

	public const c_uint STD_VIDEO_AV1_MAX_NUM_POS_LUMA = 24;

	public const c_uint STD_VIDEO_AV1_MAX_NUM_POS_CHROMA = 25;

	public const c_uint VULKAN_VIDEO_CODEC_AV1STD_DECODE_H_ = 1;

	public const c_uint vulkan_video_codec_av1std_decode = 1;

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(1,0,0);

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_API_VERSION_1_0_0;

	public const c_char* VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_av1_decode";

	public const c_uint VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR = 7;

	public const c_uint VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION = 1;

	public const c_char* VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME = "VK_KHR_video_decode_av1";

	public const c_uint VK_KHR_video_encode_av1 = 1;

	public const c_uint VULKAN_VIDEO_CODEC_AV1STD_ENCODE_H_ = 1;

	public const c_uint vulkan_video_codec_av1std_encode = 1;

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(1,0,0);

	public const c_uint VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_API_VERSION_1_0_0;

	public const c_char* VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_av1_encode";

	public const c_uint VK_KHR_VIDEO_ENCODE_AV1_SPEC_VERSION = 1;

	public const c_char* VK_KHR_VIDEO_ENCODE_AV1_EXTENSION_NAME = "VK_KHR_video_encode_av1";

	public const c_uint VK_KHR_video_maintenance1 = 1;

	public const c_uint VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION = 1;

	public const c_char* VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_video_maintenance1";

	public const c_uint VK_KHR_vertex_attribute_divisor = 1;

	public const c_uint VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 1;

	public const c_char* VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_KHR_vertex_attribute_divisor";

	public const c_uint VK_KHR_load_store_op_none = 1;

	public const c_uint VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION = 1;

	public const c_char* VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_KHR_load_store_op_none";

	public const c_uint VK_KHR_shader_float_controls2 = 1;

	public const c_uint VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME = "VK_KHR_shader_float_controls2";

	public const c_uint VK_KHR_index_type_uint8 = 1;

	public const c_uint VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION = 1;

	public const c_char* VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_KHR_index_type_uint8";

	public const c_uint VK_KHR_line_rasterization = 1;

	public const c_uint VK_KHR_LINE_RASTERIZATION_SPEC_VERSION = 1;

	public const c_char* VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME = "VK_KHR_line_rasterization";

	public const c_uint VK_KHR_calibrated_timestamps = 1;

	public const c_uint VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 1;

	public const c_char* VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_KHR_calibrated_timestamps";

	public const c_uint VK_KHR_shader_expect_assume = 1;

	public const c_uint VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME = "VK_KHR_shader_expect_assume";

	public const c_uint VK_KHR_maintenance6 = 1;

	public const c_uint VK_KHR_MAINTENANCE_6_SPEC_VERSION = 1;

	public const c_char* VK_KHR_MAINTENANCE_6_EXTENSION_NAME = "VK_KHR_maintenance6";

	public const c_uint VK_KHR_video_encode_quantization_map = 1;

	public const c_uint VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_SPEC_VERSION = 2;

	public const c_char* VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_EXTENSION_NAME = "VK_KHR_video_encode_quantization_map";

	public const c_uint VK_KHR_shader_relaxed_extended_instruction = 1;

	public const c_uint VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_SPEC_VERSION = 1;

	public const c_char* VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_EXTENSION_NAME = "VK_KHR_shader_relaxed_extended_instruction";

	public const c_uint VK_KHR_maintenance7 = 1;

	public const c_uint VK_KHR_MAINTENANCE_7_SPEC_VERSION = 1;

	public const c_char* VK_KHR_MAINTENANCE_7_EXTENSION_NAME = "VK_KHR_maintenance7";

	public const c_uint VK_EXT_debug_report = 1;

	public const c_uint VK_EXT_DEBUG_REPORT_SPEC_VERSION = 10;

	public const c_char* VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";

	public const c_uint VK_NV_glsl_shader = 1;

	public const c_uint VK_NV_GLSL_SHADER_SPEC_VERSION = 1;

	public const c_char* VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";

	public const c_uint VK_EXT_depth_range_unrestricted = 1;

	public const c_uint VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";

	public const c_uint VK_IMG_filter_cubic = 1;

	public const c_uint VK_IMG_FILTER_CUBIC_SPEC_VERSION = 1;

	public const c_char* VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";

	public const c_uint VK_AMD_rasterization_order = 1;

	public const c_uint VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1;

	public const c_char* VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";

	public const c_uint VK_AMD_shader_trinary_minmax = 1;

	public const c_uint VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1;

	public const c_char* VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";

	public const c_uint VK_AMD_shader_explicit_vertex_parameter = 1;

	public const c_uint VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1;

	public const c_char* VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";

	public const c_uint VK_EXT_debug_marker = 1;

	public const c_uint VK_EXT_DEBUG_MARKER_SPEC_VERSION = 4;

	public const c_char* VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";

	public const c_uint VK_AMD_gcn_shader = 1;

	public const c_uint VK_AMD_GCN_SHADER_SPEC_VERSION = 1;

	public const c_char* VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";

	public const c_uint VK_NV_dedicated_allocation = 1;

	public const c_uint VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1;

	public const c_char* VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";

	public const c_uint VK_EXT_transform_feedback = 1;

	public const c_uint VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = 1;

	public const c_char* VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";

	public const c_uint VK_NVX_binary_import = 1;

	public const c_uint VK_NVX_BINARY_IMPORT_SPEC_VERSION = 2;

	public const c_char* VK_NVX_BINARY_IMPORT_EXTENSION_NAME = "VK_NVX_binary_import";

	public const c_uint VK_NVX_image_view_handle = 1;

	public const c_uint VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = 3;

	public const c_char* VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";

	public const c_uint VK_AMD_draw_indirect_count = 1;

	public const c_uint VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 2;

	public const c_char* VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";

	public const c_uint VK_AMD_negative_viewport_height = 1;

	public const c_uint VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1;

	public const c_char* VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";

	public const c_uint VK_AMD_gpu_shader_half_float = 1;

	public const c_uint VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 2;

	public const c_char* VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";

	public const c_uint VK_AMD_shader_ballot = 1;

	public const c_uint VK_AMD_SHADER_BALLOT_SPEC_VERSION = 1;

	public const c_char* VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";

	public const c_uint VK_AMD_texture_gather_bias_lod = 1;

	public const c_uint VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = 1;

	public const c_char* VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";

	public const c_uint VK_AMD_shader_info = 1;

	public const c_uint VK_AMD_SHADER_INFO_SPEC_VERSION = 1;

	public const c_char* VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";

	public const c_uint VK_AMD_shader_image_load_store_lod = 1;

	public const c_uint VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = 1;

	public const c_char* VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";

	public const c_uint VK_NV_corner_sampled_image = 1;

	public const c_uint VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = 2;

	public const c_char* VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";

	public const c_uint VK_IMG_format_pvrtc = 1;

	public const c_uint VK_IMG_FORMAT_PVRTC_SPEC_VERSION = 1;

	public const c_char* VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";

	public const c_uint VK_NV_external_memory_capabilities = 1;

	public const c_uint VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;

	public const c_char* VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";

	public const c_uint VK_NV_external_memory = 1;

	public const c_uint VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = 1;

	public const c_char* VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";

	public const c_uint VK_EXT_validation_flags = 1;

	public const c_uint VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = 3;

	public const c_char* VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";

	public const c_uint VK_EXT_shader_subgroup_ballot = 1;

	public const c_uint VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";

	public const c_uint VK_EXT_shader_subgroup_vote = 1;

	public const c_uint VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";

	public const c_uint VK_EXT_texture_compression_astc_hdr = 1;

	public const c_uint VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = 1;

	public const c_char* VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";

	public const c_uint VK_EXT_astc_decode_mode = 1;

	public const c_uint VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";

	public const c_uint VK_EXT_pipeline_robustness = 1;

	public const c_uint VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_pipeline_robustness";

	public const c_uint VK_EXT_conditional_rendering = 1;

	public const c_uint VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = 2;

	public const c_char* VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";

	public const c_uint VK_NV_clip_space_w_scaling = 1;

	public const c_uint VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1;

	public const c_char* VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";

	public const c_uint VK_EXT_direct_mode_display = 1;

	public const c_uint VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";

	public const c_uint VK_EXT_display_surface_counter = 1;

	public const c_uint VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";

	public const c_uint VK_EXT_display_control = 1;

	public const c_uint VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";

	public const c_uint VK_GOOGLE_display_timing = 1;

	public const c_uint VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1;

	public const c_char* VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";

	public const c_uint VK_NV_sample_mask_override_coverage = 1;

	public const c_uint VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1;

	public const c_char* VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";

	public const c_uint VK_NV_geometry_shader_passthrough = 1;

	public const c_uint VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1;

	public const c_char* VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";

	public const c_uint VK_NV_viewport_array2 = 1;

	public const c_uint VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION = 1;

	public const c_char* VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME = "VK_NV_viewport_array2";

	public const c_uint VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION;

	public const c_char* VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME;

	public const c_uint VK_NVX_multiview_per_view_attributes = 1;

	public const c_uint VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1;

	public const c_char* VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";

	public const c_uint VK_NV_viewport_swizzle = 1;

	public const c_uint VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1;

	public const c_char* VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";

	public const c_uint VK_EXT_discard_rectangles = 1;

	public const c_uint VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = 2;

	public const c_char* VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";

	public const c_uint VK_EXT_conservative_rasterization = 1;

	public const c_uint VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = 1;

	public const c_char* VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";

	public const c_uint VK_EXT_depth_clip_enable = 1;

	public const c_uint VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";

	public const c_uint VK_EXT_swapchain_colorspace = 1;

	public const c_uint VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 5;

	public const c_char* VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";

	public const c_uint VK_EXT_hdr_metadata = 1;

	public const c_uint VK_EXT_HDR_METADATA_SPEC_VERSION = 3;

	public const c_char* VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";

	public const c_uint VK_IMG_relaxed_line_rasterization = 1;

	public const c_uint VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION = 1;

	public const c_char* VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME = "VK_IMG_relaxed_line_rasterization";

	public const c_uint VK_EXT_external_memory_dma_buf = 1;

	public const c_uint VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = 1;

	public const c_char* VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";

	public const c_uint VK_EXT_queue_family_foreign = 1;

	public const c_uint VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = 1;

	public const c_char* VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";

	public const c_uint VK_QUEUE_FAMILY_FOREIGN_EXT = (~2);

	public const c_uint VK_EXT_debug_utils = 1;

	public const c_uint VK_EXT_DEBUG_UTILS_SPEC_VERSION = 2;

	public const c_char* VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";

	public const c_uint VK_EXT_sampler_filter_minmax = 1;

	public const c_uint VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = 2;

	public const c_char* VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";

	public const c_uint VK_AMD_gpu_shader_int16 = 1;

	public const c_uint VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = 2;

	public const c_char* VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";

	public const c_uint VK_AMD_mixed_attachment_samples = 1;

	public const c_uint VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = 1;

	public const c_char* VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";

	public const c_uint VK_AMD_shader_fragment_mask = 1;

	public const c_uint VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = 1;

	public const c_char* VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";

	public const c_uint VK_EXT_inline_uniform_block = 1;

	public const c_uint VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = 1;

	public const c_char* VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";

	public const c_uint VK_EXT_shader_stencil_export = 1;

	public const c_uint VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";

	public const c_uint VK_EXT_sample_locations = 1;

	public const c_uint VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";

	public const c_uint VK_EXT_blend_operation_advanced = 1;

	public const c_uint VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = 2;

	public const c_char* VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";

	public const c_uint VK_NV_fragment_coverage_to_color = 1;

	public const c_uint VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = 1;

	public const c_char* VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";

	public const c_uint VK_NV_framebuffer_mixed_samples = 1;

	public const c_uint VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = 1;

	public const c_char* VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";

	public const c_uint VK_NV_fill_rectangle = 1;

	public const c_uint VK_NV_FILL_RECTANGLE_SPEC_VERSION = 1;

	public const c_char* VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";

	public const c_uint VK_NV_shader_sm_builtins = 1;

	public const c_uint VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = 1;

	public const c_char* VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";

	public const c_uint VK_EXT_post_depth_coverage = 1;

	public const c_uint VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";

	public const c_uint VK_EXT_image_drm_format_modifier = 1;

	public const c_uint VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = 2;

	public const c_char* VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";

	public const c_uint VK_EXT_validation_cache = 1;

	public const c_uint VK_EXT_VALIDATION_CACHE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";

	public const c_uint VK_EXT_descriptor_indexing = 1;

	public const c_uint VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = 2;

	public const c_char* VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";

	public const c_uint VK_EXT_shader_viewport_index_layer = 1;

	public const c_uint VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";

	public const c_uint VK_NV_shading_rate_image = 1;

	public const c_uint VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = 3;

	public const c_char* VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";

	public const c_uint VK_NV_ray_tracing = 1;

	public const c_uint VK_NV_RAY_TRACING_SPEC_VERSION = 3;

	public const c_char* VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";

	public const c_uint VK_SHADER_UNUSED_KHR = (~0);

	public const c_uint VK_SHADER_UNUSED_NV = VK_SHADER_UNUSED_KHR;

	public const c_uint VK_NV_representative_fragment_test = 1;

	public const c_uint VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = 2;

	public const c_char* VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";

	public const c_uint VK_EXT_filter_cubic = 1;

	public const c_uint VK_EXT_FILTER_CUBIC_SPEC_VERSION = 3;

	public const c_char* VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";

	public const c_uint VK_QCOM_render_pass_shader_resolve = 1;

	public const c_uint VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = 4;

	public const c_char* VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve";

	public const c_uint VK_EXT_global_priority = 1;

	public const c_uint VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = 2;

	public const c_char* VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";

	public const c_uint VK_EXT_external_memory_host = 1;

	public const c_uint VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = 1;

	public const c_char* VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";

	public const c_uint VK_AMD_buffer_marker = 1;

	public const c_uint VK_AMD_BUFFER_MARKER_SPEC_VERSION = 1;

	public const c_char* VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";

	public const c_uint VK_AMD_pipeline_compiler_control = 1;

	public const c_uint VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = 1;

	public const c_char* VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";

	public const c_uint VK_EXT_calibrated_timestamps = 1;

	public const c_uint VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 2;

	public const c_char* VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";

	public const c_uint VK_AMD_shader_core_properties = 1;

	public const c_uint VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = 2;

	public const c_char* VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";

	public const c_uint VK_AMD_memory_overallocation_behavior = 1;

	public const c_uint VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = 1;

	public const c_char* VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";

	public const c_uint VK_EXT_vertex_attribute_divisor = 1;

	public const c_uint VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 3;

	public const c_char* VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";

	public const c_uint VK_EXT_pipeline_creation_feedback = 1;

	public const c_uint VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";

	public const c_uint VK_NV_shader_subgroup_partitioned = 1;

	public const c_uint VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = 1;

	public const c_char* VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";

	public const c_uint VK_NV_compute_shader_derivatives = 1;

	public const c_uint VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1;

	public const c_char* VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";

	public const c_uint VK_NV_mesh_shader = 1;

	public const c_uint VK_NV_MESH_SHADER_SPEC_VERSION = 1;

	public const c_char* VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";

	public const c_uint VK_NV_fragment_shader_barycentric = 1;

	public const c_uint VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1;

	public const c_char* VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";

	public const c_uint VK_NV_shader_image_footprint = 1;

	public const c_uint VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = 2;

	public const c_char* VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";

	public const c_uint VK_NV_scissor_exclusive = 1;

	public const c_uint VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = 2;

	public const c_char* VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";

	public const c_uint VK_NV_device_diagnostic_checkpoints = 1;

	public const c_uint VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = 2;

	public const c_char* VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";

	public const c_uint VK_INTEL_shader_integer_functions2 = 1;

	public const c_uint VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = 1;

	public const c_char* VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";

	public const c_uint VK_INTEL_performance_query = 1;

	public const c_uint VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = 2;

	public const c_char* VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";

	public const c_uint VK_EXT_pci_bus_info = 1;

	public const c_uint VK_EXT_PCI_BUS_INFO_SPEC_VERSION = 2;

	public const c_char* VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";

	public const c_uint VK_AMD_display_native_hdr = 1;

	public const c_uint VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = 1;

	public const c_char* VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";

	public const c_uint VK_EXT_fragment_density_map = 1;

	public const c_uint VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = 2;

	public const c_char* VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";

	public const c_uint VK_EXT_scalar_block_layout = 1;

	public const c_uint VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";

	public const c_uint VK_GOOGLE_hlsl_functionality1 = 1;

	public const c_uint VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION = 1;

	public const c_char* VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";

	public const c_uint VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION;

	public const c_char* VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME;

	public const c_uint VK_GOOGLE_decorate_string = 1;

	public const c_uint VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = 1;

	public const c_char* VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";

	public const c_uint VK_EXT_subgroup_size_control = 1;

	public const c_uint VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = 2;

	public const c_char* VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";

	public const c_uint VK_AMD_shader_core_properties2 = 1;

	public const c_uint VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = 1;

	public const c_char* VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";

	public const c_uint VK_AMD_device_coherent_memory = 1;

	public const c_uint VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = 1;

	public const c_char* VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";

	public const c_uint VK_EXT_shader_image_atomic_int64 = 1;

	public const c_uint VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64";

	public const c_uint VK_EXT_memory_budget = 1;

	public const c_uint VK_EXT_MEMORY_BUDGET_SPEC_VERSION = 1;

	public const c_char* VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";

	public const c_uint VK_EXT_memory_priority = 1;

	public const c_uint VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = 1;

	public const c_char* VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";

	public const c_uint VK_NV_dedicated_allocation_image_aliasing = 1;

	public const c_uint VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = 1;

	public const c_char* VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";

	public const c_uint VK_EXT_buffer_device_address = 1;

	public const c_uint VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 2;

	public const c_char* VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";

	public const c_uint VK_EXT_tooling_info = 1;

	public const c_uint VK_EXT_TOOLING_INFO_SPEC_VERSION = 1;

	public const c_char* VK_EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info";

	public const c_uint VK_EXT_separate_stencil_usage = 1;

	public const c_uint VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";

	public const c_uint VK_EXT_validation_features = 1;

	public const c_uint VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = 6;

	public const c_char* VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";

	public const c_uint VK_NV_cooperative_matrix = 1;

	public const c_uint VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = 1;

	public const c_char* VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";

	public const c_uint VK_NV_coverage_reduction_mode = 1;

	public const c_uint VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = 1;

	public const c_char* VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";

	public const c_uint VK_EXT_fragment_shader_interlock = 1;

	public const c_uint VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = 1;

	public const c_char* VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";

	public const c_uint VK_EXT_ycbcr_image_arrays = 1;

	public const c_uint VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";

	public const c_uint VK_EXT_provoking_vertex = 1;

	public const c_uint VK_EXT_PROVOKING_VERTEX_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME = "VK_EXT_provoking_vertex";

	public const c_uint VK_EXT_headless_surface = 1;

	public const c_uint VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";

	public const c_uint VK_EXT_line_rasterization = 1;

	public const c_uint VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = 1;

	public const c_char* VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";

	public const c_uint VK_EXT_shader_atomic_float = 1;

	public const c_uint VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float";

	public const c_uint VK_EXT_host_query_reset = 1;

	public const c_uint VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = 1;

	public const c_char* VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";

	public const c_uint VK_EXT_index_type_uint8 = 1;

	public const c_uint VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = 1;

	public const c_char* VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";

	public const c_uint VK_EXT_extended_dynamic_state = 1;

	public const c_uint VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state";

	public const c_uint VK_EXT_host_image_copy = 1;

	public const c_uint VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION = 1;

	public const c_char* VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME = "VK_EXT_host_image_copy";

	public const c_uint VK_EXT_map_memory_placed = 1;

	public const c_uint VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION = 1;

	public const c_char* VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME = "VK_EXT_map_memory_placed";

	public const c_uint VK_EXT_shader_atomic_float2 = 1;

	public const c_uint VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME = "VK_EXT_shader_atomic_float2";

	public const c_uint VK_EXT_surface_maintenance1 = 1;

	public const c_uint VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_surface_maintenance1";

	public const c_uint VK_EXT_swapchain_maintenance1 = 1;

	public const c_uint VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_swapchain_maintenance1";

	public const c_uint VK_EXT_shader_demote_to_helper_invocation = 1;

	public const c_uint VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";

	public const c_uint VK_NV_device_generated_commands = 1;

	public const c_uint VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 3;

	public const c_char* VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands";

	public const c_uint VK_NV_inherited_viewport_scissor = 1;

	public const c_uint VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION = 1;

	public const c_char* VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME = "VK_NV_inherited_viewport_scissor";

	public const c_uint VK_EXT_texel_buffer_alignment = 1;

	public const c_uint VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = 1;

	public const c_char* VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";

	public const c_uint VK_QCOM_render_pass_transform = 1;

	public const c_uint VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = 4;

	public const c_char* VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform";

	public const c_uint VK_EXT_depth_bias_control = 1;

	public const c_uint VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME = "VK_EXT_depth_bias_control";

	public const c_uint VK_EXT_device_memory_report = 1;

	public const c_uint VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = 2;

	public const c_char* VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report";

	public const c_uint VK_EXT_acquire_drm_display = 1;

	public const c_uint VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION = 1;

	public const c_char* VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_drm_display";

	public const c_uint VK_EXT_robustness2 = 1;

	public const c_uint VK_EXT_ROBUSTNESS_2_SPEC_VERSION = 1;

	public const c_char* VK_EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2";

	public const c_uint VK_EXT_custom_border_color = 1;

	public const c_uint VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = 12;

	public const c_char* VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color";

	public const c_uint VK_GOOGLE_user_type = 1;

	public const c_uint VK_GOOGLE_USER_TYPE_SPEC_VERSION = 1;

	public const c_char* VK_GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type";

	public const c_uint VK_NV_present_barrier = 1;

	public const c_uint VK_NV_PRESENT_BARRIER_SPEC_VERSION = 1;

	public const c_char* VK_NV_PRESENT_BARRIER_EXTENSION_NAME = "VK_NV_present_barrier";

	public const c_uint VK_EXT_private_data = 1;

	public const c_uint VK_EXT_PRIVATE_DATA_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data";

	public const c_uint VK_EXT_pipeline_creation_cache_control = 1;

	public const c_uint VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = 3;

	public const c_char* VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control";

	public const c_uint VK_NV_device_diagnostics_config = 1;

	public const c_uint VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = 2;

	public const c_char* VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config";

	public const c_uint VK_QCOM_render_pass_store_ops = 1;

	public const c_uint VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION = 2;

	public const c_char* VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops";

	public const c_uint VK_NV_cuda_kernel_launch = 1;

	public const c_uint VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION = 2;

	public const c_char* VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME = "VK_NV_cuda_kernel_launch";

	public const c_uint VK_NV_low_latency = 1;

	public const c_uint VK_NV_LOW_LATENCY_SPEC_VERSION = 1;

	public const c_char* VK_NV_LOW_LATENCY_EXTENSION_NAME = "VK_NV_low_latency";

	public const c_uint VK_EXT_descriptor_buffer = 1;

	public const c_uint VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME = "VK_EXT_descriptor_buffer";

	public const c_uint VK_EXT_graphics_pipeline_library = 1;

	public const c_uint VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION = 1;

	public const c_char* VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_EXT_graphics_pipeline_library";

	public const c_uint VK_AMD_shader_early_and_late_fragment_tests = 1;

	public const c_uint VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION = 1;

	public const c_char* VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME = "VK_AMD_shader_early_and_late_fragment_tests";

	public const c_uint VK_NV_fragment_shading_rate_enums = 1;

	public const c_uint VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = 1;

	public const c_char* VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums";

	public const c_uint VK_NV_ray_tracing_motion_blur = 1;

	public const c_uint VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION = 1;

	public const c_char* VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME = "VK_NV_ray_tracing_motion_blur";

	public const c_uint VK_EXT_ycbcr_2plane_444_formats = 1;

	public const c_uint VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME = "VK_EXT_ycbcr_2plane_444_formats";

	public const c_uint VK_EXT_fragment_density_map2 = 1;

	public const c_uint VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = 1;

	public const c_char* VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2";

	public const c_uint VK_QCOM_rotated_copy_commands = 1;

	public const c_uint VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION = 2;

	public const c_char* VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands";

	public const c_uint VK_EXT_image_robustness = 1;

	public const c_uint VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness";

	public const c_uint VK_EXT_image_compression_control = 1;

	public const c_uint VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION = 1;

	public const c_char* VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME = "VK_EXT_image_compression_control";

	public const c_uint VK_EXT_attachment_feedback_loop_layout = 1;

	public const c_uint VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION = 2;

	public const c_char* VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_layout";

	public const c_uint VK_EXT_4444_formats = 1;

	public const c_uint VK_EXT_4444_FORMATS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats";

	public const c_uint VK_EXT_device_fault = 1;

	public const c_uint VK_EXT_DEVICE_FAULT_SPEC_VERSION = 2;

	public const c_char* VK_EXT_DEVICE_FAULT_EXTENSION_NAME = "VK_EXT_device_fault";

	public const c_uint VK_ARM_rasterization_order_attachment_access = 1;

	public const c_uint VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = 1;

	public const c_char* VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_ARM_rasterization_order_attachment_access";

	public const c_uint VK_EXT_rgba10x6_formats = 1;

	public const c_uint VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME = "VK_EXT_rgba10x6_formats";

	public const c_uint VK_VALVE_mutable_descriptor_type = 1;

	public const c_uint VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = 1;

	public const c_char* VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_VALVE_mutable_descriptor_type";

	public const c_uint VK_EXT_vertex_input_dynamic_state = 1;

	public const c_uint VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION = 2;

	public const c_char* VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_vertex_input_dynamic_state";

	public const c_uint VK_EXT_physical_device_drm = 1;

	public const c_uint VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME = "VK_EXT_physical_device_drm";

	public const c_uint VK_EXT_device_address_binding_report = 1;

	public const c_uint VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME = "VK_EXT_device_address_binding_report";

	public const c_uint VK_EXT_depth_clip_control = 1;

	public const c_uint VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clip_control";

	public const c_uint VK_EXT_primitive_topology_list_restart = 1;

	public const c_uint VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME = "VK_EXT_primitive_topology_list_restart";

	public const c_uint VK_EXT_present_mode_fifo_latest_ready = 1;

	public const c_uint VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_EXTENSION_NAME = "VK_EXT_present_mode_fifo_latest_ready";

	public const c_uint VK_HUAWEI_subpass_shading = 1;

	public const c_uint VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION = 3;

	public const c_char* VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME = "VK_HUAWEI_subpass_shading";

	public const c_uint VK_HUAWEI_invocation_mask = 1;

	public const c_uint VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION = 1;

	public const c_char* VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME = "VK_HUAWEI_invocation_mask";

	public const c_uint VK_NV_external_memory_rdma = 1;

	public const c_uint VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION = 1;

	public const c_char* VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME = "VK_NV_external_memory_rdma";

	public const c_uint VK_EXT_pipeline_properties = 1;

	public const c_uint VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME = "VK_EXT_pipeline_properties";

	public const c_uint VK_EXT_frame_boundary = 1;

	public const c_uint VK_EXT_FRAME_BOUNDARY_SPEC_VERSION = 1;

	public const c_char* VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME = "VK_EXT_frame_boundary";

	public const c_uint VK_EXT_multisampled_render_to_single_sampled = 1;

	public const c_uint VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION = 1;

	public const c_char* VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME = "VK_EXT_multisampled_render_to_single_sampled";

	public const c_uint VK_EXT_extended_dynamic_state2 = 1;

	public const c_uint VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION = 1;

	public const c_char* VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME = "VK_EXT_extended_dynamic_state2";

	public const c_uint VK_EXT_color_write_enable = 1;

	public const c_uint VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME = "VK_EXT_color_write_enable";

	public const c_uint VK_EXT_primitives_generated_query = 1;

	public const c_uint VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME = "VK_EXT_primitives_generated_query";

	public const c_uint VK_EXT_global_priority_query = 1;

	public const c_uint VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION = 1;

	public const c_char* VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME = "VK_EXT_global_priority_query";

	public const c_uint VK_MAX_GLOBAL_PRIORITY_SIZE_EXT = VK_MAX_GLOBAL_PRIORITY_SIZE;

	public const c_uint VK_EXT_image_view_min_lod = 1;

	public const c_uint VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION = 1;

	public const c_char* VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME = "VK_EXT_image_view_min_lod";

	public const c_uint VK_EXT_multi_draw = 1;

	public const c_uint VK_EXT_MULTI_DRAW_SPEC_VERSION = 1;

	public const c_char* VK_EXT_MULTI_DRAW_EXTENSION_NAME = "VK_EXT_multi_draw";

	public const c_uint VK_EXT_image_2d_view_of_3d = 1;

	public const c_uint VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION = 1;

	public const c_char* VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_2d_view_of_3d";

	public const c_uint VK_EXT_shader_tile_image = 1;

	public const c_uint VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME = "VK_EXT_shader_tile_image";

	public const c_uint VK_EXT_opacity_micromap = 1;

	public const c_uint VK_EXT_OPACITY_MICROMAP_SPEC_VERSION = 2;

	public const c_char* VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME = "VK_EXT_opacity_micromap";

	public const c_uint VK_EXT_load_store_op_none = 1;

	public const c_uint VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_EXT_load_store_op_none";

	public const c_uint VK_HUAWEI_cluster_culling_shader = 1;

	public const c_uint VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION = 3;

	public const c_char* VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME = "VK_HUAWEI_cluster_culling_shader";

	public const c_uint VK_EXT_border_color_swizzle = 1;

	public const c_uint VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME = "VK_EXT_border_color_swizzle";

	public const c_uint VK_EXT_pageable_device_local_memory = 1;

	public const c_uint VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME = "VK_EXT_pageable_device_local_memory";

	public const c_uint VK_ARM_shader_core_properties = 1;

	public const c_uint VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION = 1;

	public const c_char* VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_ARM_shader_core_properties";

	public const c_uint VK_ARM_scheduling_controls = 1;

	public const c_uint VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION = 1;

	public const c_char* VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME = "VK_ARM_scheduling_controls";

	public const c_uint VK_EXT_image_sliced_view_of_3d = 1;

	public const c_uint VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION = 1;

	public const c_char* VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_sliced_view_of_3d";

	public const c_uint VK_REMAINING_3D_SLICES_EXT = (~0);

	public const c_uint VK_VALVE_descriptor_set_host_mapping = 1;

	public const c_uint VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION = 1;

	public const c_char* VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME = "VK_VALVE_descriptor_set_host_mapping";

	public const c_uint VK_EXT_depth_clamp_zero_one = 1;

	public const c_uint VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME = "VK_EXT_depth_clamp_zero_one";

	public const c_uint VK_EXT_non_seamless_cube_map = 1;

	public const c_uint VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION = 1;

	public const c_char* VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME = "VK_EXT_non_seamless_cube_map";

	public const c_uint VK_ARM_render_pass_striped = 1;

	public const c_uint VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION = 1;

	public const c_char* VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME = "VK_ARM_render_pass_striped";

	public const c_uint VK_QCOM_fragment_density_map_offset = 1;

	public const c_uint VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION = 2;

	public const c_char* VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME = "VK_QCOM_fragment_density_map_offset";

	public const c_uint VK_NV_copy_memory_indirect = 1;

	public const c_uint VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION = 1;

	public const c_char* VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME = "VK_NV_copy_memory_indirect";

	public const c_uint VK_NV_memory_decompression = 1;

	public const c_uint VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION = 1;

	public const c_char* VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME = "VK_NV_memory_decompression";

	public const c_uint VK_NV_device_generated_commands_compute = 1;

	public const c_uint VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION = 2;

	public const c_char* VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME = "VK_NV_device_generated_commands_compute";

	public const c_uint VK_NV_linear_color_attachment = 1;

	public const c_uint VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION = 1;

	public const c_char* VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME = "VK_NV_linear_color_attachment";

	public const c_uint VK_GOOGLE_surfaceless_query = 1;

	public const c_uint VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION = 2;

	public const c_char* VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME = "VK_GOOGLE_surfaceless_query";

	public const c_uint VK_EXT_image_compression_control_swapchain = 1;

	public const c_uint VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION = 1;

	public const c_char* VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME = "VK_EXT_image_compression_control_swapchain";

	public const c_uint VK_QCOM_image_processing = 1;

	public const c_uint VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION = 1;

	public const c_char* VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME = "VK_QCOM_image_processing";

	public const c_uint VK_EXT_nested_command_buffer = 1;

	public const c_uint VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION = 1;

	public const c_char* VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME = "VK_EXT_nested_command_buffer";

	public const c_uint VK_EXT_external_memory_acquire_unmodified = 1;

	public const c_uint VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION = 1;

	public const c_char* VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME = "VK_EXT_external_memory_acquire_unmodified";

	public const c_uint VK_EXT_extended_dynamic_state3 = 1;

	public const c_uint VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION = 2;

	public const c_char* VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME = "VK_EXT_extended_dynamic_state3";

	public const c_uint VK_EXT_subpass_merge_feedback = 1;

	public const c_uint VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION = 2;

	public const c_char* VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME = "VK_EXT_subpass_merge_feedback";

	public const c_uint VK_LUNARG_direct_driver_loading = 1;

	public const c_uint VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION = 1;

	public const c_char* VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME = "VK_LUNARG_direct_driver_loading";

	public const c_uint VK_EXT_shader_module_identifier = 1;

	public const c_uint VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT = 32;

	public const c_uint VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME = "VK_EXT_shader_module_identifier";

	public const c_uint VK_EXT_rasterization_order_attachment_access = 1;

	public const c_uint VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_EXT_rasterization_order_attachment_access";

	public const c_uint VK_NV_optical_flow = 1;

	public const c_uint VK_NV_OPTICAL_FLOW_SPEC_VERSION = 1;

	public const c_char* VK_NV_OPTICAL_FLOW_EXTENSION_NAME = "VK_NV_optical_flow";

	public const c_uint VK_EXT_legacy_dithering = 1;

	public const c_uint VK_EXT_LEGACY_DITHERING_SPEC_VERSION = 2;

	public const c_char* VK_EXT_LEGACY_DITHERING_EXTENSION_NAME = "VK_EXT_legacy_dithering";

	public const c_uint VK_EXT_pipeline_protected_access = 1;

	public const c_uint VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME = "VK_EXT_pipeline_protected_access";

	public const c_uint VK_AMD_anti_lag = 1;

	public const c_uint VK_AMD_ANTI_LAG_SPEC_VERSION = 1;

	public const c_char* VK_AMD_ANTI_LAG_EXTENSION_NAME = "VK_AMD_anti_lag";

	public const c_uint VK_EXT_shader_object = 1;

	public const c_uint VK_EXT_SHADER_OBJECT_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_OBJECT_EXTENSION_NAME = "VK_EXT_shader_object";

	public const c_uint VK_QCOM_tile_properties = 1;

	public const c_uint VK_QCOM_TILE_PROPERTIES_SPEC_VERSION = 1;

	public const c_char* VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME = "VK_QCOM_tile_properties";

	public const c_uint VK_SEC_amigo_profiling = 1;

	public const c_uint VK_SEC_AMIGO_PROFILING_SPEC_VERSION = 1;

	public const c_char* VK_SEC_AMIGO_PROFILING_EXTENSION_NAME = "VK_SEC_amigo_profiling";

	public const c_uint VK_QCOM_multiview_per_view_viewports = 1;

	public const c_uint VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION = 1;

	public const c_char* VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_viewports";

	public const c_uint VK_NV_ray_tracing_invocation_reorder = 1;

	public const c_uint VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION = 1;

	public const c_char* VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME = "VK_NV_ray_tracing_invocation_reorder";

	public const c_uint VK_NV_extended_sparse_address_space = 1;

	public const c_uint VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION = 1;

	public const c_char* VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME = "VK_NV_extended_sparse_address_space";

	public const c_uint VK_EXT_mutable_descriptor_type = 1;

	public const c_uint VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_EXT_mutable_descriptor_type";

	public const c_uint VK_EXT_legacy_vertex_attributes = 1;

	public const c_uint VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION = 1;

	public const c_char* VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME = "VK_EXT_legacy_vertex_attributes";

	public const c_uint VK_EXT_layer_settings = 1;

	public const c_uint VK_EXT_LAYER_SETTINGS_SPEC_VERSION = 2;

	public const c_char* VK_EXT_LAYER_SETTINGS_EXTENSION_NAME = "VK_EXT_layer_settings";

	public const c_uint VK_ARM_shader_core_builtins = 1;

	public const c_uint VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION = 2;

	public const c_char* VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME = "VK_ARM_shader_core_builtins";

	public const c_uint VK_EXT_pipeline_library_group_handles = 1;

	public const c_uint VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION = 1;

	public const c_char* VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME = "VK_EXT_pipeline_library_group_handles";

	public const c_uint VK_EXT_dynamic_rendering_unused_attachments = 1;

	public const c_uint VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME = "VK_EXT_dynamic_rendering_unused_attachments";

	public const c_uint VK_NV_low_latency2 = 1;

	public const c_uint VK_NV_LOW_LATENCY_2_SPEC_VERSION = 2;

	public const c_char* VK_NV_LOW_LATENCY_2_EXTENSION_NAME = "VK_NV_low_latency2";

	public const c_uint VK_QCOM_multiview_per_view_render_areas = 1;

	public const c_uint VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION = 1;

	public const c_char* VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_render_areas";

	public const c_uint VK_NV_per_stage_descriptor_set = 1;

	public const c_uint VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION = 1;

	public const c_char* VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME = "VK_NV_per_stage_descriptor_set";

	public const c_uint VK_QCOM_image_processing2 = 1;

	public const c_uint VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION = 1;

	public const c_char* VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME = "VK_QCOM_image_processing2";

	public const c_uint VK_QCOM_filter_cubic_weights = 1;

	public const c_uint VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION = 1;

	public const c_char* VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME = "VK_QCOM_filter_cubic_weights";

	public const c_uint VK_QCOM_ycbcr_degamma = 1;

	public const c_uint VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION = 1;

	public const c_char* VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME = "VK_QCOM_ycbcr_degamma";

	public const c_uint VK_QCOM_filter_cubic_clamp = 1;

	public const c_uint VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION = 1;

	public const c_char* VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME = "VK_QCOM_filter_cubic_clamp";

	public const c_uint VK_EXT_attachment_feedback_loop_dynamic_state = 1;

	public const c_uint VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION = 1;

	public const c_char* VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_dynamic_state";

	public const c_uint VK_MSFT_layered_driver = 1;

	public const c_uint VK_MSFT_LAYERED_DRIVER_SPEC_VERSION = 1;

	public const c_char* VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME = "VK_MSFT_layered_driver";

	public const c_uint VK_NV_descriptor_pool_overallocation = 1;

	public const c_uint VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION = 1;

	public const c_char* VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME = "VK_NV_descriptor_pool_overallocation";

	public const c_uint VK_NV_display_stereo = 1;

	public const c_uint VK_NV_DISPLAY_STEREO_SPEC_VERSION = 1;

	public const c_char* VK_NV_DISPLAY_STEREO_EXTENSION_NAME = "VK_NV_display_stereo";

	public const c_uint VK_NV_raw_access_chains = 1;

	public const c_uint VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION = 1;

	public const c_char* VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME = "VK_NV_raw_access_chains";

	public const c_uint VK_NV_command_buffer_inheritance = 1;

	public const c_uint VK_NV_COMMAND_BUFFER_INHERITANCE_SPEC_VERSION = 1;

	public const c_char* VK_NV_COMMAND_BUFFER_INHERITANCE_EXTENSION_NAME = "VK_NV_command_buffer_inheritance";

	public const c_uint VK_NV_shader_atomic_float16_vector = 1;

	public const c_uint VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION = 1;

	public const c_char* VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME = "VK_NV_shader_atomic_float16_vector";

	public const c_uint VK_EXT_shader_replicated_composites = 1;

	public const c_uint VK_EXT_SHADER_REPLICATED_COMPOSITES_SPEC_VERSION = 1;

	public const c_char* VK_EXT_SHADER_REPLICATED_COMPOSITES_EXTENSION_NAME = "VK_EXT_shader_replicated_composites";

	public const c_uint VK_NV_ray_tracing_validation = 1;

	public const c_uint VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION = 1;

	public const c_char* VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME = "VK_NV_ray_tracing_validation";

	public const c_uint VK_EXT_device_generated_commands = 1;

	public const c_uint VK_EXT_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_EXT_device_generated_commands";

	public const c_uint VK_MESA_image_alignment_control = 1;

	public const c_uint VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION = 1;

	public const c_char* VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME = "VK_MESA_image_alignment_control";

	public const c_uint VK_EXT_depth_clamp_control = 1;

	public const c_uint VK_EXT_DEPTH_CLAMP_CONTROL_SPEC_VERSION = 1;

	public const c_char* VK_EXT_DEPTH_CLAMP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clamp_control";

	public const c_uint VK_HUAWEI_hdr_vivid = 1;

	public const c_uint VK_HUAWEI_HDR_VIVID_SPEC_VERSION = 1;

	public const c_char* VK_HUAWEI_HDR_VIVID_EXTENSION_NAME = "VK_HUAWEI_hdr_vivid";

	public const c_uint VK_NV_cooperative_matrix2 = 1;

	public const c_uint VK_NV_COOPERATIVE_MATRIX_2_SPEC_VERSION = 1;

	public const c_char* VK_NV_COOPERATIVE_MATRIX_2_EXTENSION_NAME = "VK_NV_cooperative_matrix2";

	public const c_uint VK_EXT_vertex_attribute_robustness = 1;

	public const c_uint VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_SPEC_VERSION = 1;

	public const c_char* VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_vertex_attribute_robustness";

	public const c_uint VK_KHR_acceleration_structure = 1;

	public const c_uint VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION = 13;

	public const c_char* VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = "VK_KHR_acceleration_structure";

	public const c_uint VK_KHR_ray_tracing_pipeline = 1;

	public const c_uint VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION = 1;

	public const c_char* VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = "VK_KHR_ray_tracing_pipeline";

	public const c_uint VK_KHR_ray_query = 1;

	public const c_uint VK_KHR_RAY_QUERY_SPEC_VERSION = 1;

	public const c_char* VK_KHR_RAY_QUERY_EXTENSION_NAME = "VK_KHR_ray_query";

	public const c_uint VK_EXT_mesh_shader = 1;

	public const c_uint VK_EXT_MESH_SHADER_SPEC_VERSION = 1;

	public const c_char* VK_EXT_MESH_SHADER_EXTENSION_NAME = "VK_EXT_mesh_shader";

	public typealias VkDeviceAddress = uint64;

	public typealias VkDeviceSize = uint64;

	public typealias VkFlags = uint32;

	public typealias VkSampleMask = uint32;

	public struct VkBuffer_T;
	public typealias VkBuffer = VkBuffer_T*;

	public struct VkImage_T;
	public typealias VkImage = VkImage_T*;

	public struct VkInstance_T;
	public typealias VkInstance = VkInstance_T*;

	public struct VkPhysicalDevice_T;
	public typealias VkPhysicalDevice = VkPhysicalDevice_T*;

	public struct VkDevice_T;
	public typealias VkDevice = VkDevice_T*;

	public struct VkQueue_T;
	public typealias VkQueue = VkQueue_T*;

	public struct VkSemaphore_T;
	public typealias VkSemaphore = VkSemaphore_T*;

	public struct VkCommandBuffer_T;
	public typealias VkCommandBuffer = VkCommandBuffer_T*;

	public struct VkFence_T;
	public typealias VkFence = VkFence_T*;

	public struct VkDeviceMemory_T;
	public typealias VkDeviceMemory = VkDeviceMemory_T*;

	public struct VkEvent_T;
	public typealias VkEvent = VkEvent_T*;

	public struct VkQueryPool_T;
	public typealias VkQueryPool = VkQueryPool_T*;

	public struct VkBufferView_T;
	public typealias VkBufferView = VkBufferView_T*;

	public struct VkImageView_T;
	public typealias VkImageView = VkImageView_T*;

	public struct VkShaderModule_T;
	public typealias VkShaderModule = VkShaderModule_T*;

	public struct VkPipelineCache_T;
	public typealias VkPipelineCache = VkPipelineCache_T*;

	public struct VkPipelineLayout_T;
	public typealias VkPipelineLayout = VkPipelineLayout_T*;

	public struct VkPipeline_T;
	public typealias VkPipeline = VkPipeline_T*;

	public struct VkRenderPass_T;
	public typealias VkRenderPass = VkRenderPass_T*;

	public struct VkDescriptorSetLayout_T;
	public typealias VkDescriptorSetLayout = VkDescriptorSetLayout_T*;

	public struct VkSampler_T;
	public typealias VkSampler = VkSampler_T*;

	public struct VkDescriptorSet_T;
	public typealias VkDescriptorSet = VkDescriptorSet_T*;

	public struct VkDescriptorPool_T;
	public typealias VkDescriptorPool = VkDescriptorPool_T*;

	public struct VkFramebuffer_T;
	public typealias VkFramebuffer = VkFramebuffer_T*;

	public struct VkCommandPool_T;
	public typealias VkCommandPool = VkCommandPool_T*;

	[CRepr, AllowDuplicates]
	public enum VkResult : c_int
	{
		VK_SUCCESS = 0,
		VK_NOT_READY = 1,
		VK_TIMEOUT = 2,
		VK_EVENT_SET = 3,
		VK_EVENT_RESET = 4,
		VK_INCOMPLETE = 5,
		VK_ERROR_OUT_OF_HOST_MEMORY = -1,
		VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
		VK_ERROR_INITIALIZATION_FAILED = -3,
		VK_ERROR_DEVICE_LOST = -4,
		VK_ERROR_MEMORY_MAP_FAILED = -5,
		VK_ERROR_LAYER_NOT_PRESENT = -6,
		VK_ERROR_EXTENSION_NOT_PRESENT = -7,
		VK_ERROR_FEATURE_NOT_PRESENT = -8,
		VK_ERROR_INCOMPATIBLE_DRIVER = -9,
		VK_ERROR_TOO_MANY_OBJECTS = -10,
		VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
		VK_ERROR_FRAGMENTED_POOL = -12,
		VK_ERROR_UNKNOWN = -13,
		VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
		VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
		VK_ERROR_FRAGMENTATION = -1000161000,
		VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
		VK_PIPELINE_COMPILE_REQUIRED = 1000297000,
		VK_ERROR_NOT_PERMITTED = -1000174001,
		VK_ERROR_SURFACE_LOST_KHR = -1000000000,
		VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
		VK_SUBOPTIMAL_KHR = 1000001003,
		VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
		VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
		VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
		VK_ERROR_INVALID_SHADER_NV = -1000012000,
		VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = -1000023000,
		VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = -1000023001,
		VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = -1000023002,
		VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = -1000023003,
		VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = -1000023004,
		VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = -1000023005,
		VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
		VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
		VK_THREAD_IDLE_KHR = 1000268000,
		VK_THREAD_DONE_KHR = 1000268001,
		VK_OPERATION_DEFERRED_KHR = 1000268002,
		VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
		VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = -1000299000,
		VK_ERROR_COMPRESSION_EXHAUSTED_EXT = -1000338000,
		VK_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000,
		VK_PIPELINE_BINARY_MISSING_KHR = 1000483000,
		VK_ERROR_NOT_ENOUGH_SPACE_KHR = -1000483000,
		VK_ERROR_OUT_OF_POOL_MEMORY_KHR = -1000069000,
		VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = -1000072003,
		VK_ERROR_FRAGMENTATION_EXT = -1000161000,
		VK_ERROR_NOT_PERMITTED_EXT = -1000174001,
		VK_ERROR_NOT_PERMITTED_KHR = -1000174001,
		VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000257000,
		VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = -1000257000,
		VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000,
		VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000,
		VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000,
		VK_RESULT_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkStructureType : c_int
	{
		VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
		VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
		VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
		VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
		VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
		VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
		VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
		VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
		VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
		VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
		VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
		VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
		VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
		VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
		VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
		VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
		VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
		VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
		VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
		VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
		VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
		VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
		VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
		VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
		VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
		VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
		VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
		VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
		VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
		VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
		VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
		VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
		VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
		VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
		VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
		VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
		VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
		VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
		VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
		VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
		VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
		VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
		VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
		VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
		VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
		VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
		VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
		VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
		VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
		VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
		VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
		VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
		VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
		VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
		VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
		VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
		VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
		VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
		VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
		VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
		VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
		VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
		VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
		VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
		VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
		VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
		VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
		VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
		VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
		VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
		VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
		VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
		VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
		VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
		VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
		VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
		VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
		VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
		VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
		VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
		VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
		VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
		VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
		VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
		VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
		VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
		VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
		VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
		VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
		VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
		VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
		VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
		VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
		VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
		VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
		VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
		VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
		VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
		VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
		VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
		VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
		VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
		VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
		VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54,
		VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000,
		VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001,
		VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000,
		VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000,
		VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001,
		VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002,
		VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003,
		VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004,
		VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005,
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000,
		VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000,
		VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001,
		VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002,
		VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003,
		VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004,
		VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005,
		VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006,
		VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007,
		VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008,
		VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009,
		VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000,
		VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001,
		VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002,
		VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000,
		VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000,
		VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001,
		VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003,
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001,
		VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001,
		VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002,
		VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES = 55,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES = 56,
		VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO = 1000174000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES = 1000388000,
		VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES = 1000388001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES = 1000416000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES = 1000528000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES = 1000544000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES = 1000259000,
		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO = 1000259001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES = 1000259002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES = 1000525000,
		VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO = 1000190001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES = 1000190002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES = 1000265000,
		VK_STRUCTURE_TYPE_MEMORY_MAP_INFO = 1000271000,
		VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO = 1000271001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES = 1000470000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES = 1000470001,
		VK_STRUCTURE_TYPE_RENDERING_AREA_INFO = 1000470003,
		VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO = 1000470004,
		VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2 = 1000338002,
		VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2 = 1000338003,
		VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO = 1000470005,
		VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO = 1000470006,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES = 1000080000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES = 1000232000,
		VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO = 1000232001,
		VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO = 1000232002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES = 1000545000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES = 1000545001,
		VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS = 1000545002,
		VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO = 1000545003,
		VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO = 1000545004,
		VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO = 1000545005,
		VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO = 1000545006,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES = 1000466000,
		VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO = 1000068000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES = 1000068001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES = 1000068002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES = 1000270000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES = 1000270001,
		VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY = 1000270002,
		VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY = 1000270003,
		VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO = 1000270004,
		VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO = 1000270005,
		VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO = 1000270006,
		VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO = 1000270007,
		VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE = 1000270008,
		VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY = 1000270009,
		VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
		VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
		VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
		VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
		VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
		VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
		VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
		VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
		VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
		VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
		VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
		VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
		VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
		VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
		VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
		VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
		VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
		VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1000023000,
		VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001,
		VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002,
		VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003,
		VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004,
		VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005,
		VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006,
		VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007,
		VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008,
		VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009,
		VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010,
		VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011,
		VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012,
		VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1000023013,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014,
		VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015,
		VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1000024001,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = 1000024002,
		VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
		VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
		VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
		VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000,
		VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001,
		VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002,
		VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX = 1000029004,
		VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
		VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR = 1000038000,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000038001,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000038002,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR = 1000038003,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR = 1000038004,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR = 1000038005,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR = 1000038006,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR = 1000038007,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR = 1000038008,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR = 1000038009,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR = 1000038010,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR = 1000038011,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR = 1000038012,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000038013,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR = 1000039000,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000039001,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000039002,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR = 1000039003,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR = 1000039004,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR = 1000039005,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR = 1000039006,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR = 1000039007,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR = 1000039009,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR = 1000039010,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR = 1000039011,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR = 1000039012,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR = 1000039013,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000039014,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = 1000040000,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = 1000040001,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = 1000040003,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000040004,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000040005,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = 1000040006,
		VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
		VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
		VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
		VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
		VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
		VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
		VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
		VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
		VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
		VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
		VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
		VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
		VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
		VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
		VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
		VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
		VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
		VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
		VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
		VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
		VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
		VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
		VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
		VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
		VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
		VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
		VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
		VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
		VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
		VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
		VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
		VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
		VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
		VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009,
		VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
		VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
		VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG = 1000110000,
		VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
		VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
		VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
		VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
		VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
		VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
		VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
		VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
		VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
		VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
		VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
		VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
		VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
		VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
		VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
		VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
		VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
		VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
		VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
		VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
		VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
		VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
		VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
		VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
		VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
		VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
		VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
		VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
		VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
		VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
		VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
		VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006,
		VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008,
		VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
		VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
		VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
		VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
		VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
		VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
		VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009,
		VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
		VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
		VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001,
		VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
		VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
		VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013,
		VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
		VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
		VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
		VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
		VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
		VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006,
		VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
		VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
		VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
		VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
		VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
		VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
		VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
		VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
		VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
		VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
		VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
		VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
		VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
		VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
		VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
		VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = 1000187000,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000187001,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000187002,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = 1000187003,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = 1000187004,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = 1000187005,
		VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
		VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
		VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
		VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
		VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
		VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008,
		VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
		VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
		VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
		VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
		VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
		VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
		VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
		VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
		VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
		VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
		VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
		VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
		VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007,
		VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
		VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
		VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR = 1000235000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
		VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
		VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
		VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
		VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
		VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
		VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
		VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000,
		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002,
		VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
		VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
		VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
		VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
		VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
		VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
		VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
		VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
		VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT = 1000272000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT = 1000272001,
		VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT = 1000272002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000,
		VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = 1000274000,
		VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = 1000274001,
		VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = 1000274002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = 1000275000,
		VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = 1000275001,
		VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = 1000275002,
		VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = 1000275003,
		VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = 1000275004,
		VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = 1000275005,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
		VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
		VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
		VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
		VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
		VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
		VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000,
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
		VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = 1000283000,
		VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = 1000283001,
		VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = 1000283002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
		VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
		VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
		VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
		VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1000292000,
		VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1000292001,
		VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1000292002,
		VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = 1000299003,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = 1000299004,
		VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = 1000299005,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299006,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = 1000299007,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299008,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = 1000299009,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000299010,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
		VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
		VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV = 1000307000,
		VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV = 1000307001,
		VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV = 1000307002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV = 1000307003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV = 1000307004,
		VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = 1000310000,
		VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1000311000,
		VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = 1000311001,
		VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = 1000311002,
		VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1000311003,
		VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = 1000311004,
		VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = 1000311005,
		VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = 1000311006,
		VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = 1000311007,
		VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = 1000311008,
		VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = 1000311009,
		VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311010,
		VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311011,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1000316000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1000316001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1000316002,
		VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = 1000316003,
		VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = 1000316004,
		VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316005,
		VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316006,
		VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316007,
		VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316008,
		VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1000316010,
		VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1000316011,
		VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1000316012,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316009,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001,
		VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = 1000321000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1000203000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1000322000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
		VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1000328000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1000328001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
		VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1000338000,
		VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = 1000338001,
		VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = 1000338004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1000339000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1000341000,
		VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = 1000341001,
		VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = 1000341002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000,
		VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000,
		VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001,
		VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1000354000,
		VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1000354001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000,
		VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT = 1000361000,
		VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000,
		VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001,
		VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002,
		VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000,
		VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001,
		VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000,
		VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001,
		VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002,
		VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003,
		VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004,
		VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005,
		VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006,
		VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007,
		VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008,
		VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009,
		VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000,
		VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001,
		VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1000372000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1000372001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT = 1000375000,
		VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT = 1000375001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = 1000376000,
		VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1000376001,
		VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1000376002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000,
		VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000,
		VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1000386000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000,
		VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = 1000395000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = 1000395001,
		VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1000396000,
		VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1000396001,
		VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1000396002,
		VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003,
		VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006,
		VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1000396007,
		VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008,
		VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = 1000404000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = 1000404001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI = 1000404002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000,
		VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = 1000415000,
		VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM = 1000417000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM = 1000417001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM = 1000417002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = 1000418000,
		VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = 1000418001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = 1000421000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1000422000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM = 1000424000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM = 1000424001,
		VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM = 1000424002,
		VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM = 1000424003,
		VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM = 1000424004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001,
		VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1000427000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1000427001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = 1000428000,
		VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = 1000428001,
		VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = 1000428002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR = 1000434000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1000437000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1000440000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1000440001,
		VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1000440002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT = 1000451000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT = 1000451001,
		VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = 1000453000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1000458000,
		VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = 1000458001,
		VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000458002,
		VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1000458003,
		VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = 1000459000,
		VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = 1000459001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1000462000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1000462001,
		VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1000462002,
		VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = 1000462003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = 1000342000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001,
		VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002,
		VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003,
		VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004,
		VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005,
		VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1000465000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID = 1000468000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468001,
		VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD = 1000476000,
		VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD = 1000476001,
		VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD = 1000476002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = 1000481000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = 1000482000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = 1000482001,
		VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = 1000482002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR = 1000483000,
		VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR = 1000483001,
		VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR = 1000483002,
		VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR = 1000483003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR = 1000483004,
		VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR = 1000483005,
		VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR = 1000483006,
		VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR = 1000483007,
		VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR = 1000483008,
		VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR = 1000483009,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1000484000,
		VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = 1000484001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1000485000,
		VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = 1000485001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = 1000488000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1000490000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1000490001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV = 1000492000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV = 1000492001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1000351000,
		VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1000351002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT = 1000495000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT = 1000495001,
		VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT = 1000496000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1000497000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1000497001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = 1000498000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = 1000499000,
		VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV = 1000505000,
		VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV = 1000505001,
		VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV = 1000505002,
		VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV = 1000505003,
		VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV = 1000505004,
		VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV = 1000505005,
		VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV = 1000505006,
		VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV = 1000505007,
		VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV = 1000505008,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = 1000506000,
		VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = 1000510000,
		VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = 1000510001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR = 1000201000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR = 1000511000,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR = 1000512000,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR = 1000512001,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR = 1000512003,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000512004,
		VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR = 1000512005,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR = 1000513000,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000513001,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR = 1000513002,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR = 1000513003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR = 1000513004,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR = 1000513005,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR = 1000513006,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR = 1000513007,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR = 1000513008,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR = 1000513009,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR = 1000513010,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR = 1000515000,
		VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR = 1000515001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV = 1000516000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM = 1000518000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM = 1000518001,
		VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM = 1000518002,
		VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM = 1000519000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM = 1000519001,
		VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM = 1000519002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM = 1000520000,
		VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM = 1000520001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM = 1000521000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = 1000524000,
		VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = 1000529000,
		VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = 1000529001,
		VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = 1000529002,
		VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = 1000529003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = 1000529004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT = 1000530000,
		VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR = 1000184000,
		VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT = 1000545007,
		VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT = 1000545008,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV = 1000546000,
		VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV = 1000551000,
		VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV = 1000551001,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553000,
		VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR = 1000553001,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR = 1000553002,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000553005,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR = 1000553009,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553003,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553004,
		VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR = 1000553006,
		VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR = 1000553007,
		VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR = 1000553008,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV = 1000555000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR = 1000558000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV = 1000559000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR = 1000562000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR = 1000562001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR = 1000562002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR = 1000562003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR = 1000562004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV = 1000563000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT = 1000564000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV = 1000568000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT = 1000572000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT = 1000572001,
		VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT = 1000572002,
		VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT = 1000572003,
		VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT = 1000572004,
		VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT = 1000572006,
		VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT = 1000572007,
		VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT = 1000572008,
		VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT = 1000572009,
		VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT = 1000572010,
		VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT = 1000572011,
		VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT = 1000572012,
		VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT = 1000572013,
		VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT = 1000572014,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA = 1000575000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA = 1000575001,
		VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA = 1000575002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT = 1000582000,
		VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT = 1000582001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI = 1000590000,
		VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI = 1000590001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV = 1000593000,
		VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV = 1000593001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV = 1000593002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT = 1000608000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000,
		VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000,
		VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = 1000044000,
		VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = 1000044001,
		VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = 1000044002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = 1000044003,
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = 1000044004,
		VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001,
		VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 1000059002,
		VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004,
		VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006,
		VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008,
		VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006,
		VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013,
		VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000,
		VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = 1000068000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = 1000068001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = 1000068002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000,
		VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000,
		VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002,
		VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004,
		VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000,
		VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001,
		VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000,
		VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001,
		VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000,
		VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000,
		VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = 1000090000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000,
		VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001,
		VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002,
		VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003,
		VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000,
		VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001,
		VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002,
		VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003,
		VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004,
		VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005,
		VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000,
		VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001,
		VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000,
		VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001,
		VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002,
		VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = 1000120000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000,
		VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000,
		VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000,
		VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001,
		VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002,
		VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003,
		VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000,
		VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001,
		VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002,
		VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = 1000146003,
		VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004,
		VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000,
		VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = 1000044008,
		VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000,
		VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001,
		VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002,
		VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004,
		VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005,
		VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = 1000157000,
		VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = 1000157001,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = 1000168000,
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001,
		VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = 1000175000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000,
		VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
		VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000,
		VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001,
		VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
		VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000,
		VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = 1000207000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = 1000207001,
		VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = 1000207002,
		VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = 1000207003,
		VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = 1000207004,
		VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = 1000207005,
		VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000,
		VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR = 1000232000,
		VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR = 1000232001,
		VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR = 1000232002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = 1000241000,
		VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = 1000241001,
		VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = 1000241002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000,
		VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000,
		VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = 1000257000,
		VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = 1000244001,
		VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = 1000257002,
		VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = 1000257003,
		VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = 1000257004,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = 1000270000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = 1000270001,
		VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = 1000270002,
		VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = 1000270003,
		VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = 1000270004,
		VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = 1000270005,
		VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = 1000270006,
		VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = 1000270007,
		VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = 1000270008,
		VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = 1000270009,
		VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = 1000271000,
		VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = 1000271001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = 1000280000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = 1000280001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000,
		VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001,
		VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000,
		VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 1000314000,
		VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1000314001,
		VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 1000314002,
		VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 1000314003,
		VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 1000314004,
		VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 1000314005,
		VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000,
		VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000,
		VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001,
		VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002,
		VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003,
		VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004,
		VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005,
		VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006,
		VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007,
		VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008,
		VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009,
		VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010,
		VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = 1000338002,
		VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = 1000338003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = 1000342000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000,
		VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002,
		VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = 1000360000,
		VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = 1000269001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = 1000388000,
		VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = 1000388001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = 1000413000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = 1000413001,
		VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = 1000413002,
		VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = 1000413003,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR = 1000416000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = 1000466000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = 1000470000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = 1000470001,
		VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = 1000470003,
		VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = 1000470004,
		VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = 1000338002,
		VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = 1000338003,
		VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = 1000470005,
		VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = 1000470006,
		VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR = 1000525000,
		VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR = 1000190001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR = 1000190002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR = 1000528000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR = 1000265000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR = 1000259000,
		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR = 1000259001,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR = 1000259002,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR = 1000544000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR = 1000545000,
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR = 1000545001,
		VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR = 1000545002,
		VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR = 1000545003,
		VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR = 1000545004,
		VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR = 1000545005,
		VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR = 1000545006,
		VK_STRUCTURE_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPipelineCacheHeaderVersion : c_int
	{
		VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
		VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkImageLayout : c_int
	{
		VK_IMAGE_LAYOUT_UNDEFINED = 0,
		VK_IMAGE_LAYOUT_GENERAL = 1,
		VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
		VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
		VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
		VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
		VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
		VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
		VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
		VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
		VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
		VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
		VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
		VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
		VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
		VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000,
		VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001,
		VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ = 1000232000,
		VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
		VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000,
		VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001,
		VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002,
		VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
		VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
		VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003,
		VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000,
		VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001,
		VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002,
		VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000,
		VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR = 1000553000,
		VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000,
		VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001,
		VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
		VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR = 1000232000,
		VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = 1000241000,
		VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = 1000241001,
		VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000241002,
		VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000241003,
		VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 1000314000,
		VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1000314001,
		VK_IMAGE_LAYOUT_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkObjectType : c_int
	{
		VK_OBJECT_TYPE_UNKNOWN = 0,
		VK_OBJECT_TYPE_INSTANCE = 1,
		VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
		VK_OBJECT_TYPE_DEVICE = 3,
		VK_OBJECT_TYPE_QUEUE = 4,
		VK_OBJECT_TYPE_SEMAPHORE = 5,
		VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
		VK_OBJECT_TYPE_FENCE = 7,
		VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
		VK_OBJECT_TYPE_BUFFER = 9,
		VK_OBJECT_TYPE_IMAGE = 10,
		VK_OBJECT_TYPE_EVENT = 11,
		VK_OBJECT_TYPE_QUERY_POOL = 12,
		VK_OBJECT_TYPE_BUFFER_VIEW = 13,
		VK_OBJECT_TYPE_IMAGE_VIEW = 14,
		VK_OBJECT_TYPE_SHADER_MODULE = 15,
		VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
		VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
		VK_OBJECT_TYPE_RENDER_PASS = 18,
		VK_OBJECT_TYPE_PIPELINE = 19,
		VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
		VK_OBJECT_TYPE_SAMPLER = 21,
		VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
		VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
		VK_OBJECT_TYPE_FRAMEBUFFER = 24,
		VK_OBJECT_TYPE_COMMAND_POOL = 25,
		VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
		VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
		VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000,
		VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
		VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
		VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
		VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
		VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
		VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000,
		VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001,
		VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000,
		VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001,
		VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
		VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
		VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
		VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
		VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
		VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
		VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
		VK_OBJECT_TYPE_CUDA_MODULE_NV = 1000307000,
		VK_OBJECT_TYPE_CUDA_FUNCTION_NV = 1000307001,
		VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000,
		VK_OBJECT_TYPE_MICROMAP_EXT = 1000396000,
		VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1000464000,
		VK_OBJECT_TYPE_SHADER_EXT = 1000482000,
		VK_OBJECT_TYPE_PIPELINE_BINARY_KHR = 1000483000,
		VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_EXT = 1000572000,
		VK_OBJECT_TYPE_INDIRECT_EXECUTION_SET_EXT = 1000572001,
		VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000,
		VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = 1000156000,
		VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000,
		VK_OBJECT_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkVendorId : c_int
	{
		VK_VENDOR_ID_KHRONOS = 65536,
		VK_VENDOR_ID_VIV = 65537,
		VK_VENDOR_ID_VSI = 65538,
		VK_VENDOR_ID_KAZAN = 65539,
		VK_VENDOR_ID_CODEPLAY = 65540,
		VK_VENDOR_ID_MESA = 65541,
		VK_VENDOR_ID_POCL = 65542,
		VK_VENDOR_ID_MOBILEYE = 65543,
		VK_VENDOR_ID_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSystemAllocationScope : c_int
	{
		VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
		VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
		VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
		VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
		VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
		VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkInternalAllocationType : c_int
	{
		VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
		VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkFormat : c_int
	{
		VK_FORMAT_UNDEFINED = 0,
		VK_FORMAT_R4G4_UNORM_PACK8 = 1,
		VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
		VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
		VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
		VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
		VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
		VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
		VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
		VK_FORMAT_R8_UNORM = 9,
		VK_FORMAT_R8_SNORM = 10,
		VK_FORMAT_R8_USCALED = 11,
		VK_FORMAT_R8_SSCALED = 12,
		VK_FORMAT_R8_UINT = 13,
		VK_FORMAT_R8_SINT = 14,
		VK_FORMAT_R8_SRGB = 15,
		VK_FORMAT_R8G8_UNORM = 16,
		VK_FORMAT_R8G8_SNORM = 17,
		VK_FORMAT_R8G8_USCALED = 18,
		VK_FORMAT_R8G8_SSCALED = 19,
		VK_FORMAT_R8G8_UINT = 20,
		VK_FORMAT_R8G8_SINT = 21,
		VK_FORMAT_R8G8_SRGB = 22,
		VK_FORMAT_R8G8B8_UNORM = 23,
		VK_FORMAT_R8G8B8_SNORM = 24,
		VK_FORMAT_R8G8B8_USCALED = 25,
		VK_FORMAT_R8G8B8_SSCALED = 26,
		VK_FORMAT_R8G8B8_UINT = 27,
		VK_FORMAT_R8G8B8_SINT = 28,
		VK_FORMAT_R8G8B8_SRGB = 29,
		VK_FORMAT_B8G8R8_UNORM = 30,
		VK_FORMAT_B8G8R8_SNORM = 31,
		VK_FORMAT_B8G8R8_USCALED = 32,
		VK_FORMAT_B8G8R8_SSCALED = 33,
		VK_FORMAT_B8G8R8_UINT = 34,
		VK_FORMAT_B8G8R8_SINT = 35,
		VK_FORMAT_B8G8R8_SRGB = 36,
		VK_FORMAT_R8G8B8A8_UNORM = 37,
		VK_FORMAT_R8G8B8A8_SNORM = 38,
		VK_FORMAT_R8G8B8A8_USCALED = 39,
		VK_FORMAT_R8G8B8A8_SSCALED = 40,
		VK_FORMAT_R8G8B8A8_UINT = 41,
		VK_FORMAT_R8G8B8A8_SINT = 42,
		VK_FORMAT_R8G8B8A8_SRGB = 43,
		VK_FORMAT_B8G8R8A8_UNORM = 44,
		VK_FORMAT_B8G8R8A8_SNORM = 45,
		VK_FORMAT_B8G8R8A8_USCALED = 46,
		VK_FORMAT_B8G8R8A8_SSCALED = 47,
		VK_FORMAT_B8G8R8A8_UINT = 48,
		VK_FORMAT_B8G8R8A8_SINT = 49,
		VK_FORMAT_B8G8R8A8_SRGB = 50,
		VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
		VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
		VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
		VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
		VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
		VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
		VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
		VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
		VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
		VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
		VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
		VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
		VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
		VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
		VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
		VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
		VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
		VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
		VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
		VK_FORMAT_R16_UNORM = 70,
		VK_FORMAT_R16_SNORM = 71,
		VK_FORMAT_R16_USCALED = 72,
		VK_FORMAT_R16_SSCALED = 73,
		VK_FORMAT_R16_UINT = 74,
		VK_FORMAT_R16_SINT = 75,
		VK_FORMAT_R16_SFLOAT = 76,
		VK_FORMAT_R16G16_UNORM = 77,
		VK_FORMAT_R16G16_SNORM = 78,
		VK_FORMAT_R16G16_USCALED = 79,
		VK_FORMAT_R16G16_SSCALED = 80,
		VK_FORMAT_R16G16_UINT = 81,
		VK_FORMAT_R16G16_SINT = 82,
		VK_FORMAT_R16G16_SFLOAT = 83,
		VK_FORMAT_R16G16B16_UNORM = 84,
		VK_FORMAT_R16G16B16_SNORM = 85,
		VK_FORMAT_R16G16B16_USCALED = 86,
		VK_FORMAT_R16G16B16_SSCALED = 87,
		VK_FORMAT_R16G16B16_UINT = 88,
		VK_FORMAT_R16G16B16_SINT = 89,
		VK_FORMAT_R16G16B16_SFLOAT = 90,
		VK_FORMAT_R16G16B16A16_UNORM = 91,
		VK_FORMAT_R16G16B16A16_SNORM = 92,
		VK_FORMAT_R16G16B16A16_USCALED = 93,
		VK_FORMAT_R16G16B16A16_SSCALED = 94,
		VK_FORMAT_R16G16B16A16_UINT = 95,
		VK_FORMAT_R16G16B16A16_SINT = 96,
		VK_FORMAT_R16G16B16A16_SFLOAT = 97,
		VK_FORMAT_R32_UINT = 98,
		VK_FORMAT_R32_SINT = 99,
		VK_FORMAT_R32_SFLOAT = 100,
		VK_FORMAT_R32G32_UINT = 101,
		VK_FORMAT_R32G32_SINT = 102,
		VK_FORMAT_R32G32_SFLOAT = 103,
		VK_FORMAT_R32G32B32_UINT = 104,
		VK_FORMAT_R32G32B32_SINT = 105,
		VK_FORMAT_R32G32B32_SFLOAT = 106,
		VK_FORMAT_R32G32B32A32_UINT = 107,
		VK_FORMAT_R32G32B32A32_SINT = 108,
		VK_FORMAT_R32G32B32A32_SFLOAT = 109,
		VK_FORMAT_R64_UINT = 110,
		VK_FORMAT_R64_SINT = 111,
		VK_FORMAT_R64_SFLOAT = 112,
		VK_FORMAT_R64G64_UINT = 113,
		VK_FORMAT_R64G64_SINT = 114,
		VK_FORMAT_R64G64_SFLOAT = 115,
		VK_FORMAT_R64G64B64_UINT = 116,
		VK_FORMAT_R64G64B64_SINT = 117,
		VK_FORMAT_R64G64B64_SFLOAT = 118,
		VK_FORMAT_R64G64B64A64_UINT = 119,
		VK_FORMAT_R64G64B64A64_SINT = 120,
		VK_FORMAT_R64G64B64A64_SFLOAT = 121,
		VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
		VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
		VK_FORMAT_D16_UNORM = 124,
		VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
		VK_FORMAT_D32_SFLOAT = 126,
		VK_FORMAT_S8_UINT = 127,
		VK_FORMAT_D16_UNORM_S8_UINT = 128,
		VK_FORMAT_D24_UNORM_S8_UINT = 129,
		VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
		VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
		VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
		VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
		VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
		VK_FORMAT_BC2_UNORM_BLOCK = 135,
		VK_FORMAT_BC2_SRGB_BLOCK = 136,
		VK_FORMAT_BC3_UNORM_BLOCK = 137,
		VK_FORMAT_BC3_SRGB_BLOCK = 138,
		VK_FORMAT_BC4_UNORM_BLOCK = 139,
		VK_FORMAT_BC4_SNORM_BLOCK = 140,
		VK_FORMAT_BC5_UNORM_BLOCK = 141,
		VK_FORMAT_BC5_SNORM_BLOCK = 142,
		VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
		VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
		VK_FORMAT_BC7_UNORM_BLOCK = 145,
		VK_FORMAT_BC7_SRGB_BLOCK = 146,
		VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
		VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
		VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
		VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
		VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
		VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
		VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
		VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
		VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
		VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
		VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
		VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
		VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
		VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
		VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
		VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
		VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
		VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
		VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
		VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
		VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
		VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
		VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
		VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
		VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
		VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
		VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
		VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
		VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
		VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
		VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
		VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
		VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
		VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
		VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
		VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
		VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
		VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
		VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
		VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
		VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
		VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
		VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
		VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
		VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
		VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
		VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
		VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
		VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
		VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
		VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
		VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
		VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
		VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
		VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
		VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
		VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
		VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
		VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
		VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
		VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
		VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
		VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
		VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
		VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
		VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
		VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
		VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
		VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
		VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
		VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
		VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
		VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000,
		VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001,
		VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002,
		VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003,
		VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000,
		VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001,
		VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000,
		VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001,
		VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002,
		VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003,
		VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004,
		VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005,
		VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006,
		VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007,
		VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008,
		VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009,
		VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010,
		VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011,
		VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012,
		VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013,
		VK_FORMAT_A1B5G5R5_UNORM_PACK16 = 1000470000,
		VK_FORMAT_A8_UNORM = 1000470001,
		VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
		VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
		VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
		VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
		VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
		VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
		VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
		VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
		VK_FORMAT_R16G16_SFIXED5_NV = 1000464000,
		VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000,
		VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001,
		VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002,
		VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003,
		VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004,
		VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005,
		VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006,
		VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007,
		VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008,
		VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009,
		VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010,
		VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011,
		VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012,
		VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013,
		VK_FORMAT_G8B8G8R8_422_UNORM_KHR = 1000156000,
		VK_FORMAT_B8G8R8G8_422_UNORM_KHR = 1000156001,
		VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = 1000156002,
		VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = 1000156003,
		VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = 1000156004,
		VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = 1000156005,
		VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = 1000156006,
		VK_FORMAT_R10X6_UNORM_PACK16_KHR = 1000156007,
		VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = 1000156008,
		VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = 1000156009,
		VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = 1000156010,
		VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = 1000156011,
		VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012,
		VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = 1000156013,
		VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014,
		VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = 1000156015,
		VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016,
		VK_FORMAT_R12X4_UNORM_PACK16_KHR = 1000156017,
		VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = 1000156018,
		VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = 1000156019,
		VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = 1000156020,
		VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = 1000156021,
		VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022,
		VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = 1000156023,
		VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024,
		VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = 1000156025,
		VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026,
		VK_FORMAT_G16B16G16R16_422_UNORM_KHR = 1000156027,
		VK_FORMAT_B16G16R16G16_422_UNORM_KHR = 1000156028,
		VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = 1000156029,
		VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = 1000156030,
		VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = 1000156031,
		VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = 1000156032,
		VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = 1000156033,
		VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = 1000330000,
		VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = 1000330001,
		VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = 1000330002,
		VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = 1000330003,
		VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000,
		VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001,
		VK_FORMAT_R16G16_S10_5_NV = 1000464000,
		VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = 1000470000,
		VK_FORMAT_A8_UNORM_KHR = 1000470001,
		VK_FORMAT_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkImageTiling : c_int
	{
		VK_IMAGE_TILING_OPTIMAL = 0,
		VK_IMAGE_TILING_LINEAR = 1,
		VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
		VK_IMAGE_TILING_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkImageType : c_int
	{
		VK_IMAGE_TYPE_1D = 0,
		VK_IMAGE_TYPE_2D = 1,
		VK_IMAGE_TYPE_3D = 2,
		VK_IMAGE_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPhysicalDeviceType : c_int
	{
		VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
		VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
		VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
		VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
		VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
		VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkQueryType : c_int
	{
		VK_QUERY_TYPE_OCCLUSION = 0,
		VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
		VK_QUERY_TYPE_TIMESTAMP = 2,
		VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000,
		VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
		VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
		VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000,
		VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001,
		VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
		VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
		VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = 1000299000,
		VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1000328000,
		VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000,
		VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000,
		VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001,
		VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000,
		VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001,
		VK_QUERY_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSharingMode : c_int
	{
		VK_SHARING_MODE_EXCLUSIVE = 0,
		VK_SHARING_MODE_CONCURRENT = 1,
		VK_SHARING_MODE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkComponentSwizzle : c_int
	{
		VK_COMPONENT_SWIZZLE_IDENTITY = 0,
		VK_COMPONENT_SWIZZLE_ZERO = 1,
		VK_COMPONENT_SWIZZLE_ONE = 2,
		VK_COMPONENT_SWIZZLE_R = 3,
		VK_COMPONENT_SWIZZLE_G = 4,
		VK_COMPONENT_SWIZZLE_B = 5,
		VK_COMPONENT_SWIZZLE_A = 6,
		VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkImageViewType : c_int
	{
		VK_IMAGE_VIEW_TYPE_1D = 0,
		VK_IMAGE_VIEW_TYPE_2D = 1,
		VK_IMAGE_VIEW_TYPE_3D = 2,
		VK_IMAGE_VIEW_TYPE_CUBE = 3,
		VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
		VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
		VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
		VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkBlendFactor : c_int
	{
		VK_BLEND_FACTOR_ZERO = 0,
		VK_BLEND_FACTOR_ONE = 1,
		VK_BLEND_FACTOR_SRC_COLOR = 2,
		VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
		VK_BLEND_FACTOR_DST_COLOR = 4,
		VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
		VK_BLEND_FACTOR_SRC_ALPHA = 6,
		VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
		VK_BLEND_FACTOR_DST_ALPHA = 8,
		VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
		VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
		VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
		VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
		VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
		VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
		VK_BLEND_FACTOR_SRC1_COLOR = 15,
		VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
		VK_BLEND_FACTOR_SRC1_ALPHA = 17,
		VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
		VK_BLEND_FACTOR_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkBlendOp : c_int
	{
		VK_BLEND_OP_ADD = 0,
		VK_BLEND_OP_SUBTRACT = 1,
		VK_BLEND_OP_REVERSE_SUBTRACT = 2,
		VK_BLEND_OP_MIN = 3,
		VK_BLEND_OP_MAX = 4,
		VK_BLEND_OP_ZERO_EXT = 1000148000,
		VK_BLEND_OP_SRC_EXT = 1000148001,
		VK_BLEND_OP_DST_EXT = 1000148002,
		VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
		VK_BLEND_OP_DST_OVER_EXT = 1000148004,
		VK_BLEND_OP_SRC_IN_EXT = 1000148005,
		VK_BLEND_OP_DST_IN_EXT = 1000148006,
		VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
		VK_BLEND_OP_DST_OUT_EXT = 1000148008,
		VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
		VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
		VK_BLEND_OP_XOR_EXT = 1000148011,
		VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
		VK_BLEND_OP_SCREEN_EXT = 1000148013,
		VK_BLEND_OP_OVERLAY_EXT = 1000148014,
		VK_BLEND_OP_DARKEN_EXT = 1000148015,
		VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
		VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
		VK_BLEND_OP_COLORBURN_EXT = 1000148018,
		VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
		VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
		VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
		VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
		VK_BLEND_OP_INVERT_EXT = 1000148023,
		VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
		VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
		VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
		VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
		VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
		VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
		VK_BLEND_OP_HARDMIX_EXT = 1000148030,
		VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
		VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
		VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
		VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
		VK_BLEND_OP_PLUS_EXT = 1000148035,
		VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
		VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
		VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
		VK_BLEND_OP_MINUS_EXT = 1000148039,
		VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
		VK_BLEND_OP_CONTRAST_EXT = 1000148041,
		VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
		VK_BLEND_OP_RED_EXT = 1000148043,
		VK_BLEND_OP_GREEN_EXT = 1000148044,
		VK_BLEND_OP_BLUE_EXT = 1000148045,
		VK_BLEND_OP_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkCompareOp : c_int
	{
		VK_COMPARE_OP_NEVER = 0,
		VK_COMPARE_OP_LESS = 1,
		VK_COMPARE_OP_EQUAL = 2,
		VK_COMPARE_OP_LESS_OR_EQUAL = 3,
		VK_COMPARE_OP_GREATER = 4,
		VK_COMPARE_OP_NOT_EQUAL = 5,
		VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
		VK_COMPARE_OP_ALWAYS = 7,
		VK_COMPARE_OP_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkDynamicState : c_int
	{
		VK_DYNAMIC_STATE_VIEWPORT = 0,
		VK_DYNAMIC_STATE_SCISSOR = 1,
		VK_DYNAMIC_STATE_LINE_WIDTH = 2,
		VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
		VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
		VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
		VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
		VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
		VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
		VK_DYNAMIC_STATE_CULL_MODE = 1000267000,
		VK_DYNAMIC_STATE_FRONT_FACE = 1000267001,
		VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002,
		VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003,
		VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004,
		VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005,
		VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006,
		VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007,
		VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008,
		VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009,
		VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010,
		VK_DYNAMIC_STATE_STENCIL_OP = 1000267011,
		VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001,
		VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002,
		VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004,
		VK_DYNAMIC_STATE_LINE_STIPPLE = 1000259000,
		VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
		VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
		VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = 1000099001,
		VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = 1000099002,
		VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
		VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
		VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
		VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
		VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = 1000205000,
		VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
		VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
		VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000,
		VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000,
		VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003,
		VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000,
		VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003,
		VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004,
		VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005,
		VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006,
		VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007,
		VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008,
		VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009,
		VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010,
		VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011,
		VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012,
		VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002,
		VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013,
		VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014,
		VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015,
		VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016,
		VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017,
		VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018,
		VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019,
		VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020,
		VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021,
		VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022,
		VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023,
		VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024,
		VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025,
		VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026,
		VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027,
		VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028,
		VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029,
		VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030,
		VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031,
		VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032,
		VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = 1000524000,
		VK_DYNAMIC_STATE_DEPTH_CLAMP_RANGE_EXT = 1000582000,
		VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
		VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000,
		VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001,
		VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002,
		VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003,
		VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004,
		VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005,
		VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006,
		VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007,
		VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008,
		VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009,
		VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010,
		VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011,
		VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1000377001,
		VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 1000377002,
		VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 1000377004,
		VK_DYNAMIC_STATE_LINE_STIPPLE_KHR = 1000259000,
		VK_DYNAMIC_STATE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkFrontFace : c_int
	{
		VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
		VK_FRONT_FACE_CLOCKWISE = 1,
		VK_FRONT_FACE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkVertexInputRate : c_int
	{
		VK_VERTEX_INPUT_RATE_VERTEX = 0,
		VK_VERTEX_INPUT_RATE_INSTANCE = 1,
		VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPrimitiveTopology : c_int
	{
		VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
		VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
		VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
		VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
		VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
		VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
		VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
		VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
		VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
		VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
		VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
		VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPolygonMode : c_int
	{
		VK_POLYGON_MODE_FILL = 0,
		VK_POLYGON_MODE_LINE = 1,
		VK_POLYGON_MODE_POINT = 2,
		VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
		VK_POLYGON_MODE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkStencilOp : c_int
	{
		VK_STENCIL_OP_KEEP = 0,
		VK_STENCIL_OP_ZERO = 1,
		VK_STENCIL_OP_REPLACE = 2,
		VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
		VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
		VK_STENCIL_OP_INVERT = 5,
		VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
		VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
		VK_STENCIL_OP_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkLogicOp : c_int
	{
		VK_LOGIC_OP_CLEAR = 0,
		VK_LOGIC_OP_AND = 1,
		VK_LOGIC_OP_AND_REVERSE = 2,
		VK_LOGIC_OP_COPY = 3,
		VK_LOGIC_OP_AND_INVERTED = 4,
		VK_LOGIC_OP_NO_OP = 5,
		VK_LOGIC_OP_XOR = 6,
		VK_LOGIC_OP_OR = 7,
		VK_LOGIC_OP_NOR = 8,
		VK_LOGIC_OP_EQUIVALENT = 9,
		VK_LOGIC_OP_INVERT = 10,
		VK_LOGIC_OP_OR_REVERSE = 11,
		VK_LOGIC_OP_COPY_INVERTED = 12,
		VK_LOGIC_OP_OR_INVERTED = 13,
		VK_LOGIC_OP_NAND = 14,
		VK_LOGIC_OP_SET = 15,
		VK_LOGIC_OP_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkBorderColor : c_int
	{
		VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
		VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
		VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
		VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
		VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
		VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
		VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
		VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
		VK_BORDER_COLOR_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkFilter : c_int
	{
		VK_FILTER_NEAREST = 0,
		VK_FILTER_LINEAR = 1,
		VK_FILTER_CUBIC_EXT = 1000015000,
		VK_FILTER_CUBIC_IMG = 1000015000,
		VK_FILTER_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSamplerAddressMode : c_int
	{
		VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
		VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
		VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
		VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
		VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
		VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = 4,
		VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSamplerMipmapMode : c_int
	{
		VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
		VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
		VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkDescriptorType : c_int
	{
		VK_DESCRIPTOR_TYPE_SAMPLER = 0,
		VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
		VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
		VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
		VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
		VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
		VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
		VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
		VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
		VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
		VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
		VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000,
		VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
		VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
		VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000,
		VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001,
		VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000,
		VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
		VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000,
		VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkAttachmentLoadOp : c_int
	{
		VK_ATTACHMENT_LOAD_OP_LOAD = 0,
		VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
		VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
		VK_ATTACHMENT_LOAD_OP_NONE = 1000400000,
		VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000,
		VK_ATTACHMENT_LOAD_OP_NONE_KHR = 1000400000,
		VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkAttachmentStoreOp : c_int
	{
		VK_ATTACHMENT_STORE_OP_STORE = 0,
		VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
		VK_ATTACHMENT_STORE_OP_NONE = 1000301000,
		VK_ATTACHMENT_STORE_OP_NONE_KHR = 1000301000,
		VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000,
		VK_ATTACHMENT_STORE_OP_NONE_EXT = 1000301000,
		VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPipelineBindPoint : c_int
	{
		VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
		VK_PIPELINE_BIND_POINT_COMPUTE = 1,
		VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
		VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003,
		VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000,
		VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkCommandBufferLevel : c_int
	{
		VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
		VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
		VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkIndexType : c_int
	{
		VK_INDEX_TYPE_UINT16 = 0,
		VK_INDEX_TYPE_UINT32 = 1,
		VK_INDEX_TYPE_UINT8 = 1000265000,
		VK_INDEX_TYPE_NONE_KHR = 1000165000,
		VK_INDEX_TYPE_NONE_NV = 1000165000,
		VK_INDEX_TYPE_UINT8_EXT = 1000265000,
		VK_INDEX_TYPE_UINT8_KHR = 1000265000,
		VK_INDEX_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSubpassContents : c_int
	{
		VK_SUBPASS_CONTENTS_INLINE = 0,
		VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
		VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR = 1000451000,
		VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT = 1000451000,
		VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkAccessFlagBits : c_int
	{
		VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
		VK_ACCESS_INDEX_READ_BIT = 2,
		VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
		VK_ACCESS_UNIFORM_READ_BIT = 8,
		VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
		VK_ACCESS_SHADER_READ_BIT = 32,
		VK_ACCESS_SHADER_WRITE_BIT = 64,
		VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
		VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
		VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
		VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
		VK_ACCESS_TRANSFER_READ_BIT = 2048,
		VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
		VK_ACCESS_HOST_READ_BIT = 8192,
		VK_ACCESS_HOST_WRITE_BIT = 16384,
		VK_ACCESS_MEMORY_READ_BIT = 32768,
		VK_ACCESS_MEMORY_WRITE_BIT = 65536,
		VK_ACCESS_NONE = 0,
		VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432,
		VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864,
		VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728,
		VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576,
		VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288,
		VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152,
		VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304,
		VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216,
		VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608,
		VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072,
		VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144,
		VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608,
		VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152,
		VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304,
		VK_ACCESS_NONE_KHR = 0,
		VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT = 131072,
		VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT = 262144,
		VK_ACCESS_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkAccessFlags = VkAccessFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkImageAspectFlagBits : c_int
	{
		VK_IMAGE_ASPECT_COLOR_BIT = 1,
		VK_IMAGE_ASPECT_DEPTH_BIT = 2,
		VK_IMAGE_ASPECT_STENCIL_BIT = 4,
		VK_IMAGE_ASPECT_METADATA_BIT = 8,
		VK_IMAGE_ASPECT_PLANE_0_BIT = 16,
		VK_IMAGE_ASPECT_PLANE_1_BIT = 32,
		VK_IMAGE_ASPECT_PLANE_2_BIT = 64,
		VK_IMAGE_ASPECT_NONE = 0,
		VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128,
		VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256,
		VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512,
		VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024,
		VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = 16,
		VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = 32,
		VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = 64,
		VK_IMAGE_ASPECT_NONE_KHR = 0,
		VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkImageAspectFlags = VkImageAspectFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkFormatFeatureFlagBits : c_int
	{
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
		VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
		VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
		VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
		VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
		VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
		VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
		VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
		VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
		VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
		VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
		VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
		VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
		VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
		VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
		VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
		VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536,
		VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432,
		VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864,
		VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192,
		VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216,
		VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824,
		VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728,
		VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 268435456,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192,
		VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384,
		VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536,
		VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576,
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152,
		VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304,
		VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608,
		VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkFormatFeatureFlags = VkFormatFeatureFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkImageCreateFlagBits : c_int
	{
		VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
		VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
		VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
		VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
		VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
		VK_IMAGE_CREATE_ALIAS_BIT = 1024,
		VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
		VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
		VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
		VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
		VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
		VK_IMAGE_CREATE_DISJOINT_BIT = 512,
		VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192,
		VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096,
		VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384,
		VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 65536,
		VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 262144,
		VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 131072,
		VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768,
		VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 1048576,
		VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64,
		VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32,
		VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128,
		VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256,
		VK_IMAGE_CREATE_DISJOINT_BIT_KHR = 512,
		VK_IMAGE_CREATE_ALIAS_BIT_KHR = 1024,
		VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkImageCreateFlags = VkImageCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkSampleCountFlagBits : c_int
	{
		VK_SAMPLE_COUNT_1_BIT = 1,
		VK_SAMPLE_COUNT_2_BIT = 2,
		VK_SAMPLE_COUNT_4_BIT = 4,
		VK_SAMPLE_COUNT_8_BIT = 8,
		VK_SAMPLE_COUNT_16_BIT = 16,
		VK_SAMPLE_COUNT_32_BIT = 32,
		VK_SAMPLE_COUNT_64_BIT = 64,
		VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkSampleCountFlags = VkSampleCountFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkImageUsageFlagBits : c_int
	{
		VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
		VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
		VK_IMAGE_USAGE_SAMPLED_BIT = 4,
		VK_IMAGE_USAGE_STORAGE_BIT = 8,
		VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
		VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
		VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
		VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
		VK_IMAGE_USAGE_HOST_TRANSFER_BIT = 4194304,
		VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024,
		VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048,
		VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096,
		VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512,
		VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256,
		VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 8192,
		VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 16384,
		VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 32768,
		VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 524288,
		VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 262144,
		VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 1048576,
		VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 2097152,
		VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = 33554432,
		VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR = 67108864,
		VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256,
		VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = 4194304,
		VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkImageUsageFlags = VkImageUsageFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkInstanceCreateFlagBits : c_int
	{
		VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 1,
		VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkInstanceCreateFlags = VkInstanceCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkMemoryHeapFlagBits : c_int
	{
		VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
		VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
		VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2,
		VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkMemoryHeapFlags = VkMemoryHeapFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkMemoryPropertyFlagBits : c_int
	{
		VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
		VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
		VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
		VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
		VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
		VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
		VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64,
		VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128,
		VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256,
		VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkMemoryPropertyFlags = VkMemoryPropertyFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkQueueFlagBits : c_int
	{
		VK_QUEUE_GRAPHICS_BIT = 1,
		VK_QUEUE_COMPUTE_BIT = 2,
		VK_QUEUE_TRANSFER_BIT = 4,
		VK_QUEUE_SPARSE_BINDING_BIT = 8,
		VK_QUEUE_PROTECTED_BIT = 16,
		VK_QUEUE_VIDEO_DECODE_BIT_KHR = 32,
		VK_QUEUE_VIDEO_ENCODE_BIT_KHR = 64,
		VK_QUEUE_OPTICAL_FLOW_BIT_NV = 256,
		VK_QUEUE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkQueueFlags = VkQueueFlagBits;

	public typealias VkDeviceCreateFlags = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkDeviceQueueCreateFlagBits : c_int
	{
		VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
		VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkDeviceQueueCreateFlags = VkDeviceQueueCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkPipelineStageFlagBits : c_int
	{
		VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
		VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
		VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
		VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
		VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
		VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
		VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
		VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
		VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
		VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
		VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
		VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
		VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
		VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
		VK_PIPELINE_STAGE_HOST_BIT = 16384,
		VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
		VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
		VK_PIPELINE_STAGE_NONE = 0,
		VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216,
		VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144,
		VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432,
		VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152,
		VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608,
		VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304,
		VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072,
		VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 524288,
		VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 1048576,
		VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304,
		VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152,
		VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432,
		VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288,
		VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576,
		VK_PIPELINE_STAGE_NONE_KHR = 0,
		VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT = 131072,
		VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkPipelineStageFlags = VkPipelineStageFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkMemoryMapFlagBits : c_int
	{
		VK_MEMORY_MAP_PLACED_BIT_EXT = 1,
		VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkMemoryMapFlags = VkMemoryMapFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkSparseMemoryBindFlagBits : c_int
	{
		VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
		VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkSparseMemoryBindFlags = VkSparseMemoryBindFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkSparseImageFormatFlagBits : c_int
	{
		VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
		VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
		VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
		VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkSparseImageFormatFlags = VkSparseImageFormatFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkFenceCreateFlagBits : c_int
	{
		VK_FENCE_CREATE_SIGNALED_BIT = 1,
		VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkFenceCreateFlags = VkFenceCreateFlagBits;

	public typealias VkSemaphoreCreateFlags = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkEventCreateFlagBits : c_int
	{
		VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1,
		VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 1,
		VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkEventCreateFlags = VkEventCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkQueryPipelineStatisticFlagBits : c_int
	{
		VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
		VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
		VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
		VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
		VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
		VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
		VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
		VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
		VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
		VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
		VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
		VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 2048,
		VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 4096,
		VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = 8192,
		VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkQueryPipelineStatisticFlags = VkQueryPipelineStatisticFlagBits;

	public typealias VkQueryPoolCreateFlags = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkQueryResultFlagBits : c_int
	{
		VK_QUERY_RESULT_64_BIT = 1,
		VK_QUERY_RESULT_WAIT_BIT = 2,
		VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
		VK_QUERY_RESULT_PARTIAL_BIT = 8,
		VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16,
		VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkQueryResultFlags = VkQueryResultFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkBufferCreateFlagBits : c_int
	{
		VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
		VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
		VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
		VK_BUFFER_CREATE_PROTECTED_BIT = 8,
		VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16,
		VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 32,
		VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 64,
		VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16,
		VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 16,
		VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkBufferCreateFlags = VkBufferCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkBufferUsageFlagBits : c_int
	{
		VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
		VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
		VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
		VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
		VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
		VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
		VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
		VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
		VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
		VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072,
		VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192,
		VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384,
		VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048,
		VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096,
		VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512,
		VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288,
		VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576,
		VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024,
		VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 32768,
		VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 65536,
		VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152,
		VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304,
		VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864,
		VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608,
		VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216,
		VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024,
		VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072,
		VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072,
		VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkBufferUsageFlags = VkBufferUsageFlagBits;

	public typealias VkBufferViewCreateFlags = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkImageViewCreateFlagBits : c_int
	{
		VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1,
		VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4,
		VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2,
		VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkImageViewCreateFlags = VkImageViewCreateFlagBits;

	public typealias VkShaderModuleCreateFlags = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkPipelineCacheCreateFlagBits : c_int
	{
		VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1,
		VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1,
		VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkPipelineCacheCreateFlags = VkPipelineCacheCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkColorComponentFlagBits : c_int
	{
		VK_COLOR_COMPONENT_R_BIT = 1,
		VK_COLOR_COMPONENT_G_BIT = 2,
		VK_COLOR_COMPONENT_B_BIT = 4,
		VK_COLOR_COMPONENT_A_BIT = 8,
		VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkColorComponentFlags = VkColorComponentFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkPipelineCreateFlagBits : c_int
	{
		VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
		VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
		VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
		VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
		VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16,
		VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256,
		VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512,
		VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT = 134217728,
		VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT = 1073741824,
		VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384,
		VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768,
		VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536,
		VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072,
		VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096,
		VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192,
		VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288,
		VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32,
		VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304,
		VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152,
		VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64,
		VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128,
		VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144,
		VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048,
		VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 536870912,
		VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608,
		VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024,
		VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576,
		VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432,
		VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864,
		VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216,
		VK_PIPELINE_CREATE_DISPATCH_BASE = 16,
		VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8,
		VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16,
		VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304,
		VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152,
		VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256,
		VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512,
		VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = 134217728,
		VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824,
		VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkPipelineCreateFlags = VkPipelineCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkPipelineShaderStageCreateFlagBits : c_int
	{
		VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1,
		VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2,
		VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1,
		VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2,
		VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkPipelineShaderStageCreateFlags = VkPipelineShaderStageCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkShaderStageFlagBits : c_int
	{
		VK_SHADER_STAGE_VERTEX_BIT = 1,
		VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
		VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
		VK_SHADER_STAGE_GEOMETRY_BIT = 8,
		VK_SHADER_STAGE_FRAGMENT_BIT = 16,
		VK_SHADER_STAGE_COMPUTE_BIT = 32,
		VK_SHADER_STAGE_ALL_GRAPHICS = 31,
		VK_SHADER_STAGE_ALL = 2147483647,
		VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256,
		VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512,
		VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024,
		VK_SHADER_STAGE_MISS_BIT_KHR = 2048,
		VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096,
		VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192,
		VK_SHADER_STAGE_TASK_BIT_EXT = 64,
		VK_SHADER_STAGE_MESH_BIT_EXT = 128,
		VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384,
		VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 524288,
		VK_SHADER_STAGE_RAYGEN_BIT_NV = 256,
		VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512,
		VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024,
		VK_SHADER_STAGE_MISS_BIT_NV = 2048,
		VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096,
		VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192,
		VK_SHADER_STAGE_TASK_BIT_NV = 64,
		VK_SHADER_STAGE_MESH_BIT_NV = 128,
		VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkCullModeFlagBits : c_int
	{
		VK_CULL_MODE_NONE = 0,
		VK_CULL_MODE_FRONT_BIT = 1,
		VK_CULL_MODE_BACK_BIT = 2,
		VK_CULL_MODE_FRONT_AND_BACK = 3,
		VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkCullModeFlags = VkCullModeFlagBits;

	public typealias VkPipelineVertexInputStateCreateFlags = VkFlags;

	public typealias VkPipelineInputAssemblyStateCreateFlags = VkFlags;

	public typealias VkPipelineTessellationStateCreateFlags = VkFlags;

	public typealias VkPipelineViewportStateCreateFlags = VkFlags;

	public typealias VkPipelineRasterizationStateCreateFlags = VkFlags;

	public typealias VkPipelineMultisampleStateCreateFlags = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkPipelineDepthStencilStateCreateFlagBits : c_int
	{
		VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1,
		VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 2,
		VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1,
		VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2,
		VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkPipelineDepthStencilStateCreateFlags = VkPipelineDepthStencilStateCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkPipelineColorBlendStateCreateFlagBits : c_int
	{
		VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1,
		VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1,
		VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkPipelineColorBlendStateCreateFlags = VkPipelineColorBlendStateCreateFlagBits;

	public typealias VkPipelineDynamicStateCreateFlags = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkPipelineLayoutCreateFlagBits : c_int
	{
		VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2,
		VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkPipelineLayoutCreateFlags = VkPipelineLayoutCreateFlagBits;

	public typealias VkShaderStageFlags = VkShaderStageFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkSamplerCreateFlagBits : c_int
	{
		VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1,
		VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2,
		VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8,
		VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4,
		VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 16,
		VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkSamplerCreateFlags = VkSamplerCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkDescriptorPoolCreateFlagBits : c_int
	{
		VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
		VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2,
		VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 4,
		VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = 8,
		VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = 16,
		VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2,
		VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4,
		VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkDescriptorPoolCreateFlags = VkDescriptorPoolCreateFlagBits;

	public typealias VkDescriptorPoolResetFlags = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkDescriptorSetLayoutCreateFlagBits : c_int
	{
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2,
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT = 1,
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 16,
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32,
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = 128,
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 4,
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV = 64,
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1,
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2,
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4,
		VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkDescriptorSetLayoutCreateFlags = VkDescriptorSetLayoutCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkAttachmentDescriptionFlagBits : c_int
	{
		VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
		VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkAttachmentDescriptionFlags = VkAttachmentDescriptionFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkDependencyFlagBits : c_int
	{
		VK_DEPENDENCY_BY_REGION_BIT = 1,
		VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
		VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
		VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 8,
		VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2,
		VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4,
		VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkDependencyFlags = VkDependencyFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkFramebufferCreateFlagBits : c_int
	{
		VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1,
		VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1,
		VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkFramebufferCreateFlags = VkFramebufferCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkRenderPassCreateFlagBits : c_int
	{
		VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2,
		VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkRenderPassCreateFlags = VkRenderPassCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkSubpassDescriptionFlagBits : c_int
	{
		VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1,
		VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2,
		VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4,
		VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8,
		VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16,
		VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32,
		VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64,
		VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 128,
		VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16,
		VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32,
		VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64,
		VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkSubpassDescriptionFlags = VkSubpassDescriptionFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkCommandPoolCreateFlagBits : c_int
	{
		VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
		VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
		VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
		VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkCommandPoolCreateFlags = VkCommandPoolCreateFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkCommandPoolResetFlagBits : c_int
	{
		VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
		VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkCommandPoolResetFlags = VkCommandPoolResetFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkCommandBufferUsageFlagBits : c_int
	{
		VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
		VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
		VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
		VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkCommandBufferUsageFlags = VkCommandBufferUsageFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkQueryControlFlagBits : c_int
	{
		VK_QUERY_CONTROL_PRECISE_BIT = 1,
		VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkQueryControlFlags = VkQueryControlFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkCommandBufferResetFlagBits : c_int
	{
		VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
		VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkCommandBufferResetFlags = VkCommandBufferResetFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkStencilFaceFlagBits : c_int
	{
		VK_STENCIL_FACE_FRONT_BIT = 1,
		VK_STENCIL_FACE_BACK_BIT = 2,
		VK_STENCIL_FACE_FRONT_AND_BACK = 3,
		VK_STENCIL_FRONT_AND_BACK = 3,
		VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkStencilFaceFlags = VkStencilFaceFlagBits;

	[CRepr]
	public struct VkExtent2D
	{
		public uint32 width;
		public uint32 height;
	}

	[CRepr]
	public struct VkExtent3D
	{
		public uint32 width;
		public uint32 height;
		public uint32 depth;
	}

	[CRepr]
	public struct VkOffset2D
	{
		public int32 x;
		public int32 y;
	}

	[CRepr]
	public struct VkOffset3D
	{
		public int32 x;
		public int32 y;
		public int32 z;
	}

	[CRepr]
	public struct VkRect2D
	{
		public VkOffset2D offset;
		public VkExtent2D extent;
	}

	[CRepr]
	public struct VkBaseInStructure
	{
		public VkStructureType sType;
		public VkBaseInStructure* pNext;
	}

	[CRepr]
	public struct VkBaseOutStructure
	{
		public VkStructureType sType;
		public VkBaseOutStructure* pNext;
	}

	[CRepr]
	public struct VkBufferMemoryBarrier
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public uint32 srcQueueFamilyIndex;
		public uint32 dstQueueFamilyIndex;
		public VkBuffer buffer;
		public VkDeviceSize offset;
		public VkDeviceSize size;
	}

	[CRepr]
	public struct VkDispatchIndirectCommand
	{
		public uint32 x;
		public uint32 y;
		public uint32 z;
	}

	[CRepr]
	public struct VkDrawIndexedIndirectCommand
	{
		public uint32 indexCount;
		public uint32 instanceCount;
		public uint32 firstIndex;
		public int32 vertexOffset;
		public uint32 firstInstance;
	}

	[CRepr]
	public struct VkDrawIndirectCommand
	{
		public uint32 vertexCount;
		public uint32 instanceCount;
		public uint32 firstVertex;
		public uint32 firstInstance;
	}

	[CRepr]
	public struct VkImageSubresourceRange
	{
		public VkImageAspectFlags aspectMask;
		public uint32 baseMipLevel;
		public uint32 levelCount;
		public uint32 baseArrayLayer;
		public uint32 layerCount;
	}

	[CRepr]
	public struct VkImageMemoryBarrier
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public VkImageLayout oldLayout;
		public VkImageLayout newLayout;
		public uint32 srcQueueFamilyIndex;
		public uint32 dstQueueFamilyIndex;
		public VkImage image;
		public VkImageSubresourceRange subresourceRange;
	}

	[CRepr]
	public struct VkMemoryBarrier
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
	}

	[CRepr]
	public struct VkPipelineCacheHeaderVersionOne
	{
		public uint32 headerSize;
		public VkPipelineCacheHeaderVersion headerVersion;
		public uint32 vendorID;
		public uint32 deviceID;
		public uint8[16] pipelineCacheUUID;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void* PFN_vkAllocationFunction(void*, c_size, c_size, VkSystemAllocationScope);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkFreeFunction(void*, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkInternalAllocationNotification(void*, c_size, VkInternalAllocationType, VkSystemAllocationScope);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkInternalFreeNotification(void*, c_size, VkInternalAllocationType, VkSystemAllocationScope);

	[CallingConvention(VKAPI_CALL)]
	public function void* PFN_vkReallocationFunction(void*, void*, c_size, c_size, VkSystemAllocationScope);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkVoidFunction();

	[CRepr]
	public struct VkAllocationCallbacks
	{
		public void* pUserData;
		public PFN_vkAllocationFunction pfnAllocation;
		public PFN_vkReallocationFunction pfnReallocation;
		public PFN_vkFreeFunction pfnFree;
		public PFN_vkInternalAllocationNotification pfnInternalAllocation;
		public PFN_vkInternalFreeNotification pfnInternalFree;
	}

	[CRepr]
	public struct VkApplicationInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public c_char* pApplicationName;
		public uint32 applicationVersion;
		public c_char* pEngineName;
		public uint32 engineVersion;
		public uint32 apiVersion;
	}

	[CRepr]
	public struct VkFormatProperties
	{
		public VkFormatFeatureFlags linearTilingFeatures;
		public VkFormatFeatureFlags optimalTilingFeatures;
		public VkFormatFeatureFlags bufferFeatures;
	}

	[CRepr]
	public struct VkImageFormatProperties
	{
		public VkExtent3D maxExtent;
		public uint32 maxMipLevels;
		public uint32 maxArrayLayers;
		public VkSampleCountFlags sampleCounts;
		public VkDeviceSize maxResourceSize;
	}

	[CRepr]
	public struct VkInstanceCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkInstanceCreateFlags flags;
		public VkApplicationInfo* pApplicationInfo;
		public uint32 enabledLayerCount;
		public c_char** ppEnabledLayerNames;
		public uint32 enabledExtensionCount;
		public c_char** ppEnabledExtensionNames;
	}

	[CRepr]
	public struct VkMemoryHeap
	{
		public VkDeviceSize size;
		public VkMemoryHeapFlags flags;
	}

	[CRepr]
	public struct VkMemoryType
	{
		public VkMemoryPropertyFlags propertyFlags;
		public uint32 heapIndex;
	}

	[CRepr]
	public struct VkPhysicalDeviceFeatures
	{
		public VkBool32 robustBufferAccess;
		public VkBool32 fullDrawIndexUint32;
		public VkBool32 imageCubeArray;
		public VkBool32 independentBlend;
		public VkBool32 geometryShader;
		public VkBool32 tessellationShader;
		public VkBool32 sampleRateShading;
		public VkBool32 dualSrcBlend;
		public VkBool32 logicOp;
		public VkBool32 multiDrawIndirect;
		public VkBool32 drawIndirectFirstInstance;
		public VkBool32 depthClamp;
		public VkBool32 depthBiasClamp;
		public VkBool32 fillModeNonSolid;
		public VkBool32 depthBounds;
		public VkBool32 wideLines;
		public VkBool32 largePoints;
		public VkBool32 alphaToOne;
		public VkBool32 multiViewport;
		public VkBool32 samplerAnisotropy;
		public VkBool32 textureCompressionETC2;
		public VkBool32 textureCompressionASTC_LDR;
		public VkBool32 textureCompressionBC;
		public VkBool32 occlusionQueryPrecise;
		public VkBool32 pipelineStatisticsQuery;
		public VkBool32 vertexPipelineStoresAndAtomics;
		public VkBool32 fragmentStoresAndAtomics;
		public VkBool32 shaderTessellationAndGeometryPointSize;
		public VkBool32 shaderImageGatherExtended;
		public VkBool32 shaderStorageImageExtendedFormats;
		public VkBool32 shaderStorageImageMultisample;
		public VkBool32 shaderStorageImageReadWithoutFormat;
		public VkBool32 shaderStorageImageWriteWithoutFormat;
		public VkBool32 shaderUniformBufferArrayDynamicIndexing;
		public VkBool32 shaderSampledImageArrayDynamicIndexing;
		public VkBool32 shaderStorageBufferArrayDynamicIndexing;
		public VkBool32 shaderStorageImageArrayDynamicIndexing;
		public VkBool32 shaderClipDistance;
		public VkBool32 shaderCullDistance;
		public VkBool32 shaderFloat64;
		public VkBool32 shaderInt64;
		public VkBool32 shaderInt16;
		public VkBool32 shaderResourceResidency;
		public VkBool32 shaderResourceMinLod;
		public VkBool32 sparseBinding;
		public VkBool32 sparseResidencyBuffer;
		public VkBool32 sparseResidencyImage2D;
		public VkBool32 sparseResidencyImage3D;
		public VkBool32 sparseResidency2Samples;
		public VkBool32 sparseResidency4Samples;
		public VkBool32 sparseResidency8Samples;
		public VkBool32 sparseResidency16Samples;
		public VkBool32 sparseResidencyAliased;
		public VkBool32 variableMultisampleRate;
		public VkBool32 inheritedQueries;
	}

	[CRepr]
	public struct VkPhysicalDeviceLimits
	{
		public uint32 maxImageDimension1D;
		public uint32 maxImageDimension2D;
		public uint32 maxImageDimension3D;
		public uint32 maxImageDimensionCube;
		public uint32 maxImageArrayLayers;
		public uint32 maxTexelBufferElements;
		public uint32 maxUniformBufferRange;
		public uint32 maxStorageBufferRange;
		public uint32 maxPushConstantsSize;
		public uint32 maxMemoryAllocationCount;
		public uint32 maxSamplerAllocationCount;
		public VkDeviceSize bufferImageGranularity;
		public VkDeviceSize sparseAddressSpaceSize;
		public uint32 maxBoundDescriptorSets;
		public uint32 maxPerStageDescriptorSamplers;
		public uint32 maxPerStageDescriptorUniformBuffers;
		public uint32 maxPerStageDescriptorStorageBuffers;
		public uint32 maxPerStageDescriptorSampledImages;
		public uint32 maxPerStageDescriptorStorageImages;
		public uint32 maxPerStageDescriptorInputAttachments;
		public uint32 maxPerStageResources;
		public uint32 maxDescriptorSetSamplers;
		public uint32 maxDescriptorSetUniformBuffers;
		public uint32 maxDescriptorSetUniformBuffersDynamic;
		public uint32 maxDescriptorSetStorageBuffers;
		public uint32 maxDescriptorSetStorageBuffersDynamic;
		public uint32 maxDescriptorSetSampledImages;
		public uint32 maxDescriptorSetStorageImages;
		public uint32 maxDescriptorSetInputAttachments;
		public uint32 maxVertexInputAttributes;
		public uint32 maxVertexInputBindings;
		public uint32 maxVertexInputAttributeOffset;
		public uint32 maxVertexInputBindingStride;
		public uint32 maxVertexOutputComponents;
		public uint32 maxTessellationGenerationLevel;
		public uint32 maxTessellationPatchSize;
		public uint32 maxTessellationControlPerVertexInputComponents;
		public uint32 maxTessellationControlPerVertexOutputComponents;
		public uint32 maxTessellationControlPerPatchOutputComponents;
		public uint32 maxTessellationControlTotalOutputComponents;
		public uint32 maxTessellationEvaluationInputComponents;
		public uint32 maxTessellationEvaluationOutputComponents;
		public uint32 maxGeometryShaderInvocations;
		public uint32 maxGeometryInputComponents;
		public uint32 maxGeometryOutputComponents;
		public uint32 maxGeometryOutputVertices;
		public uint32 maxGeometryTotalOutputComponents;
		public uint32 maxFragmentInputComponents;
		public uint32 maxFragmentOutputAttachments;
		public uint32 maxFragmentDualSrcAttachments;
		public uint32 maxFragmentCombinedOutputResources;
		public uint32 maxComputeSharedMemorySize;
		public uint32[3] maxComputeWorkGroupCount;
		public uint32 maxComputeWorkGroupInvocations;
		public uint32[3] maxComputeWorkGroupSize;
		public uint32 subPixelPrecisionBits;
		public uint32 subTexelPrecisionBits;
		public uint32 mipmapPrecisionBits;
		public uint32 maxDrawIndexedIndexValue;
		public uint32 maxDrawIndirectCount;
		public float maxSamplerLodBias;
		public float maxSamplerAnisotropy;
		public uint32 maxViewports;
		public uint32[2] maxViewportDimensions;
		public float[2] viewportBoundsRange;
		public uint32 viewportSubPixelBits;
		public c_size minMemoryMapAlignment;
		public VkDeviceSize minTexelBufferOffsetAlignment;
		public VkDeviceSize minUniformBufferOffsetAlignment;
		public VkDeviceSize minStorageBufferOffsetAlignment;
		public int32 minTexelOffset;
		public uint32 maxTexelOffset;
		public int32 minTexelGatherOffset;
		public uint32 maxTexelGatherOffset;
		public float minInterpolationOffset;
		public float maxInterpolationOffset;
		public uint32 subPixelInterpolationOffsetBits;
		public uint32 maxFramebufferWidth;
		public uint32 maxFramebufferHeight;
		public uint32 maxFramebufferLayers;
		public VkSampleCountFlags framebufferColorSampleCounts;
		public VkSampleCountFlags framebufferDepthSampleCounts;
		public VkSampleCountFlags framebufferStencilSampleCounts;
		public VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
		public uint32 maxColorAttachments;
		public VkSampleCountFlags sampledImageColorSampleCounts;
		public VkSampleCountFlags sampledImageIntegerSampleCounts;
		public VkSampleCountFlags sampledImageDepthSampleCounts;
		public VkSampleCountFlags sampledImageStencilSampleCounts;
		public VkSampleCountFlags storageImageSampleCounts;
		public uint32 maxSampleMaskWords;
		public VkBool32 timestampComputeAndGraphics;
		public float timestampPeriod;
		public uint32 maxClipDistances;
		public uint32 maxCullDistances;
		public uint32 maxCombinedClipAndCullDistances;
		public uint32 discreteQueuePriorities;
		public float[2] pointSizeRange;
		public float[2] lineWidthRange;
		public float pointSizeGranularity;
		public float lineWidthGranularity;
		public VkBool32 strictLines;
		public VkBool32 standardSampleLocations;
		public VkDeviceSize optimalBufferCopyOffsetAlignment;
		public VkDeviceSize optimalBufferCopyRowPitchAlignment;
		public VkDeviceSize nonCoherentAtomSize;
	}

	[CRepr]
	public struct VkPhysicalDeviceMemoryProperties
	{
		public uint32 memoryTypeCount;
		public VkMemoryType[32] memoryTypes;
		public uint32 memoryHeapCount;
		public VkMemoryHeap[16] memoryHeaps;
	}

	[CRepr]
	public struct VkPhysicalDeviceSparseProperties
	{
		public VkBool32 residencyStandard2DBlockShape;
		public VkBool32 residencyStandard2DMultisampleBlockShape;
		public VkBool32 residencyStandard3DBlockShape;
		public VkBool32 residencyAlignedMipSize;
		public VkBool32 residencyNonResidentStrict;
	}

	[CRepr]
	public struct VkPhysicalDeviceProperties
	{
		public uint32 apiVersion;
		public uint32 driverVersion;
		public uint32 vendorID;
		public uint32 deviceID;
		public VkPhysicalDeviceType deviceType;
		public c_char[256] deviceName;
		public uint8[16] pipelineCacheUUID;
		public VkPhysicalDeviceLimits limits;
		public VkPhysicalDeviceSparseProperties sparseProperties;
	}

	[CRepr]
	public struct VkQueueFamilyProperties
	{
		public VkQueueFlags queueFlags;
		public uint32 queueCount;
		public uint32 timestampValidBits;
		public VkExtent3D minImageTransferGranularity;
	}

	[CRepr]
	public struct VkDeviceQueueCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceQueueCreateFlags flags;
		public uint32 queueFamilyIndex;
		public uint32 queueCount;
		public float* pQueuePriorities;
	}

	[CRepr]
	public struct VkDeviceCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceCreateFlags flags;
		public uint32 queueCreateInfoCount;
		public VkDeviceQueueCreateInfo* pQueueCreateInfos;
		public uint32 enabledLayerCount;
		public c_char** ppEnabledLayerNames;
		public uint32 enabledExtensionCount;
		public c_char** ppEnabledExtensionNames;
		public VkPhysicalDeviceFeatures* pEnabledFeatures;
	}

	[CRepr]
	public struct VkExtensionProperties
	{
		public c_char[256] extensionName;
		public uint32 specVersion;
	}

	[CRepr]
	public struct VkLayerProperties
	{
		public c_char[256] layerName;
		public uint32 specVersion;
		public uint32 implementationVersion;
		public c_char[256] description;
	}

	[CRepr]
	public struct VkSubmitInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 waitSemaphoreCount;
		public VkSemaphore* pWaitSemaphores;
		public VkPipelineStageFlags* pWaitDstStageMask;
		public uint32 commandBufferCount;
		public VkCommandBuffer* pCommandBuffers;
		public uint32 signalSemaphoreCount;
		public VkSemaphore* pSignalSemaphores;
	}

	[CRepr]
	public struct VkMappedMemoryRange
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceMemory memory;
		public VkDeviceSize offset;
		public VkDeviceSize size;
	}

	[CRepr]
	public struct VkMemoryAllocateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize allocationSize;
		public uint32 memoryTypeIndex;
	}

	[CRepr]
	public struct VkMemoryRequirements
	{
		public VkDeviceSize size;
		public VkDeviceSize alignment;
		public uint32 memoryTypeBits;
	}

	[CRepr]
	public struct VkSparseMemoryBind
	{
		public VkDeviceSize resourceOffset;
		public VkDeviceSize size;
		public VkDeviceMemory memory;
		public VkDeviceSize memoryOffset;
		public VkSparseMemoryBindFlags flags;
	}

	[CRepr]
	public struct VkSparseBufferMemoryBindInfo
	{
		public VkBuffer buffer;
		public uint32 bindCount;
		public VkSparseMemoryBind* pBinds;
	}

	[CRepr]
	public struct VkSparseImageOpaqueMemoryBindInfo
	{
		public VkImage image;
		public uint32 bindCount;
		public VkSparseMemoryBind* pBinds;
	}

	[CRepr]
	public struct VkImageSubresource
	{
		public VkImageAspectFlags aspectMask;
		public uint32 mipLevel;
		public uint32 arrayLayer;
	}

	[CRepr]
	public struct VkSparseImageMemoryBind
	{
		public VkImageSubresource subresource;
		public VkOffset3D offset;
		public VkExtent3D extent;
		public VkDeviceMemory memory;
		public VkDeviceSize memoryOffset;
		public VkSparseMemoryBindFlags flags;
	}

	[CRepr]
	public struct VkSparseImageMemoryBindInfo
	{
		public VkImage image;
		public uint32 bindCount;
		public VkSparseImageMemoryBind* pBinds;
	}

	[CRepr]
	public struct VkBindSparseInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 waitSemaphoreCount;
		public VkSemaphore* pWaitSemaphores;
		public uint32 bufferBindCount;
		public VkSparseBufferMemoryBindInfo* pBufferBinds;
		public uint32 imageOpaqueBindCount;
		public VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
		public uint32 imageBindCount;
		public VkSparseImageMemoryBindInfo* pImageBinds;
		public uint32 signalSemaphoreCount;
		public VkSemaphore* pSignalSemaphores;
	}

	[CRepr]
	public struct VkSparseImageFormatProperties
	{
		public VkImageAspectFlags aspectMask;
		public VkExtent3D imageGranularity;
		public VkSparseImageFormatFlags flags;
	}

	[CRepr]
	public struct VkSparseImageMemoryRequirements
	{
		public VkSparseImageFormatProperties formatProperties;
		public uint32 imageMipTailFirstLod;
		public VkDeviceSize imageMipTailSize;
		public VkDeviceSize imageMipTailOffset;
		public VkDeviceSize imageMipTailStride;
	}

	[CRepr]
	public struct VkFenceCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFenceCreateFlags flags;
	}

	[CRepr]
	public struct VkSemaphoreCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSemaphoreCreateFlags flags;
	}

	[CRepr]
	public struct VkEventCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkEventCreateFlags flags;
	}

	[CRepr]
	public struct VkQueryPoolCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkQueryPoolCreateFlags flags;
		public VkQueryType queryType;
		public uint32 queryCount;
		public VkQueryPipelineStatisticFlags pipelineStatistics;
	}

	[CRepr]
	public struct VkBufferCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBufferCreateFlags flags;
		public VkDeviceSize size;
		public VkBufferUsageFlags usage;
		public VkSharingMode sharingMode;
		public uint32 queueFamilyIndexCount;
		public uint32* pQueueFamilyIndices;
	}

	[CRepr]
	public struct VkBufferViewCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBufferViewCreateFlags flags;
		public VkBuffer buffer;
		public VkFormat format;
		public VkDeviceSize offset;
		public VkDeviceSize range;
	}

	[CRepr]
	public struct VkImageCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageCreateFlags flags;
		public VkImageType imageType;
		public VkFormat format;
		public VkExtent3D extent;
		public uint32 mipLevels;
		public uint32 arrayLayers;
		public VkSampleCountFlagBits samples;
		public VkImageTiling tiling;
		public VkImageUsageFlags usage;
		public VkSharingMode sharingMode;
		public uint32 queueFamilyIndexCount;
		public uint32* pQueueFamilyIndices;
		public VkImageLayout initialLayout;
	}

	[CRepr]
	public struct VkSubresourceLayout
	{
		public VkDeviceSize offset;
		public VkDeviceSize size;
		public VkDeviceSize rowPitch;
		public VkDeviceSize arrayPitch;
		public VkDeviceSize depthPitch;
	}

	[CRepr]
	public struct VkComponentMapping
	{
		public VkComponentSwizzle r;
		public VkComponentSwizzle g;
		public VkComponentSwizzle b;
		public VkComponentSwizzle a;
	}

	[CRepr]
	public struct VkImageViewCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageViewCreateFlags flags;
		public VkImage image;
		public VkImageViewType viewType;
		public VkFormat format;
		public VkComponentMapping components;
		public VkImageSubresourceRange subresourceRange;
	}

	[CRepr]
	public struct VkShaderModuleCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderModuleCreateFlags flags;
		public c_size codeSize;
		public uint32* pCode;
	}

	[CRepr]
	public struct VkPipelineCacheCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCacheCreateFlags flags;
		public c_size initialDataSize;
		public void* pInitialData;
	}

	[CRepr]
	public struct VkSpecializationMapEntry
	{
		public uint32 constantID;
		public uint32 offset;
		public c_size size;
	}

	[CRepr]
	public struct VkSpecializationInfo
	{
		public uint32 mapEntryCount;
		public VkSpecializationMapEntry* pMapEntries;
		public c_size dataSize;
		public void* pData;
	}

	[CRepr]
	public struct VkPipelineShaderStageCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineShaderStageCreateFlags flags;
		public VkShaderStageFlagBits stage;
		public VkShaderModule module;
		public c_char* pName;
		public VkSpecializationInfo* pSpecializationInfo;
	}

	[CRepr]
	public struct VkComputePipelineCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCreateFlags flags;
		public VkPipelineShaderStageCreateInfo stage;
		public VkPipelineLayout layout;
		public VkPipeline basePipelineHandle;
		public int32 basePipelineIndex;
	}

	[CRepr]
	public struct VkVertexInputBindingDescription
	{
		public uint32 binding;
		public uint32 stride;
		public VkVertexInputRate inputRate;
	}

	[CRepr]
	public struct VkVertexInputAttributeDescription
	{
		public uint32 location;
		public uint32 binding;
		public VkFormat format;
		public uint32 offset;
	}

	[CRepr]
	public struct VkPipelineVertexInputStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineVertexInputStateCreateFlags flags;
		public uint32 vertexBindingDescriptionCount;
		public VkVertexInputBindingDescription* pVertexBindingDescriptions;
		public uint32 vertexAttributeDescriptionCount;
		public VkVertexInputAttributeDescription* pVertexAttributeDescriptions;
	}

	[CRepr]
	public struct VkPipelineInputAssemblyStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineInputAssemblyStateCreateFlags flags;
		public VkPrimitiveTopology topology;
		public VkBool32 primitiveRestartEnable;
	}

	[CRepr]
	public struct VkPipelineTessellationStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineTessellationStateCreateFlags flags;
		public uint32 patchControlPoints;
	}

	[CRepr]
	public struct VkViewport
	{
		public float x;
		public float y;
		public float width;
		public float height;
		public float minDepth;
		public float maxDepth;
	}

	[CRepr]
	public struct VkPipelineViewportStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineViewportStateCreateFlags flags;
		public uint32 viewportCount;
		public VkViewport* pViewports;
		public uint32 scissorCount;
		public VkRect2D* pScissors;
	}

	[CRepr]
	public struct VkPipelineRasterizationStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineRasterizationStateCreateFlags flags;
		public VkBool32 depthClampEnable;
		public VkBool32 rasterizerDiscardEnable;
		public VkPolygonMode polygonMode;
		public VkCullModeFlags cullMode;
		public VkFrontFace frontFace;
		public VkBool32 depthBiasEnable;
		public float depthBiasConstantFactor;
		public float depthBiasClamp;
		public float depthBiasSlopeFactor;
		public float lineWidth;
	}

	[CRepr]
	public struct VkPipelineMultisampleStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineMultisampleStateCreateFlags flags;
		public VkSampleCountFlagBits rasterizationSamples;
		public VkBool32 sampleShadingEnable;
		public float minSampleShading;
		public VkSampleMask* pSampleMask;
		public VkBool32 alphaToCoverageEnable;
		public VkBool32 alphaToOneEnable;
	}

	[CRepr]
	public struct VkStencilOpState
	{
		public VkStencilOp failOp;
		public VkStencilOp passOp;
		public VkStencilOp depthFailOp;
		public VkCompareOp compareOp;
		public uint32 compareMask;
		public uint32 writeMask;
		public uint32 reference;
	}

	[CRepr]
	public struct VkPipelineDepthStencilStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineDepthStencilStateCreateFlags flags;
		public VkBool32 depthTestEnable;
		public VkBool32 depthWriteEnable;
		public VkCompareOp depthCompareOp;
		public VkBool32 depthBoundsTestEnable;
		public VkBool32 stencilTestEnable;
		public VkStencilOpState front;
		public VkStencilOpState back;
		public float minDepthBounds;
		public float maxDepthBounds;
	}

	[CRepr]
	public struct VkPipelineColorBlendAttachmentState
	{
		public VkBool32 blendEnable;
		public VkBlendFactor srcColorBlendFactor;
		public VkBlendFactor dstColorBlendFactor;
		public VkBlendOp colorBlendOp;
		public VkBlendFactor srcAlphaBlendFactor;
		public VkBlendFactor dstAlphaBlendFactor;
		public VkBlendOp alphaBlendOp;
		public VkColorComponentFlags colorWriteMask;
	}

	[CRepr]
	public struct VkPipelineColorBlendStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineColorBlendStateCreateFlags flags;
		public VkBool32 logicOpEnable;
		public VkLogicOp logicOp;
		public uint32 attachmentCount;
		public VkPipelineColorBlendAttachmentState* pAttachments;
		public float[4] blendConstants;
	}

	[CRepr]
	public struct VkPipelineDynamicStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineDynamicStateCreateFlags flags;
		public uint32 dynamicStateCount;
		public VkDynamicState* pDynamicStates;
	}

	[CRepr]
	public struct VkGraphicsPipelineCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCreateFlags flags;
		public uint32 stageCount;
		public VkPipelineShaderStageCreateInfo* pStages;
		public VkPipelineVertexInputStateCreateInfo* pVertexInputState;
		public VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
		public VkPipelineTessellationStateCreateInfo* pTessellationState;
		public VkPipelineViewportStateCreateInfo* pViewportState;
		public VkPipelineRasterizationStateCreateInfo* pRasterizationState;
		public VkPipelineMultisampleStateCreateInfo* pMultisampleState;
		public VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
		public VkPipelineColorBlendStateCreateInfo* pColorBlendState;
		public VkPipelineDynamicStateCreateInfo* pDynamicState;
		public VkPipelineLayout layout;
		public VkRenderPass renderPass;
		public uint32 subpass;
		public VkPipeline basePipelineHandle;
		public int32 basePipelineIndex;
	}

	[CRepr]
	public struct VkPushConstantRange
	{
		public VkShaderStageFlags stageFlags;
		public uint32 offset;
		public uint32 size;
	}

	[CRepr]
	public struct VkPipelineLayoutCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineLayoutCreateFlags flags;
		public uint32 setLayoutCount;
		public VkDescriptorSetLayout* pSetLayouts;
		public uint32 pushConstantRangeCount;
		public VkPushConstantRange* pPushConstantRanges;
	}

	[CRepr]
	public struct VkSamplerCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSamplerCreateFlags flags;
		public VkFilter magFilter;
		public VkFilter minFilter;
		public VkSamplerMipmapMode mipmapMode;
		public VkSamplerAddressMode addressModeU;
		public VkSamplerAddressMode addressModeV;
		public VkSamplerAddressMode addressModeW;
		public float mipLodBias;
		public VkBool32 anisotropyEnable;
		public float maxAnisotropy;
		public VkBool32 compareEnable;
		public VkCompareOp compareOp;
		public float minLod;
		public float maxLod;
		public VkBorderColor borderColor;
		public VkBool32 unnormalizedCoordinates;
	}

	[CRepr]
	public struct VkCopyDescriptorSet
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorSet srcSet;
		public uint32 srcBinding;
		public uint32 srcArrayElement;
		public VkDescriptorSet dstSet;
		public uint32 dstBinding;
		public uint32 dstArrayElement;
		public uint32 descriptorCount;
	}

	[CRepr]
	public struct VkDescriptorBufferInfo
	{
		public VkBuffer buffer;
		public VkDeviceSize offset;
		public VkDeviceSize range;
	}

	[CRepr]
	public struct VkDescriptorImageInfo
	{
		public VkSampler sampler;
		public VkImageView imageView;
		public VkImageLayout imageLayout;
	}

	[CRepr]
	public struct VkDescriptorPoolSize
	{
		public VkDescriptorType type;
		public uint32 descriptorCount;
	}

	[CRepr]
	public struct VkDescriptorPoolCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorPoolCreateFlags flags;
		public uint32 maxSets;
		public uint32 poolSizeCount;
		public VkDescriptorPoolSize* pPoolSizes;
	}

	[CRepr]
	public struct VkDescriptorSetAllocateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorPool descriptorPool;
		public uint32 descriptorSetCount;
		public VkDescriptorSetLayout* pSetLayouts;
	}

	[CRepr]
	public struct VkDescriptorSetLayoutBinding
	{
		public uint32 binding;
		public VkDescriptorType descriptorType;
		public uint32 descriptorCount;
		public VkShaderStageFlags stageFlags;
		public VkSampler* pImmutableSamplers;
	}

	[CRepr]
	public struct VkDescriptorSetLayoutCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorSetLayoutCreateFlags flags;
		public uint32 bindingCount;
		public VkDescriptorSetLayoutBinding* pBindings;
	}

	[CRepr]
	public struct VkWriteDescriptorSet
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorSet dstSet;
		public uint32 dstBinding;
		public uint32 dstArrayElement;
		public uint32 descriptorCount;
		public VkDescriptorType descriptorType;
		public VkDescriptorImageInfo* pImageInfo;
		public VkDescriptorBufferInfo* pBufferInfo;
		public VkBufferView* pTexelBufferView;
	}

	[CRepr]
	public struct VkAttachmentDescription
	{
		public VkAttachmentDescriptionFlags flags;
		public VkFormat format;
		public VkSampleCountFlagBits samples;
		public VkAttachmentLoadOp loadOp;
		public VkAttachmentStoreOp storeOp;
		public VkAttachmentLoadOp stencilLoadOp;
		public VkAttachmentStoreOp stencilStoreOp;
		public VkImageLayout initialLayout;
		public VkImageLayout finalLayout;
	}

	[CRepr]
	public struct VkAttachmentReference
	{
		public uint32 attachment;
		public VkImageLayout layout;
	}

	[CRepr]
	public struct VkFramebufferCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFramebufferCreateFlags flags;
		public VkRenderPass renderPass;
		public uint32 attachmentCount;
		public VkImageView* pAttachments;
		public uint32 width;
		public uint32 height;
		public uint32 layers;
	}

	[CRepr]
	public struct VkSubpassDescription
	{
		public VkSubpassDescriptionFlags flags;
		public VkPipelineBindPoint pipelineBindPoint;
		public uint32 inputAttachmentCount;
		public VkAttachmentReference* pInputAttachments;
		public uint32 colorAttachmentCount;
		public VkAttachmentReference* pColorAttachments;
		public VkAttachmentReference* pResolveAttachments;
		public VkAttachmentReference* pDepthStencilAttachment;
		public uint32 preserveAttachmentCount;
		public uint32* pPreserveAttachments;
	}

	[CRepr]
	public struct VkSubpassDependency
	{
		public uint32 srcSubpass;
		public uint32 dstSubpass;
		public VkPipelineStageFlags srcStageMask;
		public VkPipelineStageFlags dstStageMask;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public VkDependencyFlags dependencyFlags;
	}

	[CRepr]
	public struct VkRenderPassCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRenderPassCreateFlags flags;
		public uint32 attachmentCount;
		public VkAttachmentDescription* pAttachments;
		public uint32 subpassCount;
		public VkSubpassDescription* pSubpasses;
		public uint32 dependencyCount;
		public VkSubpassDependency* pDependencies;
	}

	[CRepr]
	public struct VkCommandPoolCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCommandPoolCreateFlags flags;
		public uint32 queueFamilyIndex;
	}

	[CRepr]
	public struct VkCommandBufferAllocateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCommandPool commandPool;
		public VkCommandBufferLevel level;
		public uint32 commandBufferCount;
	}

	[CRepr]
	public struct VkCommandBufferInheritanceInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRenderPass renderPass;
		public uint32 subpass;
		public VkFramebuffer framebuffer;
		public VkBool32 occlusionQueryEnable;
		public VkQueryControlFlags queryFlags;
		public VkQueryPipelineStatisticFlags pipelineStatistics;
	}

	[CRepr]
	public struct VkCommandBufferBeginInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCommandBufferUsageFlags flags;
		public VkCommandBufferInheritanceInfo* pInheritanceInfo;
	}

	[CRepr]
	public struct VkBufferCopy
	{
		public VkDeviceSize srcOffset;
		public VkDeviceSize dstOffset;
		public VkDeviceSize size;
	}

	[CRepr]
	public struct VkImageSubresourceLayers
	{
		public VkImageAspectFlags aspectMask;
		public uint32 mipLevel;
		public uint32 baseArrayLayer;
		public uint32 layerCount;
	}

	[CRepr]
	public struct VkBufferImageCopy
	{
		public VkDeviceSize bufferOffset;
		public uint32 bufferRowLength;
		public uint32 bufferImageHeight;
		public VkImageSubresourceLayers imageSubresource;
		public VkOffset3D imageOffset;
		public VkExtent3D imageExtent;
	}

	[CRepr, Union]
	public struct VkClearColorValue
	{
		public float[4] float32;
		public int32[4] int32;
		public uint32[4] uint32;
	}

	[CRepr]
	public struct VkClearDepthStencilValue
	{
		public float depth;
		public uint32 stencil;
	}

	[CRepr, Union]
	public struct VkClearValue
	{
		public VkClearColorValue color;
		public VkClearDepthStencilValue depthStencil;
	}

	[CRepr]
	public struct VkClearAttachment
	{
		public VkImageAspectFlags aspectMask;
		public uint32 colorAttachment;
		public VkClearValue clearValue;
	}

	[CRepr]
	public struct VkClearRect
	{
		public VkRect2D rect;
		public uint32 baseArrayLayer;
		public uint32 layerCount;
	}

	[CRepr]
	public struct VkImageBlit
	{
		public VkImageSubresourceLayers srcSubresource;
		public VkOffset3D[2] srcOffsets;
		public VkImageSubresourceLayers dstSubresource;
		public VkOffset3D[2] dstOffsets;
	}

	[CRepr]
	public struct VkImageCopy
	{
		public VkImageSubresourceLayers srcSubresource;
		public VkOffset3D srcOffset;
		public VkImageSubresourceLayers dstSubresource;
		public VkOffset3D dstOffset;
		public VkExtent3D extent;
	}

	[CRepr]
	public struct VkImageResolve
	{
		public VkImageSubresourceLayers srcSubresource;
		public VkOffset3D srcOffset;
		public VkImageSubresourceLayers dstSubresource;
		public VkOffset3D dstOffset;
		public VkExtent3D extent;
	}

	[CRepr]
	public struct VkRenderPassBeginInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRenderPass renderPass;
		public VkFramebuffer framebuffer;
		public VkRect2D renderArea;
		public uint32 clearValueCount;
		public VkClearValue* pClearValues;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateInstance(VkInstanceCreateInfo*, VkAllocationCallbacks*, VkInstance*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyInstance(VkInstance, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkEnumeratePhysicalDevices(VkInstance, uint32*, VkPhysicalDevice*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceFeatures(VkPhysicalDevice, VkPhysicalDeviceFeatures*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice, VkFormat, VkFormatProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceProperties(VkPhysicalDevice, VkPhysicalDeviceProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice, uint32*, VkQueueFamilyProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice, VkPhysicalDeviceMemoryProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function PFN_vkVoidFunction PFN_vkGetInstanceProcAddr(VkInstance, c_char*);

	[CallingConvention(VKAPI_CALL)]
	public function PFN_vkVoidFunction PFN_vkGetDeviceProcAddr(VkDevice, c_char*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateDevice(VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, VkDevice*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyDevice(VkDevice, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkEnumerateInstanceExtensionProperties(c_char*, uint32*, VkExtensionProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkEnumerateDeviceExtensionProperties(VkPhysicalDevice, c_char*, uint32*, VkExtensionProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkEnumerateInstanceLayerProperties(uint32*, VkLayerProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkEnumerateDeviceLayerProperties(VkPhysicalDevice, uint32*, VkLayerProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceQueue(VkDevice, uint32, uint32, VkQueue*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkQueueSubmit(VkQueue, uint32, VkSubmitInfo*, VkFence);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkQueueWaitIdle(VkQueue);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkDeviceWaitIdle(VkDevice);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkAllocateMemory(VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VkDeviceMemory*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkFreeMemory(VkDevice, VkDeviceMemory, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkMapMemory(VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, void**);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkUnmapMemory(VkDevice, VkDeviceMemory);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkFlushMappedMemoryRanges(VkDevice, uint32, VkMappedMemoryRange*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkInvalidateMappedMemoryRanges(VkDevice, uint32, VkMappedMemoryRange*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceMemoryCommitment(VkDevice, VkDeviceMemory, VkDeviceSize*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBindBufferMemory(VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBindImageMemory(VkDevice, VkImage, VkDeviceMemory, VkDeviceSize);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetBufferMemoryRequirements(VkDevice, VkBuffer, VkMemoryRequirements*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetImageMemoryRequirements(VkDevice, VkImage, VkMemoryRequirements*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetImageSparseMemoryRequirements(VkDevice, VkImage, uint32*, VkSparseImageMemoryRequirements*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, uint32*, VkSparseImageFormatProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkQueueBindSparse(VkQueue, uint32, VkBindSparseInfo*, VkFence);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateFence(VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyFence(VkDevice, VkFence, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkResetFences(VkDevice, uint32, VkFence*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetFenceStatus(VkDevice, VkFence);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkWaitForFences(VkDevice, uint32, VkFence*, VkBool32, uint64);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateSemaphore(VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroySemaphore(VkDevice, VkSemaphore, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateEvent(VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyEvent(VkDevice, VkEvent, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetEventStatus(VkDevice, VkEvent);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkSetEvent(VkDevice, VkEvent);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkResetEvent(VkDevice, VkEvent);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateQueryPool(VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyQueryPool(VkDevice, VkQueryPool, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetQueryPoolResults(VkDevice, VkQueryPool, uint32, uint32, c_size, void*, VkDeviceSize, VkQueryResultFlags);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateBuffer(VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyBuffer(VkDevice, VkBuffer, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateBufferView(VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyBufferView(VkDevice, VkBufferView, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateImage(VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyImage(VkDevice, VkImage, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetImageSubresourceLayout(VkDevice, VkImage, VkImageSubresource*, VkSubresourceLayout*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateImageView(VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyImageView(VkDevice, VkImageView, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateShaderModule(VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyShaderModule(VkDevice, VkShaderModule, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreatePipelineCache(VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyPipelineCache(VkDevice, VkPipelineCache, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPipelineCacheData(VkDevice, VkPipelineCache, c_size*, void*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkMergePipelineCaches(VkDevice, VkPipelineCache, uint32, VkPipelineCache*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateGraphicsPipelines(VkDevice, VkPipelineCache, uint32, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateComputePipelines(VkDevice, VkPipelineCache, uint32, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyPipeline(VkDevice, VkPipeline, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreatePipelineLayout(VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyPipelineLayout(VkDevice, VkPipelineLayout, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateSampler(VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroySampler(VkDevice, VkSampler, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateDescriptorSetLayout(VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyDescriptorSetLayout(VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateDescriptorPool(VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyDescriptorPool(VkDevice, VkDescriptorPool, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkResetDescriptorPool(VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkAllocateDescriptorSets(VkDevice, VkDescriptorSetAllocateInfo*, VkDescriptorSet*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkFreeDescriptorSets(VkDevice, VkDescriptorPool, uint32, VkDescriptorSet*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkUpdateDescriptorSets(VkDevice, uint32, VkWriteDescriptorSet*, uint32, VkCopyDescriptorSet*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateFramebuffer(VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyFramebuffer(VkDevice, VkFramebuffer, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateRenderPass(VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyRenderPass(VkDevice, VkRenderPass, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetRenderAreaGranularity(VkDevice, VkRenderPass, VkExtent2D*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateCommandPool(VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyCommandPool(VkDevice, VkCommandPool, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkResetCommandPool(VkDevice, VkCommandPool, VkCommandPoolResetFlags);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkAllocateCommandBuffers(VkDevice, VkCommandBufferAllocateInfo*, VkCommandBuffer*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkFreeCommandBuffers(VkDevice, VkCommandPool, uint32, VkCommandBuffer*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBeginCommandBuffer(VkCommandBuffer, VkCommandBufferBeginInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkEndCommandBuffer(VkCommandBuffer);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkResetCommandBuffer(VkCommandBuffer, VkCommandBufferResetFlags);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindPipeline(VkCommandBuffer, VkPipelineBindPoint, VkPipeline);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetViewport(VkCommandBuffer, uint32, uint32, VkViewport*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetScissor(VkCommandBuffer, uint32, uint32, VkRect2D*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetLineWidth(VkCommandBuffer, float);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthBias(VkCommandBuffer, float, float, float);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetBlendConstants(VkCommandBuffer, float[4]);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthBounds(VkCommandBuffer, float, float);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetStencilCompareMask(VkCommandBuffer, VkStencilFaceFlags, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetStencilWriteMask(VkCommandBuffer, VkStencilFaceFlags, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetStencilReference(VkCommandBuffer, VkStencilFaceFlags, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindDescriptorSets(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32, uint32, VkDescriptorSet*, uint32, uint32*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindIndexBuffer(VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindVertexBuffers(VkCommandBuffer, uint32, uint32, VkBuffer*, VkDeviceSize*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDraw(VkCommandBuffer, uint32, uint32, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawIndexed(VkCommandBuffer, uint32, uint32, uint32, int32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawIndirect(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawIndexedIndirect(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDispatch(VkCommandBuffer, uint32, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDispatchIndirect(VkCommandBuffer, VkBuffer, VkDeviceSize);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyBuffer(VkCommandBuffer, VkBuffer, VkBuffer, uint32, VkBufferCopy*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyImage(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32, VkImageCopy*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBlitImage(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32, VkImageBlit*, VkFilter);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyBufferToImage(VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint32, VkBufferImageCopy*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyImageToBuffer(VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint32, VkBufferImageCopy*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdUpdateBuffer(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdFillBuffer(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdClearColorImage(VkCommandBuffer, VkImage, VkImageLayout, VkClearColorValue*, uint32, VkImageSubresourceRange*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdClearDepthStencilImage(VkCommandBuffer, VkImage, VkImageLayout, VkClearDepthStencilValue*, uint32, VkImageSubresourceRange*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdClearAttachments(VkCommandBuffer, uint32, VkClearAttachment*, uint32, VkClearRect*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdResolveImage(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32, VkImageResolve*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetEvent(VkCommandBuffer, VkEvent, VkPipelineStageFlags);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdResetEvent(VkCommandBuffer, VkEvent, VkPipelineStageFlags);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWaitEvents(VkCommandBuffer, uint32, VkEvent*, VkPipelineStageFlags, VkPipelineStageFlags, uint32, VkMemoryBarrier*, uint32, VkBufferMemoryBarrier*, uint32, VkImageMemoryBarrier*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPipelineBarrier(VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint32, VkMemoryBarrier*, uint32, VkBufferMemoryBarrier*, uint32, VkImageMemoryBarrier*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginQuery(VkCommandBuffer, VkQueryPool, uint32, VkQueryControlFlags);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndQuery(VkCommandBuffer, VkQueryPool, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdResetQueryPool(VkCommandBuffer, VkQueryPool, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWriteTimestamp(VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyQueryPoolResults(VkCommandBuffer, VkQueryPool, uint32, uint32, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushConstants(VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint32, uint32, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginRenderPass(VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassContents);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdNextSubpass(VkCommandBuffer, VkSubpassContents);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndRenderPass(VkCommandBuffer);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdExecuteCommands(VkCommandBuffer, uint32, VkCommandBuffer*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateInstance(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkInstance pInstance);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyInstance(VkInstance instance, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, out uint32 pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures pFeatures);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties pFormatProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, out VkImageFormatProperties pImageFormatProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, out uint32 pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties pMemoryProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, c_char* pName);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, c_char* pName);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDevice pDevice);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyDevice(VkDevice device, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkEnumerateInstanceExtensionProperties(c_char* pLayerName, out uint32 pPropertyCount, VkExtensionProperties* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, c_char* pLayerName, out uint32 pPropertyCount, VkExtensionProperties* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkEnumerateInstanceLayerProperties(out uint32 pPropertyCount, VkLayerProperties* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkLayerProperties* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceQueue(VkDevice device, uint32 queueFamilyIndex, uint32 queueIndex, out VkQueue pQueue);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkQueueSubmit(VkQueue queue, uint32 submitCount, VkSubmitInfo* pSubmits, VkFence fence);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkQueueWaitIdle(VkQueue queue);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkDeviceWaitIdle(VkDevice device);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, out VkDeviceMemory pMemory);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkUnmapMemory(VkDevice device, VkDeviceMemory memory);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, out VkDeviceSize pCommittedMemoryInBytes);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, out VkMemoryRequirements pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetImageMemoryRequirements(VkDevice device, VkImage image, out VkMemoryRequirements pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, out uint32 pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, out uint32 pPropertyCount, VkSparseImageFormatProperties* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkQueueBindSparse(VkQueue queue, uint32 bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkFence pFence);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkResetFences(VkDevice device, uint32 fenceCount, VkFence* pFences);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetFenceStatus(VkDevice device, VkFence fence);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkWaitForFences(VkDevice device, uint32 fenceCount, VkFence* pFences, VkBool32 waitAll, uint64 timeout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSemaphore pSemaphore);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkEvent pEvent);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyEvent(VkDevice device, VkEvent event, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetEventStatus(VkDevice device, VkEvent event);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkSetEvent(VkDevice device, VkEvent event);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkResetEvent(VkDevice device, VkEvent event);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkQueryPool pQueryPool);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, c_size dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkBuffer pBuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkBufferView pView);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkImage pImage);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* pSubresource, out VkSubresourceLayout pLayout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkImageView pView);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkShaderModule pShaderModule);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkPipelineCache pPipelineCache);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, out c_size pDataSize, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32 srcCacheCount, VkPipelineCache* pSrcCaches);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, out VkPipeline pPipelines);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, out VkPipeline pPipelines);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkPipelineLayout pPipelineLayout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSampler pSampler);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDescriptorSetLayout pSetLayout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDescriptorPool pDescriptorPool);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, out VkDescriptorSet pDescriptorSets);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32 descriptorSetCount, VkDescriptorSet* pDescriptorSets);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkUpdateDescriptorSets(VkDevice device, uint32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint32 descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkFramebuffer pFramebuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkRenderPass pRenderPass);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, out VkExtent2D pGranularity);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkCommandPool pCommandPool);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, out VkCommandBuffer pCommandBuffers);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32 commandBufferCount, VkCommandBuffer* pCommandBuffers);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkViewport* pViewports);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32 firstScissor, uint32 scissorCount, VkRect2D* pScissors);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, float[4] blendConstants);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 compareMask);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 writeMask);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 reference);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 firstSet, uint32 descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint32 dynamicOffsetCount, uint32* pDynamicOffsets);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDraw(VkCommandBuffer commandBuffer, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 vertexOffset, uint32 firstInstance);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32 regionCount, VkBufferCopy* pRegions);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageCopy* pRegions);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageBlit* pRegions, VkFilter filter);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkBufferImageCopy* pRegions);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32 regionCount, VkBufferImageCopy* pRegions);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32 data);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint32 rangeCount, VkImageSubresourceRange* pRanges);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint32 rangeCount, VkImageSubresourceRange* pRanges);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32 attachmentCount, VkClearAttachment* pAttachments, uint32 rectCount, VkClearRect* pRects);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageResolve* pRegions);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32 eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, VkQueryControlFlags flags);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32 query);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32 offset, uint32 size, void* pValues);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndRenderPass(VkCommandBuffer commandBuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32 commandBufferCount, VkCommandBuffer* pCommandBuffers);

	public struct VkSamplerYcbcrConversion_T;
	public typealias VkSamplerYcbcrConversion = VkSamplerYcbcrConversion_T*;

	public struct VkDescriptorUpdateTemplate_T;
	public typealias VkDescriptorUpdateTemplate = VkDescriptorUpdateTemplate_T*;

	[CRepr, AllowDuplicates]
	public enum VkPointClippingBehavior : c_int
	{
		VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
		VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
		VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0,
		VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1,
		VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkTessellationDomainOrigin : c_int
	{
		VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
		VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
		VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0,
		VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1,
		VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSamplerYcbcrModelConversion : c_int
	{
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0,
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1,
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2,
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3,
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4,
		VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSamplerYcbcrRange : c_int
	{
		VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
		VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
		VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0,
		VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1,
		VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkChromaLocation : c_int
	{
		VK_CHROMA_LOCATION_COSITED_EVEN = 0,
		VK_CHROMA_LOCATION_MIDPOINT = 1,
		VK_CHROMA_LOCATION_COSITED_EVEN_KHR = 0,
		VK_CHROMA_LOCATION_MIDPOINT_KHR = 1,
		VK_CHROMA_LOCATION_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkDescriptorUpdateTemplateType : c_int
	{
		VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
		VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS = 1,
		VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
		VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0,
		VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSubgroupFeatureFlagBits : c_int
	{
		VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
		VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
		VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
		VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
		VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
		VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
		VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
		VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
		VK_SUBGROUP_FEATURE_ROTATE_BIT = 512,
		VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT = 1024,
		VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256,
		VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR = 512,
		VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR = 1024,
		VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkSubgroupFeatureFlags = VkSubgroupFeatureFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkPeerMemoryFeatureFlagBits : c_int
	{
		VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
		VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
		VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
		VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
		VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1,
		VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2,
		VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4,
		VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8,
		VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkPeerMemoryFeatureFlags = VkPeerMemoryFeatureFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkMemoryAllocateFlagBits : c_int
	{
		VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
		VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2,
		VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4,
		VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1,
		VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = 2,
		VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4,
		VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkMemoryAllocateFlags = VkMemoryAllocateFlagBits;

	public typealias VkCommandPoolTrimFlags = VkFlags;

	public typealias VkDescriptorUpdateTemplateCreateFlags = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkExternalMemoryHandleTypeFlagBits : c_int
	{
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = 16384,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkExternalMemoryHandleTypeFlags = VkExternalMemoryHandleTypeFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkExternalMemoryFeatureFlagBits : c_int
	{
		VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
		VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
		VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
		VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1,
		VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2,
		VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4,
		VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkExternalMemoryFeatureFlags = VkExternalMemoryFeatureFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkExternalFenceHandleTypeFlagBits : c_int
	{
		VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
		VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
		VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
		VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
		VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
		VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2,
		VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4,
		VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8,
		VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkExternalFenceHandleTypeFlags = VkExternalFenceHandleTypeFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkExternalFenceFeatureFlagBits : c_int
	{
		VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
		VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
		VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1,
		VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2,
		VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkExternalFenceFeatureFlags = VkExternalFenceFeatureFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkFenceImportFlagBits : c_int
	{
		VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
		VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = 1,
		VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkFenceImportFlags = VkFenceImportFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkSemaphoreImportFlagBits : c_int
	{
		VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
		VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1,
		VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkSemaphoreImportFlags = VkSemaphoreImportFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkExternalSemaphoreHandleTypeFlagBits : c_int
	{
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = 8,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16,
		VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkExternalSemaphoreHandleTypeFlags = VkExternalSemaphoreHandleTypeFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkExternalSemaphoreFeatureFlagBits : c_int
	{
		VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
		VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
		VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1,
		VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2,
		VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkExternalSemaphoreFeatureFlags = VkExternalSemaphoreFeatureFlagBits;

	[CRepr]
	public struct VkPhysicalDeviceSubgroupProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 subgroupSize;
		public VkShaderStageFlags supportedStages;
		public VkSubgroupFeatureFlags supportedOperations;
		public VkBool32 quadOperationsInAllStages;
	}

	[CRepr]
	public struct VkBindBufferMemoryInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBuffer buffer;
		public VkDeviceMemory memory;
		public VkDeviceSize memoryOffset;
	}

	[CRepr]
	public struct VkBindImageMemoryInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
		public VkDeviceMemory memory;
		public VkDeviceSize memoryOffset;
	}

	[CRepr]
	public struct VkPhysicalDevice16BitStorageFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 storageBuffer16BitAccess;
		public VkBool32 uniformAndStorageBuffer16BitAccess;
		public VkBool32 storagePushConstant16;
		public VkBool32 storageInputOutput16;
	}

	[CRepr]
	public struct VkMemoryDedicatedRequirements
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 prefersDedicatedAllocation;
		public VkBool32 requiresDedicatedAllocation;
	}

	[CRepr]
	public struct VkMemoryDedicatedAllocateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
		public VkBuffer buffer;
	}

	[CRepr]
	public struct VkMemoryAllocateFlagsInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkMemoryAllocateFlags flags;
		public uint32 deviceMask;
	}

	[CRepr]
	public struct VkDeviceGroupRenderPassBeginInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 deviceMask;
		public uint32 deviceRenderAreaCount;
		public VkRect2D* pDeviceRenderAreas;
	}

	[CRepr]
	public struct VkDeviceGroupCommandBufferBeginInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 deviceMask;
	}

	[CRepr]
	public struct VkDeviceGroupSubmitInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 waitSemaphoreCount;
		public uint32* pWaitSemaphoreDeviceIndices;
		public uint32 commandBufferCount;
		public uint32* pCommandBufferDeviceMasks;
		public uint32 signalSemaphoreCount;
		public uint32* pSignalSemaphoreDeviceIndices;
	}

	[CRepr]
	public struct VkDeviceGroupBindSparseInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 resourceDeviceIndex;
		public uint32 memoryDeviceIndex;
	}

	[CRepr]
	public struct VkBindBufferMemoryDeviceGroupInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 deviceIndexCount;
		public uint32* pDeviceIndices;
	}

	[CRepr]
	public struct VkBindImageMemoryDeviceGroupInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 deviceIndexCount;
		public uint32* pDeviceIndices;
		public uint32 splitInstanceBindRegionCount;
		public VkRect2D* pSplitInstanceBindRegions;
	}

	[CRepr]
	public struct VkPhysicalDeviceGroupProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 physicalDeviceCount;
		public VkPhysicalDevice[32] physicalDevices;
		public VkBool32 subsetAllocation;
	}

	[CRepr]
	public struct VkDeviceGroupDeviceCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 physicalDeviceCount;
		public VkPhysicalDevice* pPhysicalDevices;
	}

	[CRepr]
	public struct VkBufferMemoryRequirementsInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBuffer buffer;
	}

	[CRepr]
	public struct VkImageMemoryRequirementsInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
	}

	[CRepr]
	public struct VkImageSparseMemoryRequirementsInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
	}

	[CRepr]
	public struct VkMemoryRequirements2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkMemoryRequirements memoryRequirements;
	}

	[CRepr]
	public struct VkSparseImageMemoryRequirements2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSparseImageMemoryRequirements memoryRequirements;
	}

	[CRepr]
	public struct VkPhysicalDeviceFeatures2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPhysicalDeviceFeatures features;
	}

	[CRepr]
	public struct VkPhysicalDeviceProperties2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPhysicalDeviceProperties properties;
	}

	[CRepr]
	public struct VkFormatProperties2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFormatProperties formatProperties;
	}

	[CRepr]
	public struct VkImageFormatProperties2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageFormatProperties imageFormatProperties;
	}

	[CRepr]
	public struct VkPhysicalDeviceImageFormatInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFormat format;
		public VkImageType type;
		public VkImageTiling tiling;
		public VkImageUsageFlags usage;
		public VkImageCreateFlags flags;
	}

	[CRepr]
	public struct VkQueueFamilyProperties2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkQueueFamilyProperties queueFamilyProperties;
	}

	[CRepr]
	public struct VkPhysicalDeviceMemoryProperties2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPhysicalDeviceMemoryProperties memoryProperties;
	}

	[CRepr]
	public struct VkSparseImageFormatProperties2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSparseImageFormatProperties properties;
	}

	[CRepr]
	public struct VkPhysicalDeviceSparseImageFormatInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFormat format;
		public VkImageType type;
		public VkSampleCountFlagBits samples;
		public VkImageUsageFlags usage;
		public VkImageTiling tiling;
	}

	[CRepr]
	public struct VkPhysicalDevicePointClippingProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPointClippingBehavior pointClippingBehavior;
	}

	[CRepr]
	public struct VkInputAttachmentAspectReference
	{
		public uint32 subpass;
		public uint32 inputAttachmentIndex;
		public VkImageAspectFlags aspectMask;
	}

	[CRepr]
	public struct VkRenderPassInputAttachmentAspectCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 aspectReferenceCount;
		public VkInputAttachmentAspectReference* pAspectReferences;
	}

	[CRepr]
	public struct VkImageViewUsageCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageUsageFlags usage;
	}

	[CRepr]
	public struct VkPipelineTessellationDomainOriginStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkTessellationDomainOrigin domainOrigin;
	}

	[CRepr]
	public struct VkRenderPassMultiviewCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 subpassCount;
		public uint32* pViewMasks;
		public uint32 dependencyCount;
		public int32* pViewOffsets;
		public uint32 correlationMaskCount;
		public uint32* pCorrelationMasks;
	}

	[CRepr]
	public struct VkPhysicalDeviceMultiviewFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 multiview;
		public VkBool32 multiviewGeometryShader;
		public VkBool32 multiviewTessellationShader;
	}

	[CRepr]
	public struct VkPhysicalDeviceMultiviewProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxMultiviewViewCount;
		public uint32 maxMultiviewInstanceIndex;
	}

	[CRepr]
	public struct VkPhysicalDeviceVariablePointersFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 variablePointersStorageBuffer;
		public VkBool32 variablePointers;
	}

	public typealias VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;

	[CRepr]
	public struct VkPhysicalDeviceProtectedMemoryFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 protectedMemory;
	}

	[CRepr]
	public struct VkPhysicalDeviceProtectedMemoryProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 protectedNoFault;
	}

	[CRepr]
	public struct VkDeviceQueueInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceQueueCreateFlags flags;
		public uint32 queueFamilyIndex;
		public uint32 queueIndex;
	}

	[CRepr]
	public struct VkProtectedSubmitInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 protectedSubmit;
	}

	[CRepr]
	public struct VkSamplerYcbcrConversionCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFormat format;
		public VkSamplerYcbcrModelConversion ycbcrModel;
		public VkSamplerYcbcrRange ycbcrRange;
		public VkComponentMapping components;
		public VkChromaLocation xChromaOffset;
		public VkChromaLocation yChromaOffset;
		public VkFilter chromaFilter;
		public VkBool32 forceExplicitReconstruction;
	}

	[CRepr]
	public struct VkSamplerYcbcrConversionInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSamplerYcbcrConversion conversion;
	}

	[CRepr]
	public struct VkBindImagePlaneMemoryInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageAspectFlagBits planeAspect;
	}

	[CRepr]
	public struct VkImagePlaneMemoryRequirementsInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageAspectFlagBits planeAspect;
	}

	[CRepr]
	public struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 samplerYcbcrConversion;
	}

	[CRepr]
	public struct VkSamplerYcbcrConversionImageFormatProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 combinedImageSamplerDescriptorCount;
	}

	[CRepr]
	public struct VkDescriptorUpdateTemplateEntry
	{
		public uint32 dstBinding;
		public uint32 dstArrayElement;
		public uint32 descriptorCount;
		public VkDescriptorType descriptorType;
		public c_size offset;
		public c_size stride;
	}

	[CRepr]
	public struct VkDescriptorUpdateTemplateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorUpdateTemplateCreateFlags flags;
		public uint32 descriptorUpdateEntryCount;
		public VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
		public VkDescriptorUpdateTemplateType templateType;
		public VkDescriptorSetLayout descriptorSetLayout;
		public VkPipelineBindPoint pipelineBindPoint;
		public VkPipelineLayout pipelineLayout;
		public uint32 set;
	}

	[CRepr]
	public struct VkExternalMemoryProperties
	{
		public VkExternalMemoryFeatureFlags externalMemoryFeatures;
		public VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
		public VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
	}

	[CRepr]
	public struct VkPhysicalDeviceExternalImageFormatInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlagBits handleType;
	}

	[CRepr]
	public struct VkExternalImageFormatProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryProperties externalMemoryProperties;
	}

	[CRepr]
	public struct VkPhysicalDeviceExternalBufferInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBufferCreateFlags flags;
		public VkBufferUsageFlags usage;
		public VkExternalMemoryHandleTypeFlagBits handleType;
	}

	[CRepr]
	public struct VkExternalBufferProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryProperties externalMemoryProperties;
	}

	[CRepr]
	public struct VkPhysicalDeviceIDProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint8[16] deviceUUID;
		public uint8[16] driverUUID;
		public uint8[8] deviceLUID;
		public uint32 deviceNodeMask;
		public VkBool32 deviceLUIDValid;
	}

	[CRepr]
	public struct VkExternalMemoryImageCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlags handleTypes;
	}

	[CRepr]
	public struct VkExternalMemoryBufferCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlags handleTypes;
	}

	[CRepr]
	public struct VkExportMemoryAllocateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlags handleTypes;
	}

	[CRepr]
	public struct VkPhysicalDeviceExternalFenceInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalFenceHandleTypeFlagBits handleType;
	}

	[CRepr]
	public struct VkExternalFenceProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
		public VkExternalFenceHandleTypeFlags compatibleHandleTypes;
		public VkExternalFenceFeatureFlags externalFenceFeatures;
	}

	[CRepr]
	public struct VkExportFenceCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalFenceHandleTypeFlags handleTypes;
	}

	[CRepr]
	public struct VkExportSemaphoreCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalSemaphoreHandleTypeFlags handleTypes;
	}

	[CRepr]
	public struct VkPhysicalDeviceExternalSemaphoreInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalSemaphoreHandleTypeFlagBits handleType;
	}

	[CRepr]
	public struct VkExternalSemaphoreProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
		public VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
		public VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;
	}

	[CRepr]
	public struct VkPhysicalDeviceMaintenance3Properties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxPerSetDescriptors;
		public VkDeviceSize maxMemoryAllocationSize;
	}

	[CRepr]
	public struct VkDescriptorSetLayoutSupport
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 supported;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderDrawParametersFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderDrawParameters;
	}

	public typealias VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkEnumerateInstanceVersion(uint32*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBindBufferMemory2(VkDevice, uint32, VkBindBufferMemoryInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBindImageMemory2(VkDevice, uint32, VkBindImageMemoryInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceGroupPeerMemoryFeatures(VkDevice, uint32, uint32, uint32, VkPeerMemoryFeatureFlags*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDeviceMask(VkCommandBuffer, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDispatchBase(VkCommandBuffer, uint32, uint32, uint32, uint32, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkEnumeratePhysicalDeviceGroups(VkInstance, uint32*, VkPhysicalDeviceGroupProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetImageMemoryRequirements2(VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetBufferMemoryRequirements2(VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetImageSparseMemoryRequirements2(VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint32*, VkSparseImageMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceFeatures2(VkPhysicalDevice, VkPhysicalDeviceFeatures2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceProperties2(VkPhysicalDevice, VkPhysicalDeviceProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice, VkFormat, VkFormatProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice, uint32*, VkQueueFamilyProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint32*, VkSparseImageFormatProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkTrimCommandPool(VkDevice, VkCommandPool, VkCommandPoolTrimFlags);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceQueue2(VkDevice, VkDeviceQueueInfo2*, VkQueue*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateSamplerYcbcrConversion(VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroySamplerYcbcrConversion(VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateDescriptorUpdateTemplate(VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyDescriptorUpdateTemplate(VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkUpdateDescriptorSetWithTemplate(VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDescriptorSetLayoutSupport(VkDevice, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkEnumerateInstanceVersion(out uint32 pApiVersion);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBindBufferMemory2(VkDevice device, uint32 bindInfoCount, VkBindBufferMemoryInfo* pBindInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBindImageMemory2(VkDevice device, uint32 bindInfoCount, VkBindImageMemoryInfo* pBindInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32 heapIndex, uint32 localDeviceIndex, uint32 remoteDeviceIndex, out VkPeerMemoryFeatureFlags pPeerMemoryFeatures);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32 deviceMask);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32 baseGroupX, uint32 baseGroupY, uint32 baseGroupZ, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, out uint32 pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, out uint32 pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 pFeatures);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 pFormatProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, out VkImageFormatProperties2 pImageFormatProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, out uint32 pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 pMemoryProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, out uint32 pPropertyCount, VkSparseImageFormatProperties2* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, out VkQueue pQueue);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSamplerYcbcrConversion pYcbcrConversion);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDescriptorUpdateTemplate pDescriptorUpdateTemplate);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, out VkExternalBufferProperties pExternalBufferProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, out VkExternalFenceProperties pExternalFenceProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, out VkExternalSemaphoreProperties pExternalSemaphoreProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, out VkDescriptorSetLayoutSupport pSupport);

	[CRepr, AllowDuplicates]
	public enum VkDriverId : c_int
	{
		VK_DRIVER_ID_AMD_PROPRIETARY = 1,
		VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
		VK_DRIVER_ID_MESA_RADV = 3,
		VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
		VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
		VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
		VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
		VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
		VK_DRIVER_ID_ARM_PROPRIETARY = 9,
		VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
		VK_DRIVER_ID_GGP_PROPRIETARY = 11,
		VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
		VK_DRIVER_ID_MESA_LLVMPIPE = 13,
		VK_DRIVER_ID_MOLTENVK = 14,
		VK_DRIVER_ID_COREAVI_PROPRIETARY = 15,
		VK_DRIVER_ID_JUICE_PROPRIETARY = 16,
		VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17,
		VK_DRIVER_ID_MESA_TURNIP = 18,
		VK_DRIVER_ID_MESA_V3DV = 19,
		VK_DRIVER_ID_MESA_PANVK = 20,
		VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21,
		VK_DRIVER_ID_MESA_VENUS = 22,
		VK_DRIVER_ID_MESA_DOZEN = 23,
		VK_DRIVER_ID_MESA_NVK = 24,
		VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25,
		VK_DRIVER_ID_MESA_HONEYKRISP = 26,
		VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN = 27,
		VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1,
		VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2,
		VK_DRIVER_ID_MESA_RADV_KHR = 3,
		VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4,
		VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5,
		VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6,
		VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7,
		VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8,
		VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9,
		VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10,
		VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11,
		VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12,
		VK_DRIVER_ID_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkShaderFloatControlsIndependence : c_int
	{
		VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
		VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
		VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
		VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0,
		VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1,
		VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2,
		VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSamplerReductionMode : c_int
	{
		VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
		VK_SAMPLER_REDUCTION_MODE_MIN = 1,
		VK_SAMPLER_REDUCTION_MODE_MAX = 2,
		VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = 1000521000,
		VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0,
		VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1,
		VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2,
		VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSemaphoreType : c_int
	{
		VK_SEMAPHORE_TYPE_BINARY = 0,
		VK_SEMAPHORE_TYPE_TIMELINE = 1,
		VK_SEMAPHORE_TYPE_BINARY_KHR = 0,
		VK_SEMAPHORE_TYPE_TIMELINE_KHR = 1,
		VK_SEMAPHORE_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkResolveModeFlagBits : c_int
	{
		VK_RESOLVE_MODE_NONE = 0,
		VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1,
		VK_RESOLVE_MODE_AVERAGE_BIT = 2,
		VK_RESOLVE_MODE_MIN_BIT = 4,
		VK_RESOLVE_MODE_MAX_BIT = 8,
		VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = 16,
		VK_RESOLVE_MODE_NONE_KHR = 0,
		VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1,
		VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2,
		VK_RESOLVE_MODE_MIN_BIT_KHR = 4,
		VK_RESOLVE_MODE_MAX_BIT_KHR = 8,
		VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkResolveModeFlags = VkResolveModeFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkDescriptorBindingFlagBits : c_int
	{
		VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1,
		VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2,
		VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4,
		VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8,
		VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1,
		VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2,
		VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4,
		VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8,
		VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkDescriptorBindingFlags = VkDescriptorBindingFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkSemaphoreWaitFlagBits : c_int
	{
		VK_SEMAPHORE_WAIT_ANY_BIT = 1,
		VK_SEMAPHORE_WAIT_ANY_BIT_KHR = 1,
		VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkSemaphoreWaitFlags = VkSemaphoreWaitFlagBits;

	[CRepr]
	public struct VkPhysicalDeviceVulkan11Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 storageBuffer16BitAccess;
		public VkBool32 uniformAndStorageBuffer16BitAccess;
		public VkBool32 storagePushConstant16;
		public VkBool32 storageInputOutput16;
		public VkBool32 multiview;
		public VkBool32 multiviewGeometryShader;
		public VkBool32 multiviewTessellationShader;
		public VkBool32 variablePointersStorageBuffer;
		public VkBool32 variablePointers;
		public VkBool32 protectedMemory;
		public VkBool32 samplerYcbcrConversion;
		public VkBool32 shaderDrawParameters;
	}

	[CRepr]
	public struct VkPhysicalDeviceVulkan11Properties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint8[16] deviceUUID;
		public uint8[16] driverUUID;
		public uint8[8] deviceLUID;
		public uint32 deviceNodeMask;
		public VkBool32 deviceLUIDValid;
		public uint32 subgroupSize;
		public VkShaderStageFlags subgroupSupportedStages;
		public VkSubgroupFeatureFlags subgroupSupportedOperations;
		public VkBool32 subgroupQuadOperationsInAllStages;
		public VkPointClippingBehavior pointClippingBehavior;
		public uint32 maxMultiviewViewCount;
		public uint32 maxMultiviewInstanceIndex;
		public VkBool32 protectedNoFault;
		public uint32 maxPerSetDescriptors;
		public VkDeviceSize maxMemoryAllocationSize;
	}

	[CRepr]
	public struct VkPhysicalDeviceVulkan12Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 samplerMirrorClampToEdge;
		public VkBool32 drawIndirectCount;
		public VkBool32 storageBuffer8BitAccess;
		public VkBool32 uniformAndStorageBuffer8BitAccess;
		public VkBool32 storagePushConstant8;
		public VkBool32 shaderBufferInt64Atomics;
		public VkBool32 shaderSharedInt64Atomics;
		public VkBool32 shaderFloat16;
		public VkBool32 shaderInt8;
		public VkBool32 descriptorIndexing;
		public VkBool32 shaderInputAttachmentArrayDynamicIndexing;
		public VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
		public VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
		public VkBool32 shaderUniformBufferArrayNonUniformIndexing;
		public VkBool32 shaderSampledImageArrayNonUniformIndexing;
		public VkBool32 shaderStorageBufferArrayNonUniformIndexing;
		public VkBool32 shaderStorageImageArrayNonUniformIndexing;
		public VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
		public VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
		public VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
		public VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
		public VkBool32 descriptorBindingSampledImageUpdateAfterBind;
		public VkBool32 descriptorBindingStorageImageUpdateAfterBind;
		public VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
		public VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
		public VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
		public VkBool32 descriptorBindingUpdateUnusedWhilePending;
		public VkBool32 descriptorBindingPartiallyBound;
		public VkBool32 descriptorBindingVariableDescriptorCount;
		public VkBool32 runtimeDescriptorArray;
		public VkBool32 samplerFilterMinmax;
		public VkBool32 scalarBlockLayout;
		public VkBool32 imagelessFramebuffer;
		public VkBool32 uniformBufferStandardLayout;
		public VkBool32 shaderSubgroupExtendedTypes;
		public VkBool32 separateDepthStencilLayouts;
		public VkBool32 hostQueryReset;
		public VkBool32 timelineSemaphore;
		public VkBool32 bufferDeviceAddress;
		public VkBool32 bufferDeviceAddressCaptureReplay;
		public VkBool32 bufferDeviceAddressMultiDevice;
		public VkBool32 vulkanMemoryModel;
		public VkBool32 vulkanMemoryModelDeviceScope;
		public VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
		public VkBool32 shaderOutputViewportIndex;
		public VkBool32 shaderOutputLayer;
		public VkBool32 subgroupBroadcastDynamicId;
	}

	[CRepr]
	public struct VkConformanceVersion
	{
		public uint8 major;
		public uint8 minor;
		public uint8 subminor;
		public uint8 patch;
	}

	[CRepr]
	public struct VkPhysicalDeviceVulkan12Properties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDriverId driverID;
		public c_char[256] driverName;
		public c_char[256] driverInfo;
		public VkConformanceVersion conformanceVersion;
		public VkShaderFloatControlsIndependence denormBehaviorIndependence;
		public VkShaderFloatControlsIndependence roundingModeIndependence;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat16;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat32;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat64;
		public VkBool32 shaderDenormPreserveFloat16;
		public VkBool32 shaderDenormPreserveFloat32;
		public VkBool32 shaderDenormPreserveFloat64;
		public VkBool32 shaderDenormFlushToZeroFloat16;
		public VkBool32 shaderDenormFlushToZeroFloat32;
		public VkBool32 shaderDenormFlushToZeroFloat64;
		public VkBool32 shaderRoundingModeRTEFloat16;
		public VkBool32 shaderRoundingModeRTEFloat32;
		public VkBool32 shaderRoundingModeRTEFloat64;
		public VkBool32 shaderRoundingModeRTZFloat16;
		public VkBool32 shaderRoundingModeRTZFloat32;
		public VkBool32 shaderRoundingModeRTZFloat64;
		public uint32 maxUpdateAfterBindDescriptorsInAllPools;
		public VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
		public VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
		public VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
		public VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
		public VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
		public VkBool32 robustBufferAccessUpdateAfterBind;
		public VkBool32 quadDivergentImplicitLod;
		public uint32 maxPerStageDescriptorUpdateAfterBindSamplers;
		public uint32 maxPerStageDescriptorUpdateAfterBindUniformBuffers;
		public uint32 maxPerStageDescriptorUpdateAfterBindStorageBuffers;
		public uint32 maxPerStageDescriptorUpdateAfterBindSampledImages;
		public uint32 maxPerStageDescriptorUpdateAfterBindStorageImages;
		public uint32 maxPerStageDescriptorUpdateAfterBindInputAttachments;
		public uint32 maxPerStageUpdateAfterBindResources;
		public uint32 maxDescriptorSetUpdateAfterBindSamplers;
		public uint32 maxDescriptorSetUpdateAfterBindUniformBuffers;
		public uint32 maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
		public uint32 maxDescriptorSetUpdateAfterBindStorageBuffers;
		public uint32 maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
		public uint32 maxDescriptorSetUpdateAfterBindSampledImages;
		public uint32 maxDescriptorSetUpdateAfterBindStorageImages;
		public uint32 maxDescriptorSetUpdateAfterBindInputAttachments;
		public VkResolveModeFlags supportedDepthResolveModes;
		public VkResolveModeFlags supportedStencilResolveModes;
		public VkBool32 independentResolveNone;
		public VkBool32 independentResolve;
		public VkBool32 filterMinmaxSingleComponentFormats;
		public VkBool32 filterMinmaxImageComponentMapping;
		public uint64 maxTimelineSemaphoreValueDifference;
		public VkSampleCountFlags framebufferIntegerColorSampleCounts;
	}

	[CRepr]
	public struct VkImageFormatListCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 viewFormatCount;
		public VkFormat* pViewFormats;
	}

	[CRepr]
	public struct VkAttachmentDescription2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAttachmentDescriptionFlags flags;
		public VkFormat format;
		public VkSampleCountFlagBits samples;
		public VkAttachmentLoadOp loadOp;
		public VkAttachmentStoreOp storeOp;
		public VkAttachmentLoadOp stencilLoadOp;
		public VkAttachmentStoreOp stencilStoreOp;
		public VkImageLayout initialLayout;
		public VkImageLayout finalLayout;
	}

	[CRepr]
	public struct VkAttachmentReference2
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 attachment;
		public VkImageLayout layout;
		public VkImageAspectFlags aspectMask;
	}

	[CRepr]
	public struct VkSubpassDescription2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSubpassDescriptionFlags flags;
		public VkPipelineBindPoint pipelineBindPoint;
		public uint32 viewMask;
		public uint32 inputAttachmentCount;
		public VkAttachmentReference2* pInputAttachments;
		public uint32 colorAttachmentCount;
		public VkAttachmentReference2* pColorAttachments;
		public VkAttachmentReference2* pResolveAttachments;
		public VkAttachmentReference2* pDepthStencilAttachment;
		public uint32 preserveAttachmentCount;
		public uint32* pPreserveAttachments;
	}

	[CRepr]
	public struct VkSubpassDependency2
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 srcSubpass;
		public uint32 dstSubpass;
		public VkPipelineStageFlags srcStageMask;
		public VkPipelineStageFlags dstStageMask;
		public VkAccessFlags srcAccessMask;
		public VkAccessFlags dstAccessMask;
		public VkDependencyFlags dependencyFlags;
		public int32 viewOffset;
	}

	[CRepr]
	public struct VkRenderPassCreateInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRenderPassCreateFlags flags;
		public uint32 attachmentCount;
		public VkAttachmentDescription2* pAttachments;
		public uint32 subpassCount;
		public VkSubpassDescription2* pSubpasses;
		public uint32 dependencyCount;
		public VkSubpassDependency2* pDependencies;
		public uint32 correlatedViewMaskCount;
		public uint32* pCorrelatedViewMasks;
	}

	[CRepr]
	public struct VkSubpassBeginInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSubpassContents contents;
	}

	[CRepr]
	public struct VkSubpassEndInfo
	{
		public VkStructureType sType;
		public void* pNext;
	}

	[CRepr]
	public struct VkPhysicalDevice8BitStorageFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 storageBuffer8BitAccess;
		public VkBool32 uniformAndStorageBuffer8BitAccess;
		public VkBool32 storagePushConstant8;
	}

	[CRepr]
	public struct VkPhysicalDeviceDriverProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDriverId driverID;
		public c_char[256] driverName;
		public c_char[256] driverInfo;
		public VkConformanceVersion conformanceVersion;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderAtomicInt64Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderBufferInt64Atomics;
		public VkBool32 shaderSharedInt64Atomics;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderFloat16Int8Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderFloat16;
		public VkBool32 shaderInt8;
	}

	[CRepr]
	public struct VkPhysicalDeviceFloatControlsProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderFloatControlsIndependence denormBehaviorIndependence;
		public VkShaderFloatControlsIndependence roundingModeIndependence;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat16;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat32;
		public VkBool32 shaderSignedZeroInfNanPreserveFloat64;
		public VkBool32 shaderDenormPreserveFloat16;
		public VkBool32 shaderDenormPreserveFloat32;
		public VkBool32 shaderDenormPreserveFloat64;
		public VkBool32 shaderDenormFlushToZeroFloat16;
		public VkBool32 shaderDenormFlushToZeroFloat32;
		public VkBool32 shaderDenormFlushToZeroFloat64;
		public VkBool32 shaderRoundingModeRTEFloat16;
		public VkBool32 shaderRoundingModeRTEFloat32;
		public VkBool32 shaderRoundingModeRTEFloat64;
		public VkBool32 shaderRoundingModeRTZFloat16;
		public VkBool32 shaderRoundingModeRTZFloat32;
		public VkBool32 shaderRoundingModeRTZFloat64;
	}

	[CRepr]
	public struct VkDescriptorSetLayoutBindingFlagsCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 bindingCount;
		public VkDescriptorBindingFlags* pBindingFlags;
	}

	[CRepr]
	public struct VkPhysicalDeviceDescriptorIndexingFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderInputAttachmentArrayDynamicIndexing;
		public VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
		public VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
		public VkBool32 shaderUniformBufferArrayNonUniformIndexing;
		public VkBool32 shaderSampledImageArrayNonUniformIndexing;
		public VkBool32 shaderStorageBufferArrayNonUniformIndexing;
		public VkBool32 shaderStorageImageArrayNonUniformIndexing;
		public VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
		public VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
		public VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
		public VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
		public VkBool32 descriptorBindingSampledImageUpdateAfterBind;
		public VkBool32 descriptorBindingStorageImageUpdateAfterBind;
		public VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
		public VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
		public VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
		public VkBool32 descriptorBindingUpdateUnusedWhilePending;
		public VkBool32 descriptorBindingPartiallyBound;
		public VkBool32 descriptorBindingVariableDescriptorCount;
		public VkBool32 runtimeDescriptorArray;
	}

	[CRepr]
	public struct VkPhysicalDeviceDescriptorIndexingProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxUpdateAfterBindDescriptorsInAllPools;
		public VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
		public VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
		public VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
		public VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
		public VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
		public VkBool32 robustBufferAccessUpdateAfterBind;
		public VkBool32 quadDivergentImplicitLod;
		public uint32 maxPerStageDescriptorUpdateAfterBindSamplers;
		public uint32 maxPerStageDescriptorUpdateAfterBindUniformBuffers;
		public uint32 maxPerStageDescriptorUpdateAfterBindStorageBuffers;
		public uint32 maxPerStageDescriptorUpdateAfterBindSampledImages;
		public uint32 maxPerStageDescriptorUpdateAfterBindStorageImages;
		public uint32 maxPerStageDescriptorUpdateAfterBindInputAttachments;
		public uint32 maxPerStageUpdateAfterBindResources;
		public uint32 maxDescriptorSetUpdateAfterBindSamplers;
		public uint32 maxDescriptorSetUpdateAfterBindUniformBuffers;
		public uint32 maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
		public uint32 maxDescriptorSetUpdateAfterBindStorageBuffers;
		public uint32 maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
		public uint32 maxDescriptorSetUpdateAfterBindSampledImages;
		public uint32 maxDescriptorSetUpdateAfterBindStorageImages;
		public uint32 maxDescriptorSetUpdateAfterBindInputAttachments;
	}

	[CRepr]
	public struct VkDescriptorSetVariableDescriptorCountAllocateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 descriptorSetCount;
		public uint32* pDescriptorCounts;
	}

	[CRepr]
	public struct VkDescriptorSetVariableDescriptorCountLayoutSupport
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxVariableDescriptorCount;
	}

	[CRepr]
	public struct VkSubpassDescriptionDepthStencilResolve
	{
		public VkStructureType sType;
		public void* pNext;
		public VkResolveModeFlagBits depthResolveMode;
		public VkResolveModeFlagBits stencilResolveMode;
		public VkAttachmentReference2* pDepthStencilResolveAttachment;
	}

	[CRepr]
	public struct VkPhysicalDeviceDepthStencilResolveProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkResolveModeFlags supportedDepthResolveModes;
		public VkResolveModeFlags supportedStencilResolveModes;
		public VkBool32 independentResolveNone;
		public VkBool32 independentResolve;
	}

	[CRepr]
	public struct VkPhysicalDeviceScalarBlockLayoutFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 scalarBlockLayout;
	}

	[CRepr]
	public struct VkImageStencilUsageCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageUsageFlags stencilUsage;
	}

	[CRepr]
	public struct VkSamplerReductionModeCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSamplerReductionMode reductionMode;
	}

	[CRepr]
	public struct VkPhysicalDeviceSamplerFilterMinmaxProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 filterMinmaxSingleComponentFormats;
		public VkBool32 filterMinmaxImageComponentMapping;
	}

	[CRepr]
	public struct VkPhysicalDeviceVulkanMemoryModelFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 vulkanMemoryModel;
		public VkBool32 vulkanMemoryModelDeviceScope;
		public VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
	}

	[CRepr]
	public struct VkPhysicalDeviceImagelessFramebufferFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 imagelessFramebuffer;
	}

	[CRepr]
	public struct VkFramebufferAttachmentImageInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageCreateFlags flags;
		public VkImageUsageFlags usage;
		public uint32 width;
		public uint32 height;
		public uint32 layerCount;
		public uint32 viewFormatCount;
		public VkFormat* pViewFormats;
	}

	[CRepr]
	public struct VkFramebufferAttachmentsCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 attachmentImageInfoCount;
		public VkFramebufferAttachmentImageInfo* pAttachmentImageInfos;
	}

	[CRepr]
	public struct VkRenderPassAttachmentBeginInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 attachmentCount;
		public VkImageView* pAttachments;
	}

	[CRepr]
	public struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 uniformBufferStandardLayout;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderSubgroupExtendedTypes;
	}

	[CRepr]
	public struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 separateDepthStencilLayouts;
	}

	[CRepr]
	public struct VkAttachmentReferenceStencilLayout
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageLayout stencilLayout;
	}

	[CRepr]
	public struct VkAttachmentDescriptionStencilLayout
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageLayout stencilInitialLayout;
		public VkImageLayout stencilFinalLayout;
	}

	[CRepr]
	public struct VkPhysicalDeviceHostQueryResetFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 hostQueryReset;
	}

	[CRepr]
	public struct VkPhysicalDeviceTimelineSemaphoreFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 timelineSemaphore;
	}

	[CRepr]
	public struct VkPhysicalDeviceTimelineSemaphoreProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 maxTimelineSemaphoreValueDifference;
	}

	[CRepr]
	public struct VkSemaphoreTypeCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSemaphoreType semaphoreType;
		public uint64 initialValue;
	}

	[CRepr]
	public struct VkTimelineSemaphoreSubmitInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 waitSemaphoreValueCount;
		public uint64* pWaitSemaphoreValues;
		public uint32 signalSemaphoreValueCount;
		public uint64* pSignalSemaphoreValues;
	}

	[CRepr]
	public struct VkSemaphoreWaitInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSemaphoreWaitFlags flags;
		public uint32 semaphoreCount;
		public VkSemaphore* pSemaphores;
		public uint64* pValues;
	}

	[CRepr]
	public struct VkSemaphoreSignalInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSemaphore semaphore;
		public uint64 value;
	}

	[CRepr]
	public struct VkPhysicalDeviceBufferDeviceAddressFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 bufferDeviceAddress;
		public VkBool32 bufferDeviceAddressCaptureReplay;
		public VkBool32 bufferDeviceAddressMultiDevice;
	}

	[CRepr]
	public struct VkBufferDeviceAddressInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBuffer buffer;
	}

	[CRepr]
	public struct VkBufferOpaqueCaptureAddressCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 opaqueCaptureAddress;
	}

	[CRepr]
	public struct VkMemoryOpaqueCaptureAddressAllocateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 opaqueCaptureAddress;
	}

	[CRepr]
	public struct VkDeviceMemoryOpaqueCaptureAddressInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceMemory memory;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawIndirectCount(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawIndexedIndirectCount(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateRenderPass2(VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginRenderPass2(VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdNextSubpass2(VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndRenderPass2(VkCommandBuffer, VkSubpassEndInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkResetQueryPool(VkDevice, VkQueryPool, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetSemaphoreCounterValue(VkDevice, VkSemaphore, uint64*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkWaitSemaphores(VkDevice, VkSemaphoreWaitInfo*, uint64);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkSignalSemaphore(VkDevice, VkSemaphoreSignalInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkDeviceAddress PFN_vkGetBufferDeviceAddress(VkDevice, VkBufferDeviceAddressInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function uint64 PFN_vkGetBufferOpaqueCaptureAddress(VkDevice, VkBufferDeviceAddressInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function uint64 PFN_vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice, VkDeviceMemoryOpaqueCaptureAddressInfo*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkRenderPass pRenderPass);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, out uint64 pValue);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkWaitSemaphores(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, uint64 timeout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkSignalSemaphore(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern uint64 vkGetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern uint64 vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo);

	public typealias VkFlags64 = uint64;

	public struct VkPrivateDataSlot_T;
	public typealias VkPrivateDataSlot = VkPrivateDataSlot_T*;

	[CRepr, AllowDuplicates]
	public enum VkPipelineCreationFeedbackFlagBits : c_int
	{
		VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1,
		VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2,
		VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4,
		VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1,
		VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2,
		VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4,
		VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkPipelineCreationFeedbackFlags = VkPipelineCreationFeedbackFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkToolPurposeFlagBits : c_int
	{
		VK_TOOL_PURPOSE_VALIDATION_BIT = 1,
		VK_TOOL_PURPOSE_PROFILING_BIT = 2,
		VK_TOOL_PURPOSE_TRACING_BIT = 4,
		VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8,
		VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16,
		VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32,
		VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64,
		VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1,
		VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 2,
		VK_TOOL_PURPOSE_TRACING_BIT_EXT = 4,
		VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8,
		VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16,
		VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkToolPurposeFlags = VkToolPurposeFlagBits;

	public typealias VkPrivateDataSlotCreateFlags = VkFlags;

	public typealias VkPipelineStageFlags2 = VkFlags64;

	public typealias VkPipelineStageFlagBits2 = VkFlags64;

	public typealias VkAccessFlags2 = VkFlags64;

	public typealias VkAccessFlagBits2 = VkFlags64;

	[CRepr, AllowDuplicates]
	public enum VkSubmitFlagBits : c_int
	{
		VK_SUBMIT_PROTECTED_BIT = 1,
		VK_SUBMIT_PROTECTED_BIT_KHR = 1,
		VK_SUBMIT_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkSubmitFlags = VkSubmitFlagBits;

	[CRepr, AllowDuplicates]
	public enum VkRenderingFlagBits : c_int
	{
		VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1,
		VK_RENDERING_SUSPENDING_BIT = 2,
		VK_RENDERING_RESUMING_BIT = 4,
		VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 8,
		VK_RENDERING_CONTENTS_INLINE_BIT_KHR = 16,
		VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = 1,
		VK_RENDERING_SUSPENDING_BIT_KHR = 2,
		VK_RENDERING_RESUMING_BIT_KHR = 4,
		VK_RENDERING_CONTENTS_INLINE_BIT_EXT = 16,
		VK_RENDERING_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkRenderingFlags = VkRenderingFlagBits;

	public typealias VkFormatFeatureFlags2 = VkFlags64;

	public typealias VkFormatFeatureFlagBits2 = VkFlags64;

	[CRepr]
	public struct VkPhysicalDeviceVulkan13Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 robustImageAccess;
		public VkBool32 inlineUniformBlock;
		public VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
		public VkBool32 pipelineCreationCacheControl;
		public VkBool32 privateData;
		public VkBool32 shaderDemoteToHelperInvocation;
		public VkBool32 shaderTerminateInvocation;
		public VkBool32 subgroupSizeControl;
		public VkBool32 computeFullSubgroups;
		public VkBool32 synchronization2;
		public VkBool32 textureCompressionASTC_HDR;
		public VkBool32 shaderZeroInitializeWorkgroupMemory;
		public VkBool32 dynamicRendering;
		public VkBool32 shaderIntegerDotProduct;
		public VkBool32 maintenance4;
	}

	[CRepr]
	public struct VkPhysicalDeviceVulkan13Properties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 minSubgroupSize;
		public uint32 maxSubgroupSize;
		public uint32 maxComputeWorkgroupSubgroups;
		public VkShaderStageFlags requiredSubgroupSizeStages;
		public uint32 maxInlineUniformBlockSize;
		public uint32 maxPerStageDescriptorInlineUniformBlocks;
		public uint32 maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
		public uint32 maxDescriptorSetInlineUniformBlocks;
		public uint32 maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
		public uint32 maxInlineUniformTotalSize;
		public VkBool32 integerDotProduct8BitUnsignedAccelerated;
		public VkBool32 integerDotProduct8BitSignedAccelerated;
		public VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
		public VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
		public VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
		public VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
		public VkBool32 integerDotProduct16BitUnsignedAccelerated;
		public VkBool32 integerDotProduct16BitSignedAccelerated;
		public VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
		public VkBool32 integerDotProduct32BitUnsignedAccelerated;
		public VkBool32 integerDotProduct32BitSignedAccelerated;
		public VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
		public VkBool32 integerDotProduct64BitUnsignedAccelerated;
		public VkBool32 integerDotProduct64BitSignedAccelerated;
		public VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
		public VkDeviceSize storageTexelBufferOffsetAlignmentBytes;
		public VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
		public VkDeviceSize uniformTexelBufferOffsetAlignmentBytes;
		public VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
		public VkDeviceSize maxBufferSize;
	}

	[CRepr]
	public struct VkPipelineCreationFeedback
	{
		public VkPipelineCreationFeedbackFlags flags;
		public uint64 duration;
	}

	[CRepr]
	public struct VkPipelineCreationFeedbackCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCreationFeedback* pPipelineCreationFeedback;
		public uint32 pipelineStageCreationFeedbackCount;
		public VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderTerminateInvocationFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderTerminateInvocation;
	}

	[CRepr]
	public struct VkPhysicalDeviceToolProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public c_char[256] name;
		public c_char[256] version;
		public VkToolPurposeFlags purposes;
		public c_char[256] description;
		public c_char[256] layer;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderDemoteToHelperInvocation;
	}

	[CRepr]
	public struct VkPhysicalDevicePrivateDataFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 privateData;
	}

	[CRepr]
	public struct VkDevicePrivateDataCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 privateDataSlotRequestCount;
	}

	[CRepr]
	public struct VkPrivateDataSlotCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPrivateDataSlotCreateFlags flags;
	}

	[CRepr]
	public struct VkPhysicalDevicePipelineCreationCacheControlFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelineCreationCacheControl;
	}

	[CRepr]
	public struct VkMemoryBarrier2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineStageFlags2 srcStageMask;
		public VkAccessFlags2 srcAccessMask;
		public VkPipelineStageFlags2 dstStageMask;
		public VkAccessFlags2 dstAccessMask;
	}

	[CRepr]
	public struct VkBufferMemoryBarrier2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineStageFlags2 srcStageMask;
		public VkAccessFlags2 srcAccessMask;
		public VkPipelineStageFlags2 dstStageMask;
		public VkAccessFlags2 dstAccessMask;
		public uint32 srcQueueFamilyIndex;
		public uint32 dstQueueFamilyIndex;
		public VkBuffer buffer;
		public VkDeviceSize offset;
		public VkDeviceSize size;
	}

	[CRepr]
	public struct VkImageMemoryBarrier2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineStageFlags2 srcStageMask;
		public VkAccessFlags2 srcAccessMask;
		public VkPipelineStageFlags2 dstStageMask;
		public VkAccessFlags2 dstAccessMask;
		public VkImageLayout oldLayout;
		public VkImageLayout newLayout;
		public uint32 srcQueueFamilyIndex;
		public uint32 dstQueueFamilyIndex;
		public VkImage image;
		public VkImageSubresourceRange subresourceRange;
	}

	[CRepr]
	public struct VkDependencyInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDependencyFlags dependencyFlags;
		public uint32 memoryBarrierCount;
		public VkMemoryBarrier2* pMemoryBarriers;
		public uint32 bufferMemoryBarrierCount;
		public VkBufferMemoryBarrier2* pBufferMemoryBarriers;
		public uint32 imageMemoryBarrierCount;
		public VkImageMemoryBarrier2* pImageMemoryBarriers;
	}

	[CRepr]
	public struct VkSemaphoreSubmitInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSemaphore semaphore;
		public uint64 value;
		public VkPipelineStageFlags2 stageMask;
		public uint32 deviceIndex;
	}

	[CRepr]
	public struct VkCommandBufferSubmitInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCommandBuffer commandBuffer;
		public uint32 deviceMask;
	}

	[CRepr]
	public struct VkSubmitInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSubmitFlags flags;
		public uint32 waitSemaphoreInfoCount;
		public VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
		public uint32 commandBufferInfoCount;
		public VkCommandBufferSubmitInfo* pCommandBufferInfos;
		public uint32 signalSemaphoreInfoCount;
		public VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;
	}

	[CRepr]
	public struct VkPhysicalDeviceSynchronization2Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 synchronization2;
	}

	[CRepr]
	public struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderZeroInitializeWorkgroupMemory;
	}

	[CRepr]
	public struct VkPhysicalDeviceImageRobustnessFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 robustImageAccess;
	}

	[CRepr]
	public struct VkBufferCopy2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize srcOffset;
		public VkDeviceSize dstOffset;
		public VkDeviceSize size;
	}

	[CRepr]
	public struct VkCopyBufferInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBuffer srcBuffer;
		public VkBuffer dstBuffer;
		public uint32 regionCount;
		public VkBufferCopy2* pRegions;
	}

	[CRepr]
	public struct VkImageCopy2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageSubresourceLayers srcSubresource;
		public VkOffset3D srcOffset;
		public VkImageSubresourceLayers dstSubresource;
		public VkOffset3D dstOffset;
		public VkExtent3D extent;
	}

	[CRepr]
	public struct VkCopyImageInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage srcImage;
		public VkImageLayout srcImageLayout;
		public VkImage dstImage;
		public VkImageLayout dstImageLayout;
		public uint32 regionCount;
		public VkImageCopy2* pRegions;
	}

	[CRepr]
	public struct VkBufferImageCopy2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize bufferOffset;
		public uint32 bufferRowLength;
		public uint32 bufferImageHeight;
		public VkImageSubresourceLayers imageSubresource;
		public VkOffset3D imageOffset;
		public VkExtent3D imageExtent;
	}

	[CRepr]
	public struct VkCopyBufferToImageInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBuffer srcBuffer;
		public VkImage dstImage;
		public VkImageLayout dstImageLayout;
		public uint32 regionCount;
		public VkBufferImageCopy2* pRegions;
	}

	[CRepr]
	public struct VkCopyImageToBufferInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage srcImage;
		public VkImageLayout srcImageLayout;
		public VkBuffer dstBuffer;
		public uint32 regionCount;
		public VkBufferImageCopy2* pRegions;
	}

	[CRepr]
	public struct VkImageBlit2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageSubresourceLayers srcSubresource;
		public VkOffset3D[2] srcOffsets;
		public VkImageSubresourceLayers dstSubresource;
		public VkOffset3D[2] dstOffsets;
	}

	[CRepr]
	public struct VkBlitImageInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage srcImage;
		public VkImageLayout srcImageLayout;
		public VkImage dstImage;
		public VkImageLayout dstImageLayout;
		public uint32 regionCount;
		public VkImageBlit2* pRegions;
		public VkFilter filter;
	}

	[CRepr]
	public struct VkImageResolve2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageSubresourceLayers srcSubresource;
		public VkOffset3D srcOffset;
		public VkImageSubresourceLayers dstSubresource;
		public VkOffset3D dstOffset;
		public VkExtent3D extent;
	}

	[CRepr]
	public struct VkResolveImageInfo2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage srcImage;
		public VkImageLayout srcImageLayout;
		public VkImage dstImage;
		public VkImageLayout dstImageLayout;
		public uint32 regionCount;
		public VkImageResolve2* pRegions;
	}

	[CRepr]
	public struct VkPhysicalDeviceSubgroupSizeControlFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 subgroupSizeControl;
		public VkBool32 computeFullSubgroups;
	}

	[CRepr]
	public struct VkPhysicalDeviceSubgroupSizeControlProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 minSubgroupSize;
		public uint32 maxSubgroupSize;
		public uint32 maxComputeWorkgroupSubgroups;
		public VkShaderStageFlags requiredSubgroupSizeStages;
	}

	[CRepr]
	public struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 requiredSubgroupSize;
	}

	[CRepr]
	public struct VkPhysicalDeviceInlineUniformBlockFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 inlineUniformBlock;
		public VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
	}

	[CRepr]
	public struct VkPhysicalDeviceInlineUniformBlockProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxInlineUniformBlockSize;
		public uint32 maxPerStageDescriptorInlineUniformBlocks;
		public uint32 maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
		public uint32 maxDescriptorSetInlineUniformBlocks;
		public uint32 maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
	}

	[CRepr]
	public struct VkWriteDescriptorSetInlineUniformBlock
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 dataSize;
		public void* pData;
	}

	[CRepr]
	public struct VkDescriptorPoolInlineUniformBlockCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxInlineUniformBlockBindings;
	}

	[CRepr]
	public struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 textureCompressionASTC_HDR;
	}

	[CRepr]
	public struct VkRenderingAttachmentInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageView imageView;
		public VkImageLayout imageLayout;
		public VkResolveModeFlagBits resolveMode;
		public VkImageView resolveImageView;
		public VkImageLayout resolveImageLayout;
		public VkAttachmentLoadOp loadOp;
		public VkAttachmentStoreOp storeOp;
		public VkClearValue clearValue;
	}

	[CRepr]
	public struct VkRenderingInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRenderingFlags flags;
		public VkRect2D renderArea;
		public uint32 layerCount;
		public uint32 viewMask;
		public uint32 colorAttachmentCount;
		public VkRenderingAttachmentInfo* pColorAttachments;
		public VkRenderingAttachmentInfo* pDepthAttachment;
		public VkRenderingAttachmentInfo* pStencilAttachment;
	}

	[CRepr]
	public struct VkPipelineRenderingCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 viewMask;
		public uint32 colorAttachmentCount;
		public VkFormat* pColorAttachmentFormats;
		public VkFormat depthAttachmentFormat;
		public VkFormat stencilAttachmentFormat;
	}

	[CRepr]
	public struct VkPhysicalDeviceDynamicRenderingFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 dynamicRendering;
	}

	[CRepr]
	public struct VkCommandBufferInheritanceRenderingInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRenderingFlags flags;
		public uint32 viewMask;
		public uint32 colorAttachmentCount;
		public VkFormat* pColorAttachmentFormats;
		public VkFormat depthAttachmentFormat;
		public VkFormat stencilAttachmentFormat;
		public VkSampleCountFlagBits rasterizationSamples;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderIntegerDotProductFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderIntegerDotProduct;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderIntegerDotProductProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 integerDotProduct8BitUnsignedAccelerated;
		public VkBool32 integerDotProduct8BitSignedAccelerated;
		public VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
		public VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
		public VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
		public VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
		public VkBool32 integerDotProduct16BitUnsignedAccelerated;
		public VkBool32 integerDotProduct16BitSignedAccelerated;
		public VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
		public VkBool32 integerDotProduct32BitUnsignedAccelerated;
		public VkBool32 integerDotProduct32BitSignedAccelerated;
		public VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
		public VkBool32 integerDotProduct64BitUnsignedAccelerated;
		public VkBool32 integerDotProduct64BitSignedAccelerated;
		public VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
		public VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
	}

	[CRepr]
	public struct VkPhysicalDeviceTexelBufferAlignmentProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize storageTexelBufferOffsetAlignmentBytes;
		public VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
		public VkDeviceSize uniformTexelBufferOffsetAlignmentBytes;
		public VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
	}

	[CRepr]
	public struct VkFormatProperties3
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFormatFeatureFlags2 linearTilingFeatures;
		public VkFormatFeatureFlags2 optimalTilingFeatures;
		public VkFormatFeatureFlags2 bufferFeatures;
	}

	[CRepr]
	public struct VkPhysicalDeviceMaintenance4Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 maintenance4;
	}

	[CRepr]
	public struct VkPhysicalDeviceMaintenance4Properties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize maxBufferSize;
	}

	[CRepr]
	public struct VkDeviceBufferMemoryRequirements
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBufferCreateInfo* pCreateInfo;
	}

	[CRepr]
	public struct VkDeviceImageMemoryRequirements
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageCreateInfo* pCreateInfo;
		public VkImageAspectFlagBits planeAspect;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceToolProperties(VkPhysicalDevice, uint32*, VkPhysicalDeviceToolProperties*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreatePrivateDataSlot(VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyPrivateDataSlot(VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkSetPrivateData(VkDevice, VkObjectType, uint64, VkPrivateDataSlot, uint64);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPrivateData(VkDevice, VkObjectType, uint64, VkPrivateDataSlot, uint64*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetEvent2(VkCommandBuffer, VkEvent, VkDependencyInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdResetEvent2(VkCommandBuffer, VkEvent, VkPipelineStageFlags2);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWaitEvents2(VkCommandBuffer, uint32, VkEvent*, VkDependencyInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPipelineBarrier2(VkCommandBuffer, VkDependencyInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWriteTimestamp2(VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkQueueSubmit2(VkQueue, uint32, VkSubmitInfo2*, VkFence);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyBuffer2(VkCommandBuffer, VkCopyBufferInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyImage2(VkCommandBuffer, VkCopyImageInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyBufferToImage2(VkCommandBuffer, VkCopyBufferToImageInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyImageToBuffer2(VkCommandBuffer, VkCopyImageToBufferInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBlitImage2(VkCommandBuffer, VkBlitImageInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdResolveImage2(VkCommandBuffer, VkResolveImageInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginRendering(VkCommandBuffer, VkRenderingInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndRendering(VkCommandBuffer);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetCullMode(VkCommandBuffer, VkCullModeFlags);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetFrontFace(VkCommandBuffer, VkFrontFace);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetPrimitiveTopology(VkCommandBuffer, VkPrimitiveTopology);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetViewportWithCount(VkCommandBuffer, uint32, VkViewport*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetScissorWithCount(VkCommandBuffer, uint32, VkRect2D*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindVertexBuffers2(VkCommandBuffer, uint32, uint32, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthTestEnable(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthWriteEnable(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthCompareOp(VkCommandBuffer, VkCompareOp);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthBoundsTestEnable(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetStencilTestEnable(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetStencilOp(VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetRasterizerDiscardEnable(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthBiasEnable(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetPrimitiveRestartEnable(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceBufferMemoryRequirements(VkDevice, VkDeviceBufferMemoryRequirements*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceImageMemoryRequirements(VkDevice, VkDeviceImageMemoryRequirements*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceImageSparseMemoryRequirements(VkDevice, VkDeviceImageMemoryRequirements*, uint32*, VkSparseImageMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, out uint32 pToolCount, VkPhysicalDeviceToolProperties* pToolProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkPrivateDataSlot pPrivateDataSlot);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64 objectHandle, VkPrivateDataSlot privateDataSlot, uint64 data);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64 objectHandle, VkPrivateDataSlot privateDataSlot, out uint64 pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkDependencyInfo* pDependencyInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32 eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32 query);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkQueueSubmit2(VkQueue queue, uint32 submitCount, VkSubmitInfo2* pSubmits, VkFence fence);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyImage2(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBlitImage2(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdResolveImage2(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginRendering(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndRendering(VkCommandBuffer commandBuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32 viewportCount, VkViewport* pViewports);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32 scissorCount, VkRect2D* pScissors);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceBufferMemoryRequirements(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceImageMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, out uint32 pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

	[CRepr, AllowDuplicates]
	public enum VkPipelineRobustnessBufferBehavior : c_int
	{
		VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT = 0,
		VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED = 1,
		VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS = 2,
		VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2 = 3,
		VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0,
		VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1,
		VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2,
		VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3,
		VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPipelineRobustnessImageBehavior : c_int
	{
		VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT = 0,
		VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED = 1,
		VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS = 2,
		VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2 = 3,
		VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0,
		VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1,
		VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2,
		VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3,
		VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkQueueGlobalPriority : c_int
	{
		VK_QUEUE_GLOBAL_PRIORITY_LOW = 128,
		VK_QUEUE_GLOBAL_PRIORITY_MEDIUM = 256,
		VK_QUEUE_GLOBAL_PRIORITY_HIGH = 512,
		VK_QUEUE_GLOBAL_PRIORITY_REALTIME = 1024,
		VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128,
		VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256,
		VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512,
		VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
		VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128,
		VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256,
		VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512,
		VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024,
		VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkLineRasterizationMode : c_int
	{
		VK_LINE_RASTERIZATION_MODE_DEFAULT = 0,
		VK_LINE_RASTERIZATION_MODE_RECTANGULAR = 1,
		VK_LINE_RASTERIZATION_MODE_BRESENHAM = 2,
		VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH = 3,
		VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
		VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
		VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
		VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
		VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR = 0,
		VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR = 1,
		VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR = 2,
		VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR = 3,
		VK_LINE_RASTERIZATION_MODE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkMemoryUnmapFlagBits : c_int
	{
		VK_MEMORY_UNMAP_RESERVE_BIT_EXT = 1,
		VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkMemoryUnmapFlags = VkMemoryUnmapFlagBits;

	public typealias VkPipelineCreateFlags2 = VkFlags64;

	public typealias VkPipelineCreateFlagBits2 = VkFlags64;

	public typealias VkBufferUsageFlags2 = VkFlags64;

	public typealias VkBufferUsageFlagBits2 = VkFlags64;

	[CRepr, AllowDuplicates]
	public enum VkHostImageCopyFlagBits : c_int
	{
		VK_HOST_IMAGE_COPY_MEMCPY = 1,
		VK_HOST_IMAGE_COPY_MEMCPY_EXT = 1,
		VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM = 2147483647,
	}

	public typealias VkHostImageCopyFlags = VkHostImageCopyFlagBits;

	[CRepr]
	public struct VkPhysicalDeviceVulkan14Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 globalPriorityQuery;
		public VkBool32 shaderSubgroupRotate;
		public VkBool32 shaderSubgroupRotateClustered;
		public VkBool32 shaderFloatControls2;
		public VkBool32 shaderExpectAssume;
		public VkBool32 rectangularLines;
		public VkBool32 bresenhamLines;
		public VkBool32 smoothLines;
		public VkBool32 stippledRectangularLines;
		public VkBool32 stippledBresenhamLines;
		public VkBool32 stippledSmoothLines;
		public VkBool32 vertexAttributeInstanceRateDivisor;
		public VkBool32 vertexAttributeInstanceRateZeroDivisor;
		public VkBool32 indexTypeUint8;
		public VkBool32 dynamicRenderingLocalRead;
		public VkBool32 maintenance5;
		public VkBool32 maintenance6;
		public VkBool32 pipelineProtectedAccess;
		public VkBool32 pipelineRobustness;
		public VkBool32 hostImageCopy;
		public VkBool32 pushDescriptor;
	}

	[CRepr]
	public struct VkPhysicalDeviceVulkan14Properties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 lineSubPixelPrecisionBits;
		public uint32 maxVertexAttribDivisor;
		public VkBool32 supportsNonZeroFirstInstance;
		public uint32 maxPushDescriptors;
		public VkBool32 dynamicRenderingLocalReadDepthStencilAttachments;
		public VkBool32 dynamicRenderingLocalReadMultisampledAttachments;
		public VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting;
		public VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting;
		public VkBool32 depthStencilSwizzleOneSupport;
		public VkBool32 polygonModePointSize;
		public VkBool32 nonStrictSinglePixelWideLinesUseParallelogram;
		public VkBool32 nonStrictWideLinesUseParallelogram;
		public VkBool32 blockTexelViewCompatibleMultipleLayers;
		public uint32 maxCombinedImageSamplerDescriptorCount;
		public VkBool32 fragmentShadingRateClampCombinerInputs;
		public VkPipelineRobustnessBufferBehavior defaultRobustnessStorageBuffers;
		public VkPipelineRobustnessBufferBehavior defaultRobustnessUniformBuffers;
		public VkPipelineRobustnessBufferBehavior defaultRobustnessVertexInputs;
		public VkPipelineRobustnessImageBehavior defaultRobustnessImages;
		public uint32 copySrcLayoutCount;
		public VkImageLayout* pCopySrcLayouts;
		public uint32 copyDstLayoutCount;
		public VkImageLayout* pCopyDstLayouts;
		public uint8[16] optimalTilingLayoutUUID;
		public VkBool32 identicalMemoryTypeRequirements;
	}

	[CRepr]
	public struct VkDeviceQueueGlobalPriorityCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkQueueGlobalPriority globalPriority;
	}

	[CRepr]
	public struct VkPhysicalDeviceGlobalPriorityQueryFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 globalPriorityQuery;
	}

	[CRepr]
	public struct VkQueueFamilyGlobalPriorityProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 priorityCount;
		public VkQueueGlobalPriority[16] priorities;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderSubgroupRotateFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderSubgroupRotate;
		public VkBool32 shaderSubgroupRotateClustered;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderFloatControls2Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderFloatControls2;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderExpectAssumeFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderExpectAssume;
	}

	[CRepr]
	public struct VkPhysicalDeviceLineRasterizationFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 rectangularLines;
		public VkBool32 bresenhamLines;
		public VkBool32 smoothLines;
		public VkBool32 stippledRectangularLines;
		public VkBool32 stippledBresenhamLines;
		public VkBool32 stippledSmoothLines;
	}

	[CRepr]
	public struct VkPhysicalDeviceLineRasterizationProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 lineSubPixelPrecisionBits;
	}

	[CRepr]
	public struct VkPipelineRasterizationLineStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkLineRasterizationMode lineRasterizationMode;
		public VkBool32 stippledLineEnable;
		public uint32 lineStippleFactor;
		public uint16 lineStipplePattern;
	}

	[CRepr]
	public struct VkPhysicalDeviceVertexAttributeDivisorProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxVertexAttribDivisor;
		public VkBool32 supportsNonZeroFirstInstance;
	}

	[CRepr]
	public struct VkVertexInputBindingDivisorDescription
	{
		public uint32 binding;
		public uint32 divisor;
	}

	[CRepr]
	public struct VkPipelineVertexInputDivisorStateCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 vertexBindingDivisorCount;
		public VkVertexInputBindingDivisorDescription* pVertexBindingDivisors;
	}

	[CRepr]
	public struct VkPhysicalDeviceVertexAttributeDivisorFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 vertexAttributeInstanceRateDivisor;
		public VkBool32 vertexAttributeInstanceRateZeroDivisor;
	}

	[CRepr]
	public struct VkPhysicalDeviceIndexTypeUint8Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 indexTypeUint8;
	}

	[CRepr]
	public struct VkMemoryMapInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkMemoryMapFlags flags;
		public VkDeviceMemory memory;
		public VkDeviceSize offset;
		public VkDeviceSize size;
	}

	[CRepr]
	public struct VkMemoryUnmapInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkMemoryUnmapFlags flags;
		public VkDeviceMemory memory;
	}

	[CRepr]
	public struct VkPhysicalDeviceMaintenance5Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 maintenance5;
	}

	[CRepr]
	public struct VkPhysicalDeviceMaintenance5Properties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting;
		public VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting;
		public VkBool32 depthStencilSwizzleOneSupport;
		public VkBool32 polygonModePointSize;
		public VkBool32 nonStrictSinglePixelWideLinesUseParallelogram;
		public VkBool32 nonStrictWideLinesUseParallelogram;
	}

	[CRepr]
	public struct VkRenderingAreaInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 viewMask;
		public uint32 colorAttachmentCount;
		public VkFormat* pColorAttachmentFormats;
		public VkFormat depthAttachmentFormat;
		public VkFormat stencilAttachmentFormat;
	}

	[CRepr]
	public struct VkImageSubresource2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageSubresource imageSubresource;
	}

	[CRepr]
	public struct VkDeviceImageSubresourceInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageCreateInfo* pCreateInfo;
		public VkImageSubresource2* pSubresource;
	}

	[CRepr]
	public struct VkSubresourceLayout2
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSubresourceLayout subresourceLayout;
	}

	[CRepr]
	public struct VkPipelineCreateFlags2CreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCreateFlags2 flags;
	}

	[CRepr]
	public struct VkBufferUsageFlags2CreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBufferUsageFlags2 usage;
	}

	[CRepr]
	public struct VkPhysicalDevicePushDescriptorProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxPushDescriptors;
	}

	[CRepr]
	public struct VkPhysicalDeviceDynamicRenderingLocalReadFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 dynamicRenderingLocalRead;
	}

	[CRepr]
	public struct VkRenderingAttachmentLocationInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 colorAttachmentCount;
		public uint32* pColorAttachmentLocations;
	}

	[CRepr]
	public struct VkRenderingInputAttachmentIndexInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 colorAttachmentCount;
		public uint32* pColorAttachmentInputIndices;
		public uint32* pDepthInputAttachmentIndex;
		public uint32* pStencilInputAttachmentIndex;
	}

	[CRepr]
	public struct VkPhysicalDeviceMaintenance6Features
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 maintenance6;
	}

	[CRepr]
	public struct VkPhysicalDeviceMaintenance6Properties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 blockTexelViewCompatibleMultipleLayers;
		public uint32 maxCombinedImageSamplerDescriptorCount;
		public VkBool32 fragmentShadingRateClampCombinerInputs;
	}

	[CRepr]
	public struct VkBindMemoryStatus
	{
		public VkStructureType sType;
		public void* pNext;
		public VkResult* pResult;
	}

	[CRepr]
	public struct VkBindDescriptorSetsInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderStageFlags stageFlags;
		public VkPipelineLayout layout;
		public uint32 firstSet;
		public uint32 descriptorSetCount;
		public VkDescriptorSet* pDescriptorSets;
		public uint32 dynamicOffsetCount;
		public uint32* pDynamicOffsets;
	}

	[CRepr]
	public struct VkPushConstantsInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineLayout layout;
		public VkShaderStageFlags stageFlags;
		public uint32 offset;
		public uint32 size;
		public void* pValues;
	}

	[CRepr]
	public struct VkPushDescriptorSetInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderStageFlags stageFlags;
		public VkPipelineLayout layout;
		public uint32 set;
		public uint32 descriptorWriteCount;
		public VkWriteDescriptorSet* pDescriptorWrites;
	}

	[CRepr]
	public struct VkPushDescriptorSetWithTemplateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorUpdateTemplate descriptorUpdateTemplate;
		public VkPipelineLayout layout;
		public uint32 set;
		public void* pData;
	}

	[CRepr]
	public struct VkPhysicalDevicePipelineProtectedAccessFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelineProtectedAccess;
	}

	[CRepr]
	public struct VkPhysicalDevicePipelineRobustnessFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelineRobustness;
	}

	[CRepr]
	public struct VkPhysicalDevicePipelineRobustnessProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineRobustnessBufferBehavior defaultRobustnessStorageBuffers;
		public VkPipelineRobustnessBufferBehavior defaultRobustnessUniformBuffers;
		public VkPipelineRobustnessBufferBehavior defaultRobustnessVertexInputs;
		public VkPipelineRobustnessImageBehavior defaultRobustnessImages;
	}

	[CRepr]
	public struct VkPipelineRobustnessCreateInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineRobustnessBufferBehavior storageBuffers;
		public VkPipelineRobustnessBufferBehavior uniformBuffers;
		public VkPipelineRobustnessBufferBehavior vertexInputs;
		public VkPipelineRobustnessImageBehavior images;
	}

	[CRepr]
	public struct VkPhysicalDeviceHostImageCopyFeatures
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 hostImageCopy;
	}

	[CRepr]
	public struct VkPhysicalDeviceHostImageCopyProperties
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 copySrcLayoutCount;
		public VkImageLayout* pCopySrcLayouts;
		public uint32 copyDstLayoutCount;
		public VkImageLayout* pCopyDstLayouts;
		public uint8[16] optimalTilingLayoutUUID;
		public VkBool32 identicalMemoryTypeRequirements;
	}

	[CRepr]
	public struct VkMemoryToImageCopy
	{
		public VkStructureType sType;
		public void* pNext;
		public void* pHostPointer;
		public uint32 memoryRowLength;
		public uint32 memoryImageHeight;
		public VkImageSubresourceLayers imageSubresource;
		public VkOffset3D imageOffset;
		public VkExtent3D imageExtent;
	}

	[CRepr]
	public struct VkImageToMemoryCopy
	{
		public VkStructureType sType;
		public void* pNext;
		public void* pHostPointer;
		public uint32 memoryRowLength;
		public uint32 memoryImageHeight;
		public VkImageSubresourceLayers imageSubresource;
		public VkOffset3D imageOffset;
		public VkExtent3D imageExtent;
	}

	[CRepr]
	public struct VkCopyMemoryToImageInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkHostImageCopyFlags flags;
		public VkImage dstImage;
		public VkImageLayout dstImageLayout;
		public uint32 regionCount;
		public VkMemoryToImageCopy* pRegions;
	}

	[CRepr]
	public struct VkCopyImageToMemoryInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkHostImageCopyFlags flags;
		public VkImage srcImage;
		public VkImageLayout srcImageLayout;
		public uint32 regionCount;
		public VkImageToMemoryCopy* pRegions;
	}

	[CRepr]
	public struct VkCopyImageToImageInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkHostImageCopyFlags flags;
		public VkImage srcImage;
		public VkImageLayout srcImageLayout;
		public VkImage dstImage;
		public VkImageLayout dstImageLayout;
		public uint32 regionCount;
		public VkImageCopy2* pRegions;
	}

	[CRepr]
	public struct VkHostImageLayoutTransitionInfo
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
		public VkImageLayout oldLayout;
		public VkImageLayout newLayout;
		public VkImageSubresourceRange subresourceRange;
	}

	[CRepr]
	public struct VkSubresourceHostMemcpySize
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize size;
	}

	[CRepr]
	public struct VkHostImageCopyDevicePerformanceQuery
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 optimalDeviceAccess;
		public VkBool32 identicalMemoryLayout;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetLineStipple(VkCommandBuffer, uint32, uint16);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkMapMemory2(VkDevice, VkMemoryMapInfo*, void**);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkUnmapMemory2(VkDevice, VkMemoryUnmapInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindIndexBuffer2(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, VkIndexType);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetRenderingAreaGranularity(VkDevice, VkRenderingAreaInfo*, VkExtent2D*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceImageSubresourceLayout(VkDevice, VkDeviceImageSubresourceInfo*, VkSubresourceLayout2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetImageSubresourceLayout2(VkDevice, VkImage, VkImageSubresource2*, VkSubresourceLayout2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushDescriptorSet(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32, uint32, VkWriteDescriptorSet*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushDescriptorSetWithTemplate(VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint32, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetRenderingAttachmentLocations(VkCommandBuffer, VkRenderingAttachmentLocationInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetRenderingInputAttachmentIndices(VkCommandBuffer, VkRenderingInputAttachmentIndexInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindDescriptorSets2(VkCommandBuffer, VkBindDescriptorSetsInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushConstants2(VkCommandBuffer, VkPushConstantsInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushDescriptorSet2(VkCommandBuffer, VkPushDescriptorSetInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushDescriptorSetWithTemplate2(VkCommandBuffer, VkPushDescriptorSetWithTemplateInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyMemoryToImage(VkDevice, VkCopyMemoryToImageInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyImageToMemory(VkDevice, VkCopyImageToMemoryInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyImageToImage(VkDevice, VkCopyImageToImageInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkTransitionImageLayout(VkDevice, uint32, VkHostImageLayoutTransitionInfo*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetLineStipple(VkCommandBuffer commandBuffer, uint32 lineStippleFactor, uint16 lineStipplePattern);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkMapMemory2(VkDevice device, VkMemoryMapInfo* pMemoryMapInfo, void** ppData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkUnmapMemory2(VkDevice device, VkMemoryUnmapInfo* pMemoryUnmapInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindIndexBuffer2(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetRenderingAreaGranularity(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, out VkExtent2D pGranularity);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceImageSubresourceLayout(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, out VkSubresourceLayout2 pLayout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetImageSubresourceLayout2(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, out VkSubresourceLayout2 pLayout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 set, uint32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushDescriptorSetWithTemplate(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32 set, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetRenderingAttachmentLocations(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* pLocationInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetRenderingInputAttachmentIndices(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindDescriptorSets2(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* pBindDescriptorSetsInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushConstants2(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pPushConstantsInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushDescriptorSet2(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pPushDescriptorSetInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushDescriptorSetWithTemplate2(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyMemoryToImage(VkDevice device, VkCopyMemoryToImageInfo* pCopyMemoryToImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyImageToMemory(VkDevice device, VkCopyImageToMemoryInfo* pCopyImageToMemoryInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyImageToImage(VkDevice device, VkCopyImageToImageInfo* pCopyImageToImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkTransitionImageLayout(VkDevice device, uint32 transitionCount, VkHostImageLayoutTransitionInfo* pTransitions);

	public struct VkSurfaceKHR_T;
	public typealias VkSurfaceKHR = VkSurfaceKHR_T*;

	[CRepr, AllowDuplicates]
	public enum VkPresentModeKHR : c_int
	{
		VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
		VK_PRESENT_MODE_MAILBOX_KHR = 1,
		VK_PRESENT_MODE_FIFO_KHR = 2,
		VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
		VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
		VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
		VK_PRESENT_MODE_FIFO_LATEST_READY_EXT = 1000361000,
		VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkColorSpaceKHR : c_int
	{
		VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
		VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
		VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
		VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
		VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
		VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
		VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
		VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
		VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
		VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
		VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
		VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
		VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
		VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
		VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
		VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
		VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0,
		VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003,
		VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkSurfaceTransformFlagBitsKHR : c_int
	{
		VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
		VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
		VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
		VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
		VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
		VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
		VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
		VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
		VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
		VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkCompositeAlphaFlagBitsKHR : c_int
	{
		VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
		VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
		VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
		VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
		VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkCompositeAlphaFlagsKHR = VkCompositeAlphaFlagBitsKHR;

	public typealias VkSurfaceTransformFlagsKHR = VkSurfaceTransformFlagBitsKHR;

	[CRepr]
	public struct VkSurfaceCapabilitiesKHR
	{
		public uint32 minImageCount;
		public uint32 maxImageCount;
		public VkExtent2D currentExtent;
		public VkExtent2D minImageExtent;
		public VkExtent2D maxImageExtent;
		public uint32 maxImageArrayLayers;
		public VkSurfaceTransformFlagsKHR supportedTransforms;
		public VkSurfaceTransformFlagBitsKHR currentTransform;
		public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
		public VkImageUsageFlags supportedUsageFlags;
	}

	[CRepr]
	public struct VkSurfaceFormatKHR
	{
		public VkFormat format;
		public VkColorSpaceKHR colorSpace;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroySurfaceKHR(VkInstance, VkSurfaceKHR, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice, uint32, VkSurfaceKHR, VkBool32*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilitiesKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice, VkSurfaceKHR, uint32*, VkSurfaceFormatKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice, VkSurfaceKHR, uint32*, VkPresentModeKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, VkSurfaceKHR surface, out VkBool32 pSupported);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out VkSurfaceCapabilitiesKHR pSurfaceCapabilities);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out uint32 pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out uint32 pPresentModeCount, VkPresentModeKHR* pPresentModes);

	public struct VkSwapchainKHR_T;
	public typealias VkSwapchainKHR = VkSwapchainKHR_T*;

	[CRepr, AllowDuplicates]
	public enum VkSwapchainCreateFlagBitsKHR : c_int
	{
		VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
		VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
		VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4,
		VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 8,
		VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkSwapchainCreateFlagsKHR = VkSwapchainCreateFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkDeviceGroupPresentModeFlagBitsKHR : c_int
	{
		VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
		VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
		VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
		VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
		VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkDeviceGroupPresentModeFlagsKHR = VkDeviceGroupPresentModeFlagBitsKHR;

	[CRepr]
	public struct VkSwapchainCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSwapchainCreateFlagsKHR flags;
		public VkSurfaceKHR surface;
		public uint32 minImageCount;
		public VkFormat imageFormat;
		public VkColorSpaceKHR imageColorSpace;
		public VkExtent2D imageExtent;
		public uint32 imageArrayLayers;
		public VkImageUsageFlags imageUsage;
		public VkSharingMode imageSharingMode;
		public uint32 queueFamilyIndexCount;
		public uint32* pQueueFamilyIndices;
		public VkSurfaceTransformFlagBitsKHR preTransform;
		public VkCompositeAlphaFlagBitsKHR compositeAlpha;
		public VkPresentModeKHR presentMode;
		public VkBool32 clipped;
		public VkSwapchainKHR oldSwapchain;
	}

	[CRepr]
	public struct VkPresentInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 waitSemaphoreCount;
		public VkSemaphore* pWaitSemaphores;
		public uint32 swapchainCount;
		public VkSwapchainKHR* pSwapchains;
		public uint32* pImageIndices;
		public VkResult* pResults;
	}

	[CRepr]
	public struct VkImageSwapchainCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSwapchainKHR swapchain;
	}

	[CRepr]
	public struct VkBindImageMemorySwapchainInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSwapchainKHR swapchain;
		public uint32 imageIndex;
	}

	[CRepr]
	public struct VkAcquireNextImageInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSwapchainKHR swapchain;
		public uint64 timeout;
		public VkSemaphore semaphore;
		public VkFence fence;
		public uint32 deviceMask;
	}

	[CRepr]
	public struct VkDeviceGroupPresentCapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32[32] presentMask;
		public VkDeviceGroupPresentModeFlagsKHR modes;
	}

	[CRepr]
	public struct VkDeviceGroupPresentInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 swapchainCount;
		public uint32* pDeviceMasks;
		public VkDeviceGroupPresentModeFlagBitsKHR mode;
	}

	[CRepr]
	public struct VkDeviceGroupSwapchainCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceGroupPresentModeFlagsKHR modes;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateSwapchainKHR(VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroySwapchainKHR(VkDevice, VkSwapchainKHR, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetSwapchainImagesKHR(VkDevice, VkSwapchainKHR, uint32*, VkImage*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkAcquireNextImageKHR(VkDevice, VkSwapchainKHR, uint64, VkSemaphore, VkFence, uint32*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkQueuePresentKHR(VkQueue, VkPresentInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice, VkDeviceGroupPresentCapabilitiesKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDeviceGroupSurfacePresentModesKHR(VkDevice, VkSurfaceKHR, VkDeviceGroupPresentModeFlagsKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice, VkSurfaceKHR, uint32*, VkRect2D*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkAcquireNextImage2KHR(VkDevice, VkAcquireNextImageInfoKHR*, uint32*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSwapchainKHR pSwapchain);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, out uint32 pSwapchainImageCount, VkImage* pSwapchainImages);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64 timeout, VkSemaphore semaphore, VkFence fence, out uint32 pImageIndex);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkQueuePresentKHR(VkQueue queue, VkPresentInfoKHR* pPresentInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, out VkDeviceGroupPresentCapabilitiesKHR pDeviceGroupPresentCapabilities);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, out VkDeviceGroupPresentModeFlagsKHR pModes);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out uint32 pRectCount, VkRect2D* pRects);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkAcquireNextImage2KHR(VkDevice device, VkAcquireNextImageInfoKHR* pAcquireInfo, out uint32 pImageIndex);

	public struct VkDisplayKHR_T;
	public typealias VkDisplayKHR = VkDisplayKHR_T*;

	public struct VkDisplayModeKHR_T;
	public typealias VkDisplayModeKHR = VkDisplayModeKHR_T*;

	public typealias VkDisplayModeCreateFlagsKHR = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkDisplayPlaneAlphaFlagBitsKHR : c_int
	{
		VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
		VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
		VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
		VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
		VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkDisplayPlaneAlphaFlagsKHR = VkDisplayPlaneAlphaFlagBitsKHR;

	public typealias VkDisplaySurfaceCreateFlagsKHR = VkFlags;

	[CRepr]
	public struct VkDisplayModeParametersKHR
	{
		public VkExtent2D visibleRegion;
		public uint32 refreshRate;
	}

	[CRepr]
	public struct VkDisplayModeCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDisplayModeCreateFlagsKHR flags;
		public VkDisplayModeParametersKHR parameters;
	}

	[CRepr]
	public struct VkDisplayModePropertiesKHR
	{
		public VkDisplayModeKHR displayMode;
		public VkDisplayModeParametersKHR parameters;
	}

	[CRepr]
	public struct VkDisplayPlaneCapabilitiesKHR
	{
		public VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
		public VkOffset2D minSrcPosition;
		public VkOffset2D maxSrcPosition;
		public VkExtent2D minSrcExtent;
		public VkExtent2D maxSrcExtent;
		public VkOffset2D minDstPosition;
		public VkOffset2D maxDstPosition;
		public VkExtent2D minDstExtent;
		public VkExtent2D maxDstExtent;
	}

	[CRepr]
	public struct VkDisplayPlanePropertiesKHR
	{
		public VkDisplayKHR currentDisplay;
		public uint32 currentStackIndex;
	}

	[CRepr]
	public struct VkDisplayPropertiesKHR
	{
		public VkDisplayKHR display;
		public c_char* displayName;
		public VkExtent2D physicalDimensions;
		public VkExtent2D physicalResolution;
		public VkSurfaceTransformFlagsKHR supportedTransforms;
		public VkBool32 planeReorderPossible;
		public VkBool32 persistentContent;
	}

	[CRepr]
	public struct VkDisplaySurfaceCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDisplaySurfaceCreateFlagsKHR flags;
		public VkDisplayModeKHR displayMode;
		public uint32 planeIndex;
		public uint32 planeStackIndex;
		public VkSurfaceTransformFlagBitsKHR transform;
		public float globalAlpha;
		public VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
		public VkExtent2D imageExtent;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice, uint32*, VkDisplayPropertiesKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice, uint32*, VkDisplayPlanePropertiesKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice, uint32, uint32*, VkDisplayKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDisplayModePropertiesKHR(VkPhysicalDevice, VkDisplayKHR, uint32*, VkDisplayModePropertiesKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateDisplayModeKHR(VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VkDisplayModeKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice, VkDisplayModeKHR, uint32, VkDisplayPlaneCapabilitiesKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateDisplayPlaneSurfaceKHR(VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkDisplayPropertiesKHR* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32 planeIndex, out uint32 pDisplayCount, VkDisplayKHR* pDisplays);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, out uint32 pPropertyCount, VkDisplayModePropertiesKHR* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDisplayModeKHR pMode);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32 planeIndex, out VkDisplayPlaneCapabilitiesKHR pCapabilities);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSurfaceKHR pSurface);

	[CRepr]
	public struct VkDisplayPresentInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRect2D srcRect;
		public VkRect2D dstRect;
		public VkBool32 persistent;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateSharedSwapchainsKHR(VkDevice, uint32, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint32 swapchainCount, VkSwapchainCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, out VkSwapchainKHR pSwapchains);

	public struct VkVideoSessionKHR_T;
	public typealias VkVideoSessionKHR = VkVideoSessionKHR_T*;

	public struct VkVideoSessionParametersKHR_T;
	public typealias VkVideoSessionParametersKHR = VkVideoSessionParametersKHR_T*;

	[CRepr, AllowDuplicates]
	public enum VkQueryResultStatusKHR : c_int
	{
		VK_QUERY_RESULT_STATUS_ERROR_KHR = -1,
		VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0,
		VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1,
		VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = -1000299000,
		VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkVideoCodecOperationFlagBitsKHR : c_int
	{
		VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0,
		VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR = 65536,
		VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR = 131072,
		VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 1,
		VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 2,
		VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR = 4,
		VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR = 262144,
		VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoCodecOperationFlagsKHR = VkVideoCodecOperationFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoChromaSubsamplingFlagBitsKHR : c_int
	{
		VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0,
		VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1,
		VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2,
		VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4,
		VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8,
		VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoChromaSubsamplingFlagsKHR = VkVideoChromaSubsamplingFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoComponentBitDepthFlagBitsKHR : c_int
	{
		VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0,
		VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1,
		VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4,
		VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16,
		VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoComponentBitDepthFlagsKHR = VkVideoComponentBitDepthFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoCapabilityFlagBitsKHR : c_int
	{
		VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1,
		VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2,
		VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoCapabilityFlagsKHR = VkVideoCapabilityFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoSessionCreateFlagBitsKHR : c_int
	{
		VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1,
		VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = 2,
		VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR = 4,
		VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR = 8,
		VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR = 16,
		VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoSessionCreateFlagsKHR = VkVideoSessionCreateFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoSessionParametersCreateFlagBitsKHR : c_int
	{
		VK_VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR = 1,
		VK_VIDEO_SESSION_PARAMETERS_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoSessionParametersCreateFlagsKHR = VkVideoSessionParametersCreateFlagBitsKHR;

	public typealias VkVideoBeginCodingFlagsKHR = VkFlags;

	public typealias VkVideoEndCodingFlagsKHR = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkVideoCodingControlFlagBitsKHR : c_int
	{
		VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1,
		VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 2,
		VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = 4,
		VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoCodingControlFlagsKHR = VkVideoCodingControlFlagBitsKHR;

	[CRepr]
	public struct VkQueueFamilyQueryResultStatusPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 queryResultStatusSupport;
	}

	[CRepr]
	public struct VkQueueFamilyVideoPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoCodecOperationFlagsKHR videoCodecOperations;
	}

	[CRepr]
	public struct VkVideoProfileInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoCodecOperationFlagBitsKHR videoCodecOperation;
		public VkVideoChromaSubsamplingFlagsKHR chromaSubsampling;
		public VkVideoComponentBitDepthFlagsKHR lumaBitDepth;
		public VkVideoComponentBitDepthFlagsKHR chromaBitDepth;
	}

	[CRepr]
	public struct VkVideoProfileListInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 profileCount;
		public VkVideoProfileInfoKHR* pProfiles;
	}

	[CRepr]
	public struct VkVideoCapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoCapabilityFlagsKHR flags;
		public VkDeviceSize minBitstreamBufferOffsetAlignment;
		public VkDeviceSize minBitstreamBufferSizeAlignment;
		public VkExtent2D pictureAccessGranularity;
		public VkExtent2D minCodedExtent;
		public VkExtent2D maxCodedExtent;
		public uint32 maxDpbSlots;
		public uint32 maxActiveReferencePictures;
		public VkExtensionProperties stdHeaderVersion;
	}

	[CRepr]
	public struct VkPhysicalDeviceVideoFormatInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageUsageFlags imageUsage;
	}

	[CRepr]
	public struct VkVideoFormatPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFormat format;
		public VkComponentMapping componentMapping;
		public VkImageCreateFlags imageCreateFlags;
		public VkImageType imageType;
		public VkImageTiling imageTiling;
		public VkImageUsageFlags imageUsageFlags;
	}

	[CRepr]
	public struct VkVideoPictureResourceInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkOffset2D codedOffset;
		public VkExtent2D codedExtent;
		public uint32 baseArrayLayer;
		public VkImageView imageViewBinding;
	}

	[CRepr]
	public struct VkVideoReferenceSlotInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public int32 slotIndex;
		public VkVideoPictureResourceInfoKHR* pPictureResource;
	}

	[CRepr]
	public struct VkVideoSessionMemoryRequirementsKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 memoryBindIndex;
		public VkMemoryRequirements memoryRequirements;
	}

	[CRepr]
	public struct VkBindVideoSessionMemoryInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 memoryBindIndex;
		public VkDeviceMemory memory;
		public VkDeviceSize memoryOffset;
		public VkDeviceSize memorySize;
	}

	[CRepr]
	public struct VkVideoSessionCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 queueFamilyIndex;
		public VkVideoSessionCreateFlagsKHR flags;
		public VkVideoProfileInfoKHR* pVideoProfile;
		public VkFormat pictureFormat;
		public VkExtent2D maxCodedExtent;
		public VkFormat referencePictureFormat;
		public uint32 maxDpbSlots;
		public uint32 maxActiveReferencePictures;
		public VkExtensionProperties* pStdHeaderVersion;
	}

	[CRepr]
	public struct VkVideoSessionParametersCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoSessionParametersCreateFlagsKHR flags;
		public VkVideoSessionParametersKHR videoSessionParametersTemplate;
		public VkVideoSessionKHR videoSession;
	}

	[CRepr]
	public struct VkVideoSessionParametersUpdateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 updateSequenceCount;
	}

	[CRepr]
	public struct VkVideoBeginCodingInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoBeginCodingFlagsKHR flags;
		public VkVideoSessionKHR videoSession;
		public VkVideoSessionParametersKHR videoSessionParameters;
		public uint32 referenceSlotCount;
		public VkVideoReferenceSlotInfoKHR* pReferenceSlots;
	}

	[CRepr]
	public struct VkVideoEndCodingInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEndCodingFlagsKHR flags;
	}

	[CRepr]
	public struct VkVideoCodingControlInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoCodingControlFlagsKHR flags;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice, VkVideoProfileInfoKHR*, VkVideoCapabilitiesKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice, VkPhysicalDeviceVideoFormatInfoKHR*, uint32*, VkVideoFormatPropertiesKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateVideoSessionKHR(VkDevice, VkVideoSessionCreateInfoKHR*, VkAllocationCallbacks*, VkVideoSessionKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyVideoSessionKHR(VkDevice, VkVideoSessionKHR, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetVideoSessionMemoryRequirementsKHR(VkDevice, VkVideoSessionKHR, uint32*, VkVideoSessionMemoryRequirementsKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBindVideoSessionMemoryKHR(VkDevice, VkVideoSessionKHR, uint32, VkBindVideoSessionMemoryInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateVideoSessionParametersKHR(VkDevice, VkVideoSessionParametersCreateInfoKHR*, VkAllocationCallbacks*, VkVideoSessionParametersKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkUpdateVideoSessionParametersKHR(VkDevice, VkVideoSessionParametersKHR, VkVideoSessionParametersUpdateInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyVideoSessionParametersKHR(VkDevice, VkVideoSessionParametersKHR, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginVideoCodingKHR(VkCommandBuffer, VkVideoBeginCodingInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndVideoCodingKHR(VkCommandBuffer, VkVideoEndCodingInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdControlVideoCodingKHR(VkCommandBuffer, VkVideoCodingControlInfoKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkVideoProfileInfoKHR* pVideoProfile, out VkVideoCapabilitiesKHR pCapabilities);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, out uint32 pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateVideoSessionKHR(VkDevice device, VkVideoSessionCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkVideoSessionKHR pVideoSession);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, out uint32 pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32 bindSessionMemoryInfoCount, VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkVideoSessionParametersKHR pVideoSessionParameters);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, VkVideoBeginCodingInfoKHR* pBeginInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, VkVideoEndCodingInfoKHR* pEndCodingInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, VkVideoCodingControlInfoKHR* pCodingControlInfo);

	[CRepr, AllowDuplicates]
	public enum VkVideoDecodeCapabilityFlagBitsKHR : c_int
	{
		VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1,
		VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2,
		VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoDecodeCapabilityFlagsKHR = VkVideoDecodeCapabilityFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoDecodeUsageFlagBitsKHR : c_int
	{
		VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0,
		VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1,
		VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2,
		VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4,
		VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoDecodeUsageFlagsKHR = VkVideoDecodeUsageFlagBitsKHR;

	public typealias VkVideoDecodeFlagsKHR = VkFlags;

	[CRepr]
	public struct VkVideoDecodeCapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoDecodeCapabilityFlagsKHR flags;
	}

	[CRepr]
	public struct VkVideoDecodeUsageInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoDecodeUsageFlagsKHR videoUsageHints;
	}

	[CRepr]
	public struct VkVideoDecodeInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoDecodeFlagsKHR flags;
		public VkBuffer srcBuffer;
		public VkDeviceSize srcBufferOffset;
		public VkDeviceSize srcBufferRange;
		public VkVideoPictureResourceInfoKHR dstPictureResource;
		public VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
		public uint32 referenceSlotCount;
		public VkVideoReferenceSlotInfoKHR* pReferenceSlots;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDecodeVideoKHR(VkCommandBuffer, VkVideoDecodeInfoKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, VkVideoDecodeInfoKHR* pDecodeInfo);

	[CRepr, AllowDuplicates]
	public enum StdVideoH264ChromaFormatIdc : c_int
	{
		STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = 0,
		STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = 1,
		STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = 2,
		STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = 3,
		STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = 2147483647,
		STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264ProfileIdc : c_int
	{
		STD_VIDEO_H264_PROFILE_IDC_BASELINE = 66,
		STD_VIDEO_H264_PROFILE_IDC_MAIN = 77,
		STD_VIDEO_H264_PROFILE_IDC_HIGH = 100,
		STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = 244,
		STD_VIDEO_H264_PROFILE_IDC_INVALID = 2147483647,
		STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264LevelIdc : c_int
	{
		STD_VIDEO_H264_LEVEL_IDC_1_0 = 0,
		STD_VIDEO_H264_LEVEL_IDC_1_1 = 1,
		STD_VIDEO_H264_LEVEL_IDC_1_2 = 2,
		STD_VIDEO_H264_LEVEL_IDC_1_3 = 3,
		STD_VIDEO_H264_LEVEL_IDC_2_0 = 4,
		STD_VIDEO_H264_LEVEL_IDC_2_1 = 5,
		STD_VIDEO_H264_LEVEL_IDC_2_2 = 6,
		STD_VIDEO_H264_LEVEL_IDC_3_0 = 7,
		STD_VIDEO_H264_LEVEL_IDC_3_1 = 8,
		STD_VIDEO_H264_LEVEL_IDC_3_2 = 9,
		STD_VIDEO_H264_LEVEL_IDC_4_0 = 10,
		STD_VIDEO_H264_LEVEL_IDC_4_1 = 11,
		STD_VIDEO_H264_LEVEL_IDC_4_2 = 12,
		STD_VIDEO_H264_LEVEL_IDC_5_0 = 13,
		STD_VIDEO_H264_LEVEL_IDC_5_1 = 14,
		STD_VIDEO_H264_LEVEL_IDC_5_2 = 15,
		STD_VIDEO_H264_LEVEL_IDC_6_0 = 16,
		STD_VIDEO_H264_LEVEL_IDC_6_1 = 17,
		STD_VIDEO_H264_LEVEL_IDC_6_2 = 18,
		STD_VIDEO_H264_LEVEL_IDC_INVALID = 2147483647,
		STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264PocType : c_int
	{
		STD_VIDEO_H264_POC_TYPE_0 = 0,
		STD_VIDEO_H264_POC_TYPE_1 = 1,
		STD_VIDEO_H264_POC_TYPE_2 = 2,
		STD_VIDEO_H264_POC_TYPE_INVALID = 2147483647,
		STD_VIDEO_H264_POC_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264AspectRatioIdc : c_int
	{
		STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = 0,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = 1,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = 2,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = 3,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = 4,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = 5,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = 6,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = 7,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = 8,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = 9,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = 10,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = 11,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = 12,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = 13,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = 14,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = 15,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = 16,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = 255,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = 2147483647,
		STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264WeightedBipredIdc : c_int
	{
		STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = 0,
		STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = 1,
		STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = 2,
		STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = 2147483647,
		STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264ModificationOfPicNumsIdc : c_int
	{
		STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = 0,
		STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = 1,
		STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = 2,
		STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = 3,
		STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = 2147483647,
		STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264MemMgmtControlOp : c_int
	{
		STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = 0,
		STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = 1,
		STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = 2,
		STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = 3,
		STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = 4,
		STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = 5,
		STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = 6,
		STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = 2147483647,
		STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264CabacInitIdc : c_int
	{
		STD_VIDEO_H264_CABAC_INIT_IDC_0 = 0,
		STD_VIDEO_H264_CABAC_INIT_IDC_1 = 1,
		STD_VIDEO_H264_CABAC_INIT_IDC_2 = 2,
		STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = 2147483647,
		STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264DisableDeblockingFilterIdc : c_int
	{
		STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = 0,
		STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = 1,
		STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = 2,
		STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = 2147483647,
		STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264SliceType : c_int
	{
		STD_VIDEO_H264_SLICE_TYPE_P = 0,
		STD_VIDEO_H264_SLICE_TYPE_B = 1,
		STD_VIDEO_H264_SLICE_TYPE_I = 2,
		STD_VIDEO_H264_SLICE_TYPE_INVALID = 2147483647,
		STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264PictureType : c_int
	{
		STD_VIDEO_H264_PICTURE_TYPE_P = 0,
		STD_VIDEO_H264_PICTURE_TYPE_B = 1,
		STD_VIDEO_H264_PICTURE_TYPE_I = 2,
		STD_VIDEO_H264_PICTURE_TYPE_IDR = 5,
		STD_VIDEO_H264_PICTURE_TYPE_INVALID = 2147483647,
		STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH264NonVclNaluType : c_int
	{
		STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = 0,
		STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = 1,
		STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = 2,
		STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = 3,
		STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = 4,
		STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = 5,
		STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = 6,
		STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = 2147483647,
		STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr]
	public struct StdVideoH264SpsVuiFlags
	{
		public uint32 aspect_ratio_info_present_flag;
		public uint32 overscan_info_present_flag;
		public uint32 overscan_appropriate_flag;
		public uint32 video_signal_type_present_flag;
		public uint32 video_full_range_flag;
		public uint32 color_description_present_flag;
		public uint32 chroma_loc_info_present_flag;
		public uint32 timing_info_present_flag;
		public uint32 fixed_frame_rate_flag;
		public uint32 bitstream_restriction_flag;
		public uint32 nal_hrd_parameters_present_flag;
		public uint32 vcl_hrd_parameters_present_flag;
	}

	[CRepr]
	public struct StdVideoH264HrdParameters
	{
		public uint8 cpb_cnt_minus1;
		public uint8 bit_rate_scale;
		public uint8 cpb_size_scale;
		public uint8 reserved1;
		public uint32[32] bit_rate_value_minus1;
		public uint32[32] cpb_size_value_minus1;
		public uint8[32] cbr_flag;
		public uint32 initial_cpb_removal_delay_length_minus1;
		public uint32 cpb_removal_delay_length_minus1;
		public uint32 dpb_output_delay_length_minus1;
		public uint32 time_offset_length;
	}

	[CRepr]
	public struct StdVideoH264SequenceParameterSetVui
	{
		public StdVideoH264SpsVuiFlags flags;
		public StdVideoH264AspectRatioIdc aspect_ratio_idc;
		public uint16 sar_width;
		public uint16 sar_height;
		public uint8 video_format;
		public uint8 colour_primaries;
		public uint8 transfer_characteristics;
		public uint8 matrix_coefficients;
		public uint32 num_units_in_tick;
		public uint32 time_scale;
		public uint8 max_num_reorder_frames;
		public uint8 max_dec_frame_buffering;
		public uint8 chroma_sample_loc_type_top_field;
		public uint8 chroma_sample_loc_type_bottom_field;
		public uint32 reserved1;
		public StdVideoH264HrdParameters* pHrdParameters;
	}

	[CRepr]
	public struct StdVideoH264SpsFlags
	{
		public uint32 constraint_set0_flag;
		public uint32 constraint_set1_flag;
		public uint32 constraint_set2_flag;
		public uint32 constraint_set3_flag;
		public uint32 constraint_set4_flag;
		public uint32 constraint_set5_flag;
		public uint32 direct_8x8_inference_flag;
		public uint32 mb_adaptive_frame_field_flag;
		public uint32 frame_mbs_only_flag;
		public uint32 delta_pic_order_always_zero_flag;
		public uint32 separate_colour_plane_flag;
		public uint32 gaps_in_frame_num_value_allowed_flag;
		public uint32 qpprime_y_zero_transform_bypass_flag;
		public uint32 frame_cropping_flag;
		public uint32 seq_scaling_matrix_present_flag;
		public uint32 vui_parameters_present_flag;
	}

	[CRepr]
	public struct StdVideoH264ScalingLists
	{
		public uint16 scaling_list_present_mask;
		public uint16 use_default_scaling_matrix_mask;
		public uint8[16][6] ScalingList4x4;
		public uint8[64][6] ScalingList8x8;
	}

	[CRepr]
	public struct StdVideoH264SequenceParameterSet
	{
		public StdVideoH264SpsFlags flags;
		public StdVideoH264ProfileIdc profile_idc;
		public StdVideoH264LevelIdc level_idc;
		public StdVideoH264ChromaFormatIdc chroma_format_idc;
		public uint8 seq_parameter_set_id;
		public uint8 bit_depth_luma_minus8;
		public uint8 bit_depth_chroma_minus8;
		public uint8 log2_max_frame_num_minus4;
		public StdVideoH264PocType pic_order_cnt_type;
		public int32 offset_for_non_ref_pic;
		public int32 offset_for_top_to_bottom_field;
		public uint8 log2_max_pic_order_cnt_lsb_minus4;
		public uint8 num_ref_frames_in_pic_order_cnt_cycle;
		public uint8 max_num_ref_frames;
		public uint8 reserved1;
		public uint32 pic_width_in_mbs_minus1;
		public uint32 pic_height_in_map_units_minus1;
		public uint32 frame_crop_left_offset;
		public uint32 frame_crop_right_offset;
		public uint32 frame_crop_top_offset;
		public uint32 frame_crop_bottom_offset;
		public uint32 reserved2;
		public int32* pOffsetForRefFrame;
		public StdVideoH264ScalingLists* pScalingLists;
		public StdVideoH264SequenceParameterSetVui* pSequenceParameterSetVui;
	}

	[CRepr]
	public struct StdVideoH264PpsFlags
	{
		public uint32 transform_8x8_mode_flag;
		public uint32 redundant_pic_cnt_present_flag;
		public uint32 constrained_intra_pred_flag;
		public uint32 deblocking_filter_control_present_flag;
		public uint32 weighted_pred_flag;
		public uint32 bottom_field_pic_order_in_frame_present_flag;
		public uint32 entropy_coding_mode_flag;
		public uint32 pic_scaling_matrix_present_flag;
	}

	[CRepr]
	public struct StdVideoH264PictureParameterSet
	{
		public StdVideoH264PpsFlags flags;
		public uint8 seq_parameter_set_id;
		public uint8 pic_parameter_set_id;
		public uint8 num_ref_idx_l0_default_active_minus1;
		public uint8 num_ref_idx_l1_default_active_minus1;
		public StdVideoH264WeightedBipredIdc weighted_bipred_idc;
		public int8 pic_init_qp_minus26;
		public int8 pic_init_qs_minus26;
		public int8 chroma_qp_index_offset;
		public int8 second_chroma_qp_index_offset;
		public StdVideoH264ScalingLists* pScalingLists;
	}

	[CRepr]
	public struct StdVideoEncodeH264WeightTableFlags
	{
		public uint32 luma_weight_l0_flag;
		public uint32 chroma_weight_l0_flag;
		public uint32 luma_weight_l1_flag;
		public uint32 chroma_weight_l1_flag;
	}

	[CRepr]
	public struct StdVideoEncodeH264WeightTable
	{
		public StdVideoEncodeH264WeightTableFlags flags;
		public uint8 luma_log2_weight_denom;
		public uint8 chroma_log2_weight_denom;
		public int8[32] luma_weight_l0;
		public int8[32] luma_offset_l0;
		public int8[2][32] chroma_weight_l0;
		public int8[2][32] chroma_offset_l0;
		public int8[32] luma_weight_l1;
		public int8[32] luma_offset_l1;
		public int8[2][32] chroma_weight_l1;
		public int8[2][32] chroma_offset_l1;
	}

	[CRepr]
	public struct StdVideoEncodeH264SliceHeaderFlags
	{
		public uint32 direct_spatial_mv_pred_flag;
		public uint32 num_ref_idx_active_override_flag;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeH264PictureInfoFlags
	{
		public uint32 IdrPicFlag;
		public uint32 is_reference;
		public uint32 no_output_of_prior_pics_flag;
		public uint32 long_term_reference_flag;
		public uint32 adaptive_ref_pic_marking_mode_flag;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeH264ReferenceInfoFlags
	{
		public uint32 used_for_long_term_reference;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeH264ReferenceListsInfoFlags
	{
		public uint32 ref_pic_list_modification_flag_l0;
		public uint32 ref_pic_list_modification_flag_l1;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeH264RefListModEntry
	{
		public StdVideoH264ModificationOfPicNumsIdc modification_of_pic_nums_idc;
		public uint16 abs_diff_pic_num_minus1;
		public uint16 long_term_pic_num;
	}

	[CRepr]
	public struct StdVideoEncodeH264RefPicMarkingEntry
	{
		public StdVideoH264MemMgmtControlOp memory_management_control_operation;
		public uint16 difference_of_pic_nums_minus1;
		public uint16 long_term_pic_num;
		public uint16 long_term_frame_idx;
		public uint16 max_long_term_frame_idx_plus1;
	}

	[CRepr]
	public struct StdVideoEncodeH264ReferenceListsInfo
	{
		public StdVideoEncodeH264ReferenceListsInfoFlags flags;
		public uint8 num_ref_idx_l0_active_minus1;
		public uint8 num_ref_idx_l1_active_minus1;
		public uint8[32] RefPicList0;
		public uint8[32] RefPicList1;
		public uint8 refList0ModOpCount;
		public uint8 refList1ModOpCount;
		public uint8 refPicMarkingOpCount;
		public uint8[7] reserved1;
		public StdVideoEncodeH264RefListModEntry* pRefList0ModOperations;
		public StdVideoEncodeH264RefListModEntry* pRefList1ModOperations;
		public StdVideoEncodeH264RefPicMarkingEntry* pRefPicMarkingOperations;
	}

	[CRepr]
	public struct StdVideoEncodeH264PictureInfo
	{
		public StdVideoEncodeH264PictureInfoFlags flags;
		public uint8 seq_parameter_set_id;
		public uint8 pic_parameter_set_id;
		public uint16 idr_pic_id;
		public StdVideoH264PictureType primary_pic_type;
		public uint32 frame_num;
		public int32 PicOrderCnt;
		public uint8 temporal_id;
		public uint8[3] reserved1;
		public StdVideoEncodeH264ReferenceListsInfo* pRefLists;
	}

	[CRepr]
	public struct StdVideoEncodeH264ReferenceInfo
	{
		public StdVideoEncodeH264ReferenceInfoFlags flags;
		public StdVideoH264PictureType primary_pic_type;
		public uint32 FrameNum;
		public int32 PicOrderCnt;
		public uint16 long_term_pic_num;
		public uint16 long_term_frame_idx;
		public uint8 temporal_id;
	}

	[CRepr]
	public struct StdVideoEncodeH264SliceHeader
	{
		public StdVideoEncodeH264SliceHeaderFlags flags;
		public uint32 first_mb_in_slice;
		public StdVideoH264SliceType slice_type;
		public int8 slice_alpha_c0_offset_div2;
		public int8 slice_beta_offset_div2;
		public int8 slice_qp_delta;
		public uint8 reserved1;
		public StdVideoH264CabacInitIdc cabac_init_idc;
		public StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc;
		public StdVideoEncodeH264WeightTable* pWeightTable;
	}

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeH264CapabilityFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1,
		VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2,
		VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = 4,
		VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = 8,
		VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16,
		VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32,
		VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64,
		VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = 128,
		VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = 256,
		VK_VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR = 512,
		VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeH264CapabilityFlagsKHR = VkVideoEncodeH264CapabilityFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeH264StdFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1,
		VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = 2,
		VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = 4,
		VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 8,
		VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 16,
		VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = 32,
		VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64,
		VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = 128,
		VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = 256,
		VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = 512,
		VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = 1024,
		VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = 2048,
		VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = 4096,
		VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = 8192,
		VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384,
		VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = 32768,
		VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = 65536,
		VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = 131072,
		VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = 524288,
		VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576,
		VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeH264StdFlagsKHR = VkVideoEncodeH264StdFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeH264RateControlFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1,
		VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2,
		VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4,
		VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8,
		VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 16,
		VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeH264RateControlFlagsKHR = VkVideoEncodeH264RateControlFlagBitsKHR;

	[CRepr]
	public struct VkVideoEncodeH264CapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeH264CapabilityFlagsKHR flags;
		public StdVideoH264LevelIdc maxLevelIdc;
		public uint32 maxSliceCount;
		public uint32 maxPPictureL0ReferenceCount;
		public uint32 maxBPictureL0ReferenceCount;
		public uint32 maxL1ReferenceCount;
		public uint32 maxTemporalLayerCount;
		public VkBool32 expectDyadicTemporalLayerPattern;
		public int32 minQp;
		public int32 maxQp;
		public VkBool32 prefersGopRemainingFrames;
		public VkBool32 requiresGopRemainingFrames;
		public VkVideoEncodeH264StdFlagsKHR stdSyntaxFlags;
	}

	[CRepr]
	public struct VkVideoEncodeH264QpKHR
	{
		public int32 qpI;
		public int32 qpP;
		public int32 qpB;
	}

	[CRepr]
	public struct VkVideoEncodeH264QualityLevelPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeH264RateControlFlagsKHR preferredRateControlFlags;
		public uint32 preferredGopFrameCount;
		public uint32 preferredIdrPeriod;
		public uint32 preferredConsecutiveBFrameCount;
		public uint32 preferredTemporalLayerCount;
		public VkVideoEncodeH264QpKHR preferredConstantQp;
		public uint32 preferredMaxL0ReferenceCount;
		public uint32 preferredMaxL1ReferenceCount;
		public VkBool32 preferredStdEntropyCodingModeFlag;
	}

	[CRepr]
	public struct VkVideoEncodeH264SessionCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 useMaxLevelIdc;
		public StdVideoH264LevelIdc maxLevelIdc;
	}

	[CRepr]
	public struct VkVideoEncodeH264SessionParametersAddInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 stdSPSCount;
		public StdVideoH264SequenceParameterSet* pStdSPSs;
		public uint32 stdPPSCount;
		public StdVideoH264PictureParameterSet* pStdPPSs;
	}

	[CRepr]
	public struct VkVideoEncodeH264SessionParametersCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxStdSPSCount;
		public uint32 maxStdPPSCount;
		public VkVideoEncodeH264SessionParametersAddInfoKHR* pParametersAddInfo;
	}

	[CRepr]
	public struct VkVideoEncodeH264SessionParametersGetInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 writeStdSPS;
		public VkBool32 writeStdPPS;
		public uint32 stdSPSId;
		public uint32 stdPPSId;
	}

	[CRepr]
	public struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 hasStdSPSOverrides;
		public VkBool32 hasStdPPSOverrides;
	}

	[CRepr]
	public struct VkVideoEncodeH264NaluSliceInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public int32 constantQp;
		public StdVideoEncodeH264SliceHeader* pStdSliceHeader;
	}

	[CRepr]
	public struct VkVideoEncodeH264PictureInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 naluSliceEntryCount;
		public VkVideoEncodeH264NaluSliceInfoKHR* pNaluSliceEntries;
		public StdVideoEncodeH264PictureInfo* pStdPictureInfo;
		public VkBool32 generatePrefixNalu;
	}

	[CRepr]
	public struct VkVideoEncodeH264DpbSlotInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoEncodeH264ReferenceInfo* pStdReferenceInfo;
	}

	[CRepr]
	public struct VkVideoEncodeH264ProfileInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoH264ProfileIdc stdProfileIdc;
	}

	[CRepr]
	public struct VkVideoEncodeH264RateControlInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeH264RateControlFlagsKHR flags;
		public uint32 gopFrameCount;
		public uint32 idrPeriod;
		public uint32 consecutiveBFrameCount;
		public uint32 temporalLayerCount;
	}

	[CRepr]
	public struct VkVideoEncodeH264FrameSizeKHR
	{
		public uint32 frameISize;
		public uint32 framePSize;
		public uint32 frameBSize;
	}

	[CRepr]
	public struct VkVideoEncodeH264RateControlLayerInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 useMinQp;
		public VkVideoEncodeH264QpKHR minQp;
		public VkBool32 useMaxQp;
		public VkVideoEncodeH264QpKHR maxQp;
		public VkBool32 useMaxFrameSize;
		public VkVideoEncodeH264FrameSizeKHR maxFrameSize;
	}

	[CRepr]
	public struct VkVideoEncodeH264GopRemainingFrameInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 useGopRemainingFrames;
		public uint32 gopRemainingI;
		public uint32 gopRemainingP;
		public uint32 gopRemainingB;
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH265ChromaFormatIdc : c_int
	{
		STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = 0,
		STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = 1,
		STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = 2,
		STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = 3,
		STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = 2147483647,
		STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH265ProfileIdc : c_int
	{
		STD_VIDEO_H265_PROFILE_IDC_MAIN = 1,
		STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = 2,
		STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = 3,
		STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = 4,
		STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = 9,
		STD_VIDEO_H265_PROFILE_IDC_INVALID = 2147483647,
		STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH265LevelIdc : c_int
	{
		STD_VIDEO_H265_LEVEL_IDC_1_0 = 0,
		STD_VIDEO_H265_LEVEL_IDC_2_0 = 1,
		STD_VIDEO_H265_LEVEL_IDC_2_1 = 2,
		STD_VIDEO_H265_LEVEL_IDC_3_0 = 3,
		STD_VIDEO_H265_LEVEL_IDC_3_1 = 4,
		STD_VIDEO_H265_LEVEL_IDC_4_0 = 5,
		STD_VIDEO_H265_LEVEL_IDC_4_1 = 6,
		STD_VIDEO_H265_LEVEL_IDC_5_0 = 7,
		STD_VIDEO_H265_LEVEL_IDC_5_1 = 8,
		STD_VIDEO_H265_LEVEL_IDC_5_2 = 9,
		STD_VIDEO_H265_LEVEL_IDC_6_0 = 10,
		STD_VIDEO_H265_LEVEL_IDC_6_1 = 11,
		STD_VIDEO_H265_LEVEL_IDC_6_2 = 12,
		STD_VIDEO_H265_LEVEL_IDC_INVALID = 2147483647,
		STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH265SliceType : c_int
	{
		STD_VIDEO_H265_SLICE_TYPE_B = 0,
		STD_VIDEO_H265_SLICE_TYPE_P = 1,
		STD_VIDEO_H265_SLICE_TYPE_I = 2,
		STD_VIDEO_H265_SLICE_TYPE_INVALID = 2147483647,
		STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH265PictureType : c_int
	{
		STD_VIDEO_H265_PICTURE_TYPE_P = 0,
		STD_VIDEO_H265_PICTURE_TYPE_B = 1,
		STD_VIDEO_H265_PICTURE_TYPE_I = 2,
		STD_VIDEO_H265_PICTURE_TYPE_IDR = 3,
		STD_VIDEO_H265_PICTURE_TYPE_INVALID = 2147483647,
		STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoH265AspectRatioIdc : c_int
	{
		STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = 0,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = 1,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = 2,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = 3,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = 4,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = 5,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = 6,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = 7,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = 8,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = 9,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = 10,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = 11,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = 12,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = 13,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = 14,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = 15,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = 16,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = 255,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = 2147483647,
		STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM = 2147483647,
	}

	[CRepr]
	public struct StdVideoH265DecPicBufMgr
	{
		public uint32[7] max_latency_increase_plus1;
		public uint8[7] max_dec_pic_buffering_minus1;
		public uint8[7] max_num_reorder_pics;
	}

	[CRepr]
	public struct StdVideoH265SubLayerHrdParameters
	{
		public uint32[32] bit_rate_value_minus1;
		public uint32[32] cpb_size_value_minus1;
		public uint32[32] cpb_size_du_value_minus1;
		public uint32[32] bit_rate_du_value_minus1;
		public uint32 cbr_flag;
	}

	[CRepr]
	public struct StdVideoH265HrdFlags
	{
		public uint32 nal_hrd_parameters_present_flag;
		public uint32 vcl_hrd_parameters_present_flag;
		public uint32 sub_pic_hrd_params_present_flag;
		public uint32 sub_pic_cpb_params_in_pic_timing_sei_flag;
		public uint32 fixed_pic_rate_general_flag;
		public uint32 fixed_pic_rate_within_cvs_flag;
		public uint32 low_delay_hrd_flag;
	}

	[CRepr]
	public struct StdVideoH265HrdParameters
	{
		public StdVideoH265HrdFlags flags;
		public uint8 tick_divisor_minus2;
		public uint8 du_cpb_removal_delay_increment_length_minus1;
		public uint8 dpb_output_delay_du_length_minus1;
		public uint8 bit_rate_scale;
		public uint8 cpb_size_scale;
		public uint8 cpb_size_du_scale;
		public uint8 initial_cpb_removal_delay_length_minus1;
		public uint8 au_cpb_removal_delay_length_minus1;
		public uint8 dpb_output_delay_length_minus1;
		public uint8[7] cpb_cnt_minus1;
		public uint16[7] elemental_duration_in_tc_minus1;
		public uint16[3] reserved;
		public StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal;
		public StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl;
	}

	[CRepr]
	public struct StdVideoH265VpsFlags
	{
		public uint32 vps_temporal_id_nesting_flag;
		public uint32 vps_sub_layer_ordering_info_present_flag;
		public uint32 vps_timing_info_present_flag;
		public uint32 vps_poc_proportional_to_timing_flag;
	}

	[CRepr]
	public struct StdVideoH265ProfileTierLevelFlags
	{
		public uint32 general_tier_flag;
		public uint32 general_progressive_source_flag;
		public uint32 general_interlaced_source_flag;
		public uint32 general_non_packed_constraint_flag;
		public uint32 general_frame_only_constraint_flag;
	}

	[CRepr]
	public struct StdVideoH265ProfileTierLevel
	{
		public StdVideoH265ProfileTierLevelFlags flags;
		public StdVideoH265ProfileIdc general_profile_idc;
		public StdVideoH265LevelIdc general_level_idc;
	}

	[CRepr]
	public struct StdVideoH265VideoParameterSet
	{
		public StdVideoH265VpsFlags flags;
		public uint8 vps_video_parameter_set_id;
		public uint8 vps_max_sub_layers_minus1;
		public uint8 reserved1;
		public uint8 reserved2;
		public uint32 vps_num_units_in_tick;
		public uint32 vps_time_scale;
		public uint32 vps_num_ticks_poc_diff_one_minus1;
		public uint32 reserved3;
		public StdVideoH265DecPicBufMgr* pDecPicBufMgr;
		public StdVideoH265HrdParameters* pHrdParameters;
		public StdVideoH265ProfileTierLevel* pProfileTierLevel;
	}

	[CRepr]
	public struct StdVideoH265ScalingLists
	{
		public uint8[16][6] ScalingList4x4;
		public uint8[64][6] ScalingList8x8;
		public uint8[64][6] ScalingList16x16;
		public uint8[64][2] ScalingList32x32;
		public uint8[6] ScalingListDCCoef16x16;
		public uint8[2] ScalingListDCCoef32x32;
	}

	[CRepr]
	public struct StdVideoH265SpsVuiFlags
	{
		public uint32 aspect_ratio_info_present_flag;
		public uint32 overscan_info_present_flag;
		public uint32 overscan_appropriate_flag;
		public uint32 video_signal_type_present_flag;
		public uint32 video_full_range_flag;
		public uint32 colour_description_present_flag;
		public uint32 chroma_loc_info_present_flag;
		public uint32 neutral_chroma_indication_flag;
		public uint32 field_seq_flag;
		public uint32 frame_field_info_present_flag;
		public uint32 default_display_window_flag;
		public uint32 vui_timing_info_present_flag;
		public uint32 vui_poc_proportional_to_timing_flag;
		public uint32 vui_hrd_parameters_present_flag;
		public uint32 bitstream_restriction_flag;
		public uint32 tiles_fixed_structure_flag;
		public uint32 motion_vectors_over_pic_boundaries_flag;
		public uint32 restricted_ref_pic_lists_flag;
	}

	[CRepr]
	public struct StdVideoH265SequenceParameterSetVui
	{
		public StdVideoH265SpsVuiFlags flags;
		public StdVideoH265AspectRatioIdc aspect_ratio_idc;
		public uint16 sar_width;
		public uint16 sar_height;
		public uint8 video_format;
		public uint8 colour_primaries;
		public uint8 transfer_characteristics;
		public uint8 matrix_coeffs;
		public uint8 chroma_sample_loc_type_top_field;
		public uint8 chroma_sample_loc_type_bottom_field;
		public uint8 reserved1;
		public uint8 reserved2;
		public uint16 def_disp_win_left_offset;
		public uint16 def_disp_win_right_offset;
		public uint16 def_disp_win_top_offset;
		public uint16 def_disp_win_bottom_offset;
		public uint32 vui_num_units_in_tick;
		public uint32 vui_time_scale;
		public uint32 vui_num_ticks_poc_diff_one_minus1;
		public uint16 min_spatial_segmentation_idc;
		public uint16 reserved3;
		public uint8 max_bytes_per_pic_denom;
		public uint8 max_bits_per_min_cu_denom;
		public uint8 log2_max_mv_length_horizontal;
		public uint8 log2_max_mv_length_vertical;
		public StdVideoH265HrdParameters* pHrdParameters;
	}

	[CRepr]
	public struct StdVideoH265PredictorPaletteEntries
	{
		public uint16[128][3] PredictorPaletteEntries;
	}

	[CRepr]
	public struct StdVideoH265SpsFlags
	{
		public uint32 sps_temporal_id_nesting_flag;
		public uint32 separate_colour_plane_flag;
		public uint32 conformance_window_flag;
		public uint32 sps_sub_layer_ordering_info_present_flag;
		public uint32 scaling_list_enabled_flag;
		public uint32 sps_scaling_list_data_present_flag;
		public uint32 amp_enabled_flag;
		public uint32 sample_adaptive_offset_enabled_flag;
		public uint32 pcm_enabled_flag;
		public uint32 pcm_loop_filter_disabled_flag;
		public uint32 long_term_ref_pics_present_flag;
		public uint32 sps_temporal_mvp_enabled_flag;
		public uint32 strong_intra_smoothing_enabled_flag;
		public uint32 vui_parameters_present_flag;
		public uint32 sps_extension_present_flag;
		public uint32 sps_range_extension_flag;
		public uint32 transform_skip_rotation_enabled_flag;
		public uint32 transform_skip_context_enabled_flag;
		public uint32 implicit_rdpcm_enabled_flag;
		public uint32 explicit_rdpcm_enabled_flag;
		public uint32 extended_precision_processing_flag;
		public uint32 intra_smoothing_disabled_flag;
		public uint32 high_precision_offsets_enabled_flag;
		public uint32 persistent_rice_adaptation_enabled_flag;
		public uint32 cabac_bypass_alignment_enabled_flag;
		public uint32 sps_scc_extension_flag;
		public uint32 sps_curr_pic_ref_enabled_flag;
		public uint32 palette_mode_enabled_flag;
		public uint32 sps_palette_predictor_initializers_present_flag;
		public uint32 intra_boundary_filtering_disabled_flag;
	}

	[CRepr]
	public struct StdVideoH265ShortTermRefPicSetFlags
	{
		public uint32 inter_ref_pic_set_prediction_flag;
		public uint32 delta_rps_sign;
	}

	[CRepr]
	public struct StdVideoH265ShortTermRefPicSet
	{
		public StdVideoH265ShortTermRefPicSetFlags flags;
		public uint32 delta_idx_minus1;
		public uint16 use_delta_flag;
		public uint16 abs_delta_rps_minus1;
		public uint16 used_by_curr_pic_flag;
		public uint16 used_by_curr_pic_s0_flag;
		public uint16 used_by_curr_pic_s1_flag;
		public uint16 reserved1;
		public uint8 reserved2;
		public uint8 reserved3;
		public uint8 num_negative_pics;
		public uint8 num_positive_pics;
		public uint16[16] delta_poc_s0_minus1;
		public uint16[16] delta_poc_s1_minus1;
	}

	[CRepr]
	public struct StdVideoH265LongTermRefPicsSps
	{
		public uint32 used_by_curr_pic_lt_sps_flag;
		public uint32[32] lt_ref_pic_poc_lsb_sps;
	}

	[CRepr]
	public struct StdVideoH265SequenceParameterSet
	{
		public StdVideoH265SpsFlags flags;
		public StdVideoH265ChromaFormatIdc chroma_format_idc;
		public uint32 pic_width_in_luma_samples;
		public uint32 pic_height_in_luma_samples;
		public uint8 sps_video_parameter_set_id;
		public uint8 sps_max_sub_layers_minus1;
		public uint8 sps_seq_parameter_set_id;
		public uint8 bit_depth_luma_minus8;
		public uint8 bit_depth_chroma_minus8;
		public uint8 log2_max_pic_order_cnt_lsb_minus4;
		public uint8 log2_min_luma_coding_block_size_minus3;
		public uint8 log2_diff_max_min_luma_coding_block_size;
		public uint8 log2_min_luma_transform_block_size_minus2;
		public uint8 log2_diff_max_min_luma_transform_block_size;
		public uint8 max_transform_hierarchy_depth_inter;
		public uint8 max_transform_hierarchy_depth_intra;
		public uint8 num_short_term_ref_pic_sets;
		public uint8 num_long_term_ref_pics_sps;
		public uint8 pcm_sample_bit_depth_luma_minus1;
		public uint8 pcm_sample_bit_depth_chroma_minus1;
		public uint8 log2_min_pcm_luma_coding_block_size_minus3;
		public uint8 log2_diff_max_min_pcm_luma_coding_block_size;
		public uint8 reserved1;
		public uint8 reserved2;
		public uint8 palette_max_size;
		public uint8 delta_palette_max_predictor_size;
		public uint8 motion_vector_resolution_control_idc;
		public uint8 sps_num_palette_predictor_initializers_minus1;
		public uint32 conf_win_left_offset;
		public uint32 conf_win_right_offset;
		public uint32 conf_win_top_offset;
		public uint32 conf_win_bottom_offset;
		public StdVideoH265ProfileTierLevel* pProfileTierLevel;
		public StdVideoH265DecPicBufMgr* pDecPicBufMgr;
		public StdVideoH265ScalingLists* pScalingLists;
		public StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
		public StdVideoH265LongTermRefPicsSps* pLongTermRefPicsSps;
		public StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui;
		public StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
	}

	[CRepr]
	public struct StdVideoH265PpsFlags
	{
		public uint32 dependent_slice_segments_enabled_flag;
		public uint32 output_flag_present_flag;
		public uint32 sign_data_hiding_enabled_flag;
		public uint32 cabac_init_present_flag;
		public uint32 constrained_intra_pred_flag;
		public uint32 transform_skip_enabled_flag;
		public uint32 cu_qp_delta_enabled_flag;
		public uint32 pps_slice_chroma_qp_offsets_present_flag;
		public uint32 weighted_pred_flag;
		public uint32 weighted_bipred_flag;
		public uint32 transquant_bypass_enabled_flag;
		public uint32 tiles_enabled_flag;
		public uint32 entropy_coding_sync_enabled_flag;
		public uint32 uniform_spacing_flag;
		public uint32 loop_filter_across_tiles_enabled_flag;
		public uint32 pps_loop_filter_across_slices_enabled_flag;
		public uint32 deblocking_filter_control_present_flag;
		public uint32 deblocking_filter_override_enabled_flag;
		public uint32 pps_deblocking_filter_disabled_flag;
		public uint32 pps_scaling_list_data_present_flag;
		public uint32 lists_modification_present_flag;
		public uint32 slice_segment_header_extension_present_flag;
		public uint32 pps_extension_present_flag;
		public uint32 cross_component_prediction_enabled_flag;
		public uint32 chroma_qp_offset_list_enabled_flag;
		public uint32 pps_curr_pic_ref_enabled_flag;
		public uint32 residual_adaptive_colour_transform_enabled_flag;
		public uint32 pps_slice_act_qp_offsets_present_flag;
		public uint32 pps_palette_predictor_initializers_present_flag;
		public uint32 monochrome_palette_flag;
		public uint32 pps_range_extension_flag;
	}

	[CRepr]
	public struct StdVideoH265PictureParameterSet
	{
		public StdVideoH265PpsFlags flags;
		public uint8 pps_pic_parameter_set_id;
		public uint8 pps_seq_parameter_set_id;
		public uint8 sps_video_parameter_set_id;
		public uint8 num_extra_slice_header_bits;
		public uint8 num_ref_idx_l0_default_active_minus1;
		public uint8 num_ref_idx_l1_default_active_minus1;
		public int8 init_qp_minus26;
		public uint8 diff_cu_qp_delta_depth;
		public int8 pps_cb_qp_offset;
		public int8 pps_cr_qp_offset;
		public int8 pps_beta_offset_div2;
		public int8 pps_tc_offset_div2;
		public uint8 log2_parallel_merge_level_minus2;
		public uint8 log2_max_transform_skip_block_size_minus2;
		public uint8 diff_cu_chroma_qp_offset_depth;
		public uint8 chroma_qp_offset_list_len_minus1;
		public int8[6] cb_qp_offset_list;
		public int8[6] cr_qp_offset_list;
		public uint8 log2_sao_offset_scale_luma;
		public uint8 log2_sao_offset_scale_chroma;
		public int8 pps_act_y_qp_offset_plus5;
		public int8 pps_act_cb_qp_offset_plus5;
		public int8 pps_act_cr_qp_offset_plus3;
		public uint8 pps_num_palette_predictor_initializers;
		public uint8 luma_bit_depth_entry_minus8;
		public uint8 chroma_bit_depth_entry_minus8;
		public uint8 num_tile_columns_minus1;
		public uint8 num_tile_rows_minus1;
		public uint8 reserved1;
		public uint8 reserved2;
		public uint16[19] column_width_minus1;
		public uint16[21] row_height_minus1;
		public uint32 reserved3;
		public StdVideoH265ScalingLists* pScalingLists;
		public StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
	}

	[CRepr]
	public struct StdVideoEncodeH265WeightTableFlags
	{
		public uint16 luma_weight_l0_flag;
		public uint16 chroma_weight_l0_flag;
		public uint16 luma_weight_l1_flag;
		public uint16 chroma_weight_l1_flag;
	}

	[CRepr]
	public struct StdVideoEncodeH265WeightTable
	{
		public StdVideoEncodeH265WeightTableFlags flags;
		public uint8 luma_log2_weight_denom;
		public int8 delta_chroma_log2_weight_denom;
		public int8[15] delta_luma_weight_l0;
		public int8[15] luma_offset_l0;
		public int8[2][15] delta_chroma_weight_l0;
		public int8[2][15] delta_chroma_offset_l0;
		public int8[15] delta_luma_weight_l1;
		public int8[15] luma_offset_l1;
		public int8[2][15] delta_chroma_weight_l1;
		public int8[2][15] delta_chroma_offset_l1;
	}

	[CRepr]
	public struct StdVideoEncodeH265SliceSegmentHeaderFlags
	{
		public uint32 first_slice_segment_in_pic_flag;
		public uint32 dependent_slice_segment_flag;
		public uint32 slice_sao_luma_flag;
		public uint32 slice_sao_chroma_flag;
		public uint32 num_ref_idx_active_override_flag;
		public uint32 mvd_l1_zero_flag;
		public uint32 cabac_init_flag;
		public uint32 cu_chroma_qp_offset_enabled_flag;
		public uint32 deblocking_filter_override_flag;
		public uint32 slice_deblocking_filter_disabled_flag;
		public uint32 collocated_from_l0_flag;
		public uint32 slice_loop_filter_across_slices_enabled_flag;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeH265SliceSegmentHeader
	{
		public StdVideoEncodeH265SliceSegmentHeaderFlags flags;
		public StdVideoH265SliceType slice_type;
		public uint32 slice_segment_address;
		public uint8 collocated_ref_idx;
		public uint8 MaxNumMergeCand;
		public int8 slice_cb_qp_offset;
		public int8 slice_cr_qp_offset;
		public int8 slice_beta_offset_div2;
		public int8 slice_tc_offset_div2;
		public int8 slice_act_y_qp_offset;
		public int8 slice_act_cb_qp_offset;
		public int8 slice_act_cr_qp_offset;
		public int8 slice_qp_delta;
		public uint16 reserved1;
		public StdVideoEncodeH265WeightTable* pWeightTable;
	}

	[CRepr]
	public struct StdVideoEncodeH265ReferenceListsInfoFlags
	{
		public uint32 ref_pic_list_modification_flag_l0;
		public uint32 ref_pic_list_modification_flag_l1;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeH265ReferenceListsInfo
	{
		public StdVideoEncodeH265ReferenceListsInfoFlags flags;
		public uint8 num_ref_idx_l0_active_minus1;
		public uint8 num_ref_idx_l1_active_minus1;
		public uint8[15] RefPicList0;
		public uint8[15] RefPicList1;
		public uint8[15] list_entry_l0;
		public uint8[15] list_entry_l1;
	}

	[CRepr]
	public struct StdVideoEncodeH265PictureInfoFlags
	{
		public uint32 is_reference;
		public uint32 IrapPicFlag;
		public uint32 used_for_long_term_reference;
		public uint32 discardable_flag;
		public uint32 cross_layer_bla_flag;
		public uint32 pic_output_flag;
		public uint32 no_output_of_prior_pics_flag;
		public uint32 short_term_ref_pic_set_sps_flag;
		public uint32 slice_temporal_mvp_enabled_flag;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeH265LongTermRefPics
	{
		public uint8 num_long_term_sps;
		public uint8 num_long_term_pics;
		public uint8[32] lt_idx_sps;
		public uint8[16] poc_lsb_lt;
		public uint16 used_by_curr_pic_lt_flag;
		public uint8[48] delta_poc_msb_present_flag;
		public uint8[48] delta_poc_msb_cycle_lt;
	}

	[CRepr]
	public struct StdVideoEncodeH265PictureInfo
	{
		public StdVideoEncodeH265PictureInfoFlags flags;
		public StdVideoH265PictureType pic_type;
		public uint8 sps_video_parameter_set_id;
		public uint8 pps_seq_parameter_set_id;
		public uint8 pps_pic_parameter_set_id;
		public uint8 short_term_ref_pic_set_idx;
		public int32 PicOrderCntVal;
		public uint8 TemporalId;
		public uint8[7] reserved1;
		public StdVideoEncodeH265ReferenceListsInfo* pRefLists;
		public StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
		public StdVideoEncodeH265LongTermRefPics* pLongTermRefPics;
	}

	[CRepr]
	public struct StdVideoEncodeH265ReferenceInfoFlags
	{
		public uint32 used_for_long_term_reference;
		public uint32 unused_for_reference;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeH265ReferenceInfo
	{
		public StdVideoEncodeH265ReferenceInfoFlags flags;
		public StdVideoH265PictureType pic_type;
		public int32 PicOrderCntVal;
		public uint8 TemporalId;
	}

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeH265CapabilityFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1,
		VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2,
		VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = 4,
		VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = 8,
		VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16,
		VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32,
		VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64,
		VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = 128,
		VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = 256,
		VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = 512,
		VK_VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR = 1024,
		VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeH265CapabilityFlagsKHR = VkVideoEncodeH265CapabilityFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeH265StdFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1,
		VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = 2,
		VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = 4,
		VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = 8,
		VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = 16,
		VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = 32,
		VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64,
		VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = 128,
		VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = 256,
		VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = 512,
		VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = 1024,
		VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = 2048,
		VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = 4096,
		VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = 8192,
		VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384,
		VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = 32768,
		VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = 65536,
		VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = 131072,
		VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = 262144,
		VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = 524288,
		VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576,
		VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeH265StdFlagsKHR = VkVideoEncodeH265StdFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeH265CtbSizeFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = 1,
		VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = 2,
		VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = 4,
		VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeH265CtbSizeFlagsKHR = VkVideoEncodeH265CtbSizeFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeH265TransformBlockSizeFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = 1,
		VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = 2,
		VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = 4,
		VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = 8,
		VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeH265TransformBlockSizeFlagsKHR = VkVideoEncodeH265TransformBlockSizeFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeH265RateControlFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1,
		VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2,
		VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4,
		VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8,
		VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = 16,
		VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeH265RateControlFlagsKHR = VkVideoEncodeH265RateControlFlagBitsKHR;

	[CRepr]
	public struct VkVideoEncodeH265CapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeH265CapabilityFlagsKHR flags;
		public StdVideoH265LevelIdc maxLevelIdc;
		public uint32 maxSliceSegmentCount;
		public VkExtent2D maxTiles;
		public VkVideoEncodeH265CtbSizeFlagsKHR ctbSizes;
		public VkVideoEncodeH265TransformBlockSizeFlagsKHR transformBlockSizes;
		public uint32 maxPPictureL0ReferenceCount;
		public uint32 maxBPictureL0ReferenceCount;
		public uint32 maxL1ReferenceCount;
		public uint32 maxSubLayerCount;
		public VkBool32 expectDyadicTemporalSubLayerPattern;
		public int32 minQp;
		public int32 maxQp;
		public VkBool32 prefersGopRemainingFrames;
		public VkBool32 requiresGopRemainingFrames;
		public VkVideoEncodeH265StdFlagsKHR stdSyntaxFlags;
	}

	[CRepr]
	public struct VkVideoEncodeH265SessionCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 useMaxLevelIdc;
		public StdVideoH265LevelIdc maxLevelIdc;
	}

	[CRepr]
	public struct VkVideoEncodeH265QpKHR
	{
		public int32 qpI;
		public int32 qpP;
		public int32 qpB;
	}

	[CRepr]
	public struct VkVideoEncodeH265QualityLevelPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeH265RateControlFlagsKHR preferredRateControlFlags;
		public uint32 preferredGopFrameCount;
		public uint32 preferredIdrPeriod;
		public uint32 preferredConsecutiveBFrameCount;
		public uint32 preferredSubLayerCount;
		public VkVideoEncodeH265QpKHR preferredConstantQp;
		public uint32 preferredMaxL0ReferenceCount;
		public uint32 preferredMaxL1ReferenceCount;
	}

	[CRepr]
	public struct VkVideoEncodeH265SessionParametersAddInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 stdVPSCount;
		public StdVideoH265VideoParameterSet* pStdVPSs;
		public uint32 stdSPSCount;
		public StdVideoH265SequenceParameterSet* pStdSPSs;
		public uint32 stdPPSCount;
		public StdVideoH265PictureParameterSet* pStdPPSs;
	}

	[CRepr]
	public struct VkVideoEncodeH265SessionParametersCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxStdVPSCount;
		public uint32 maxStdSPSCount;
		public uint32 maxStdPPSCount;
		public VkVideoEncodeH265SessionParametersAddInfoKHR* pParametersAddInfo;
	}

	[CRepr]
	public struct VkVideoEncodeH265SessionParametersGetInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 writeStdVPS;
		public VkBool32 writeStdSPS;
		public VkBool32 writeStdPPS;
		public uint32 stdVPSId;
		public uint32 stdSPSId;
		public uint32 stdPPSId;
	}

	[CRepr]
	public struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 hasStdVPSOverrides;
		public VkBool32 hasStdSPSOverrides;
		public VkBool32 hasStdPPSOverrides;
	}

	[CRepr]
	public struct VkVideoEncodeH265NaluSliceSegmentInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public int32 constantQp;
		public StdVideoEncodeH265SliceSegmentHeader* pStdSliceSegmentHeader;
	}

	[CRepr]
	public struct VkVideoEncodeH265PictureInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 naluSliceSegmentEntryCount;
		public VkVideoEncodeH265NaluSliceSegmentInfoKHR* pNaluSliceSegmentEntries;
		public StdVideoEncodeH265PictureInfo* pStdPictureInfo;
	}

	[CRepr]
	public struct VkVideoEncodeH265DpbSlotInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoEncodeH265ReferenceInfo* pStdReferenceInfo;
	}

	[CRepr]
	public struct VkVideoEncodeH265ProfileInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoH265ProfileIdc stdProfileIdc;
	}

	[CRepr]
	public struct VkVideoEncodeH265RateControlInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeH265RateControlFlagsKHR flags;
		public uint32 gopFrameCount;
		public uint32 idrPeriod;
		public uint32 consecutiveBFrameCount;
		public uint32 subLayerCount;
	}

	[CRepr]
	public struct VkVideoEncodeH265FrameSizeKHR
	{
		public uint32 frameISize;
		public uint32 framePSize;
		public uint32 frameBSize;
	}

	[CRepr]
	public struct VkVideoEncodeH265RateControlLayerInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 useMinQp;
		public VkVideoEncodeH265QpKHR minQp;
		public VkBool32 useMaxQp;
		public VkVideoEncodeH265QpKHR maxQp;
		public VkBool32 useMaxFrameSize;
		public VkVideoEncodeH265FrameSizeKHR maxFrameSize;
	}

	[CRepr]
	public struct VkVideoEncodeH265GopRemainingFrameInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 useGopRemainingFrames;
		public uint32 gopRemainingI;
		public uint32 gopRemainingP;
		public uint32 gopRemainingB;
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoDecodeH264FieldOrderCount : c_int
	{
		STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP = 0,
		STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM = 1,
		STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID = 2147483647,
		STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM = 2147483647,
	}

	[CRepr]
	public struct StdVideoDecodeH264PictureInfoFlags
	{
		public uint32 field_pic_flag;
		public uint32 is_intra;
		public uint32 IdrPicFlag;
		public uint32 bottom_field_flag;
		public uint32 is_reference;
		public uint32 complementary_field_pair;
	}

	[CRepr]
	public struct StdVideoDecodeH264PictureInfo
	{
		public StdVideoDecodeH264PictureInfoFlags flags;
		public uint8 seq_parameter_set_id;
		public uint8 pic_parameter_set_id;
		public uint8 reserved1;
		public uint8 reserved2;
		public uint16 frame_num;
		public uint16 idr_pic_id;
		public int32[2] PicOrderCnt;
	}

	[CRepr]
	public struct StdVideoDecodeH264ReferenceInfoFlags
	{
		public uint32 top_field_flag;
		public uint32 bottom_field_flag;
		public uint32 used_for_long_term_reference;
		public uint32 is_non_existing;
	}

	[CRepr]
	public struct StdVideoDecodeH264ReferenceInfo
	{
		public StdVideoDecodeH264ReferenceInfoFlags flags;
		public uint16 FrameNum;
		public uint16 reserved;
		public int32[2] PicOrderCnt;
	}

	[CRepr, AllowDuplicates]
	public enum VkVideoDecodeH264PictureLayoutFlagBitsKHR : c_int
	{
		VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0,
		VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 1,
		VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 2,
		VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoDecodeH264PictureLayoutFlagsKHR = VkVideoDecodeH264PictureLayoutFlagBitsKHR;

	[CRepr]
	public struct VkVideoDecodeH264ProfileInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoH264ProfileIdc stdProfileIdc;
		public VkVideoDecodeH264PictureLayoutFlagBitsKHR pictureLayout;
	}

	[CRepr]
	public struct VkVideoDecodeH264CapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoH264LevelIdc maxLevelIdc;
		public VkOffset2D fieldOffsetGranularity;
	}

	[CRepr]
	public struct VkVideoDecodeH264SessionParametersAddInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 stdSPSCount;
		public StdVideoH264SequenceParameterSet* pStdSPSs;
		public uint32 stdPPSCount;
		public StdVideoH264PictureParameterSet* pStdPPSs;
	}

	[CRepr]
	public struct VkVideoDecodeH264SessionParametersCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxStdSPSCount;
		public uint32 maxStdPPSCount;
		public VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo;
	}

	[CRepr]
	public struct VkVideoDecodeH264PictureInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoDecodeH264PictureInfo* pStdPictureInfo;
		public uint32 sliceCount;
		public uint32* pSliceOffsets;
	}

	[CRepr]
	public struct VkVideoDecodeH264DpbSlotInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo;
	}

	public typealias VkRenderingFlagsKHR = VkRenderingFlags;

	public typealias VkRenderingFlagBitsKHR = VkRenderingFlagBits;

	public typealias VkRenderingInfoKHR = VkRenderingInfo;

	public typealias VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo;

	public typealias VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo;

	public typealias VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures;

	public typealias VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginRenderingKHR(VkCommandBuffer, VkRenderingInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndRenderingKHR(VkCommandBuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer);

	public typealias VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;

	public typealias VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;

	public typealias VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;

	public typealias VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;

	public typealias VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;

	public typealias VkFormatProperties2KHR = VkFormatProperties2;

	public typealias VkImageFormatProperties2KHR = VkImageFormatProperties2;

	public typealias VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;

	public typealias VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;

	public typealias VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;

	public typealias VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;

	public typealias VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice, VkPhysicalDeviceFeatures2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice, VkPhysicalDeviceProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice, VkFormat, VkFormatProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice, uint32*, VkQueueFamilyProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint32*, VkSparseImageFormatProperties2*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 pFeatures);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 pFormatProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, out VkImageFormatProperties2 pImageFormatProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, out uint32 pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 pMemoryProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, out uint32 pPropertyCount, VkSparseImageFormatProperties2* pProperties);

	public typealias VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;

	public typealias VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits;

	public typealias VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;

	public typealias VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits;

	public typealias VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;

	public typealias VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;

	public typealias VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;

	public typealias VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;

	public typealias VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;

	public typealias VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;

	public typealias VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice, uint32, uint32, uint32, VkPeerMemoryFeatureFlags*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDeviceMaskKHR(VkCommandBuffer, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDispatchBaseKHR(VkCommandBuffer, uint32, uint32, uint32, uint32, uint32, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32 heapIndex, uint32 localDeviceIndex, uint32 remoteDeviceIndex, out VkPeerMemoryFeatureFlags pPeerMemoryFeatures);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32 deviceMask);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32 baseGroupX, uint32 baseGroupY, uint32 baseGroupZ, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ);

	public typealias VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkTrimCommandPoolKHR(VkDevice, VkCommandPool, VkCommandPoolTrimFlags);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);

	public typealias VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;

	public typealias VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkEnumeratePhysicalDeviceGroupsKHR(VkInstance, uint32*, VkPhysicalDeviceGroupProperties*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, out uint32 pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

	public typealias VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;

	public typealias VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits;

	public typealias VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;

	public typealias VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits;

	public typealias VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;

	public typealias VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;

	public typealias VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;

	public typealias VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;

	public typealias VkExternalBufferPropertiesKHR = VkExternalBufferProperties;

	public typealias VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, out VkExternalBufferProperties pExternalBufferProperties);

	public typealias VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;

	public typealias VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;

	public typealias VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;

	[CRepr]
	public struct VkImportMemoryFdInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlagBits handleType;
		public c_int fd;
	}

	[CRepr]
	public struct VkMemoryFdPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 memoryTypeBits;
	}

	[CRepr]
	public struct VkMemoryGetFdInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceMemory memory;
		public VkExternalMemoryHandleTypeFlagBits handleType;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetMemoryFdKHR(VkDevice, VkMemoryGetFdInfoKHR*, c_int*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetMemoryFdPropertiesKHR(VkDevice, VkExternalMemoryHandleTypeFlagBits, c_int, VkMemoryFdPropertiesKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetMemoryFdKHR(VkDevice device, VkMemoryGetFdInfoKHR* pGetFdInfo, c_int* pFd);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, c_int fd, out VkMemoryFdPropertiesKHR pMemoryFdProperties);

	public typealias VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;

	public typealias VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits;

	public typealias VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;

	public typealias VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits;

	public typealias VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;

	public typealias VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, out VkExternalSemaphoreProperties pExternalSemaphoreProperties);

	public typealias VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;

	public typealias VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits;

	public typealias VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;

	[CRepr]
	public struct VkImportSemaphoreFdInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSemaphore semaphore;
		public VkSemaphoreImportFlags flags;
		public VkExternalSemaphoreHandleTypeFlagBits handleType;
		public c_int fd;
	}

	[CRepr]
	public struct VkSemaphoreGetFdInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSemaphore semaphore;
		public VkExternalSemaphoreHandleTypeFlagBits handleType;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkImportSemaphoreFdKHR(VkDevice, VkImportSemaphoreFdInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetSemaphoreFdKHR(VkDevice, VkSemaphoreGetFdInfoKHR*, c_int*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkImportSemaphoreFdKHR(VkDevice device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetSemaphoreFdKHR(VkDevice device, VkSemaphoreGetFdInfoKHR* pGetFdInfo, c_int* pFd);

	public typealias VkPhysicalDevicePushDescriptorPropertiesKHR = VkPhysicalDevicePushDescriptorProperties;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushDescriptorSetKHR(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32, uint32, VkWriteDescriptorSet*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint32, void*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 set, uint32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32 set, void* pData);

	public typealias VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;

	public typealias VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;

	public typealias VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;

	[CRepr]
	public struct VkRectLayerKHR
	{
		public VkOffset2D offset;
		public VkExtent2D extent;
		public uint32 layer;
	}

	[CRepr]
	public struct VkPresentRegionKHR
	{
		public uint32 rectangleCount;
		public VkRectLayerKHR* pRectangles;
	}

	[CRepr]
	public struct VkPresentRegionsKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 swapchainCount;
		public VkPresentRegionKHR* pRegions;
	}

	public typealias VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;

	public typealias VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType;

	public typealias VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;

	public typealias VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;

	public typealias VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateDescriptorUpdateTemplateKHR(VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyDescriptorUpdateTemplateKHR(VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkUpdateDescriptorSetWithTemplateKHR(VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDescriptorUpdateTemplate pDescriptorUpdateTemplate);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData);

	public typealias VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures;

	public typealias VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;

	public typealias VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;

	public typealias VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;

	public typealias VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;

	public typealias VkAttachmentDescription2KHR = VkAttachmentDescription2;

	public typealias VkAttachmentReference2KHR = VkAttachmentReference2;

	public typealias VkSubpassDescription2KHR = VkSubpassDescription2;

	public typealias VkSubpassDependency2KHR = VkSubpassDependency2;

	public typealias VkSubpassBeginInfoKHR = VkSubpassBeginInfo;

	public typealias VkSubpassEndInfoKHR = VkSubpassEndInfo;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateRenderPass2KHR(VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginRenderPass2KHR(VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdNextSubpass2KHR(VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndRenderPass2KHR(VkCommandBuffer, VkSubpassEndInfo*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateRenderPass2KHR(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkRenderPass pRenderPass);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo);

	[CRepr]
	public struct VkSharedPresentSurfaceCapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageUsageFlags sharedPresentSupportedUsageFlags;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetSwapchainStatusKHR(VkDevice, VkSwapchainKHR);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain);

	public typealias VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;

	public typealias VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits;

	public typealias VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;

	public typealias VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits;

	public typealias VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;

	public typealias VkExternalFencePropertiesKHR = VkExternalFenceProperties;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, out VkExternalFenceProperties pExternalFenceProperties);

	public typealias VkFenceImportFlagsKHR = VkFenceImportFlags;

	public typealias VkFenceImportFlagBitsKHR = VkFenceImportFlagBits;

	public typealias VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;

	[CRepr]
	public struct VkImportFenceFdInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFence fence;
		public VkFenceImportFlags flags;
		public VkExternalFenceHandleTypeFlagBits handleType;
		public c_int fd;
	}

	[CRepr]
	public struct VkFenceGetFdInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFence fence;
		public VkExternalFenceHandleTypeFlagBits handleType;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkImportFenceFdKHR(VkDevice, VkImportFenceFdInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetFenceFdKHR(VkDevice, VkFenceGetFdInfoKHR*, c_int*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkImportFenceFdKHR(VkDevice device, VkImportFenceFdInfoKHR* pImportFenceFdInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetFenceFdKHR(VkDevice device, VkFenceGetFdInfoKHR* pGetFdInfo, c_int* pFd);

	[CRepr, AllowDuplicates]
	public enum VkPerformanceCounterUnitKHR : c_int
	{
		VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
		VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
		VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
		VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
		VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
		VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
		VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
		VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
		VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
		VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
		VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
		VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPerformanceCounterScopeKHR : c_int
	{
		VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
		VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
		VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
		VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = 0,
		VK_QUERY_SCOPE_RENDER_PASS_KHR = 1,
		VK_QUERY_SCOPE_COMMAND_KHR = 2,
		VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPerformanceCounterStorageKHR : c_int
	{
		VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
		VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
		VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
		VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
		VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
		VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
		VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPerformanceCounterDescriptionFlagBitsKHR : c_int
	{
		VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1,
		VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2,
		VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1,
		VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2,
		VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkPerformanceCounterDescriptionFlagsKHR = VkPerformanceCounterDescriptionFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkAcquireProfilingLockFlagBitsKHR : c_int
	{
		VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkAcquireProfilingLockFlagsKHR = VkAcquireProfilingLockFlagBitsKHR;

	[CRepr]
	public struct VkPhysicalDevicePerformanceQueryFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 performanceCounterQueryPools;
		public VkBool32 performanceCounterMultipleQueryPools;
	}

	[CRepr]
	public struct VkPhysicalDevicePerformanceQueryPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 allowCommandBufferQueryCopies;
	}

	[CRepr]
	public struct VkPerformanceCounterKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPerformanceCounterUnitKHR unit;
		public VkPerformanceCounterScopeKHR @scope;
		public VkPerformanceCounterStorageKHR storage;
		public uint8[16] uuid;
	}

	[CRepr]
	public struct VkPerformanceCounterDescriptionKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPerformanceCounterDescriptionFlagsKHR flags;
		public c_char[256] name;
		public c_char[256] category;
		public c_char[256] description;
	}

	[CRepr]
	public struct VkQueryPoolPerformanceCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 queueFamilyIndex;
		public uint32 counterIndexCount;
		public uint32* pCounterIndices;
	}

	[CRepr, Union]
	public struct VkPerformanceCounterResultKHR
	{
		public int32 int32;
		public int64 int64;
		public uint32 uint32;
		public uint64 uint64;
		public float float32;
		public double float64;
	}

	[CRepr]
	public struct VkAcquireProfilingLockInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAcquireProfilingLockFlagsKHR flags;
		public uint64 timeout;
	}

	[CRepr]
	public struct VkPerformanceQuerySubmitInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 counterPassIndex;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice, uint32, uint32*, VkPerformanceCounterKHR*, VkPerformanceCounterDescriptionKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice, VkQueryPoolPerformanceCreateInfoKHR*, uint32*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkAcquireProfilingLockKHR(VkDevice, VkAcquireProfilingLockInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkReleaseProfilingLockKHR(VkDevice);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32 queueFamilyIndex, out uint32 pCounterCount, out VkPerformanceCounterKHR pCounters, out VkPerformanceCounterDescriptionKHR pCounterDescriptions);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, out uint32 pNumPasses);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkAcquireProfilingLockKHR(VkDevice device, VkAcquireProfilingLockInfoKHR* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkReleaseProfilingLockKHR(VkDevice device);

	public typealias VkPointClippingBehaviorKHR = VkPointClippingBehavior;

	public typealias VkTessellationDomainOriginKHR = VkTessellationDomainOrigin;

	public typealias VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;

	public typealias VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;

	public typealias VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;

	public typealias VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;

	public typealias VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;

	[CRepr]
	public struct VkPhysicalDeviceSurfaceInfo2KHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceKHR surface;
	}

	[CRepr]
	public struct VkSurfaceCapabilities2KHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceCapabilitiesKHR surfaceCapabilities;
	}

	[CRepr]
	public struct VkSurfaceFormat2KHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceFormatKHR surfaceFormat;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, VkSurfaceCapabilities2KHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint32*, VkSurfaceFormat2KHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, out VkSurfaceCapabilities2KHR pSurfaceCapabilities);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, out uint32 pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats);

	public typealias VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;

	public typealias VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;

	[CRepr]
	public struct VkDisplayProperties2KHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDisplayPropertiesKHR displayProperties;
	}

	[CRepr]
	public struct VkDisplayPlaneProperties2KHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDisplayPlanePropertiesKHR displayPlaneProperties;
	}

	[CRepr]
	public struct VkDisplayModeProperties2KHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDisplayModePropertiesKHR displayModeProperties;
	}

	[CRepr]
	public struct VkDisplayPlaneInfo2KHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDisplayModeKHR mode;
		public uint32 planeIndex;
	}

	[CRepr]
	public struct VkDisplayPlaneCapabilities2KHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDisplayPlaneCapabilitiesKHR capabilities;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice, uint32*, VkDisplayProperties2KHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice, uint32*, VkDisplayPlaneProperties2KHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDisplayModeProperties2KHR(VkPhysicalDevice, VkDisplayKHR, uint32*, VkDisplayModeProperties2KHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice, VkDisplayPlaneInfo2KHR*, VkDisplayPlaneCapabilities2KHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkDisplayProperties2KHR* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, out uint32 pPropertyCount, VkDisplayModeProperties2KHR* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, out VkDisplayPlaneCapabilities2KHR pCapabilities);

	public typealias VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;

	public typealias VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;

	public typealias VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;

	public typealias VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;

	public typealias VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;

	public typealias VkMemoryRequirements2KHR = VkMemoryRequirements2;

	public typealias VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetImageMemoryRequirements2KHR(VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetBufferMemoryRequirements2KHR(VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetImageSparseMemoryRequirements2KHR(VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint32*, VkSparseImageMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetImageMemoryRequirements2KHR(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetBufferMemoryRequirements2KHR(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetImageSparseMemoryRequirements2KHR(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, out uint32 pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

	public typealias VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;

	public typealias VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;

	public typealias VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion;

	public typealias VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange;

	public typealias VkChromaLocationKHR = VkChromaLocation;

	public typealias VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;

	public typealias VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;

	public typealias VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;

	public typealias VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;

	public typealias VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;

	public typealias VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateSamplerYcbcrConversionKHR(VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroySamplerYcbcrConversionKHR(VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSamplerYcbcrConversion pYcbcrConversion);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator);

	public typealias VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;

	public typealias VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBindBufferMemory2KHR(VkDevice, uint32, VkBindBufferMemoryInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBindImageMemory2KHR(VkDevice, uint32, VkBindImageMemoryInfo*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBindBufferMemory2KHR(VkDevice device, uint32 bindInfoCount, VkBindBufferMemoryInfo* pBindInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBindImageMemory2KHR(VkDevice device, uint32 bindInfoCount, VkBindImageMemoryInfo* pBindInfos);

	public typealias VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;

	public typealias VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDescriptorSetLayoutSupportKHR(VkDevice, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDescriptorSetLayoutSupportKHR(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, out VkDescriptorSetLayoutSupport pSupport);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawIndirectCountKHR(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride);

	public typealias VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

	public typealias VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;

	public typealias VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;

	[CRepr]
	public struct VkPhysicalDeviceShaderClockFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderSubgroupClock;
		public VkBool32 shaderDeviceClock;
	}

	[CRepr]
	public struct StdVideoDecodeH265PictureInfoFlags
	{
		public uint32 IrapPicFlag;
		public uint32 IdrPicFlag;
		public uint32 IsReference;
		public uint32 short_term_ref_pic_set_sps_flag;
	}

	[CRepr]
	public struct StdVideoDecodeH265PictureInfo
	{
		public StdVideoDecodeH265PictureInfoFlags flags;
		public uint8 sps_video_parameter_set_id;
		public uint8 pps_seq_parameter_set_id;
		public uint8 pps_pic_parameter_set_id;
		public uint8 NumDeltaPocsOfRefRpsIdx;
		public int32 PicOrderCntVal;
		public uint16 NumBitsForSTRefPicSetInSlice;
		public uint16 reserved;
		public uint8[8] RefPicSetStCurrBefore;
		public uint8[8] RefPicSetStCurrAfter;
		public uint8[8] RefPicSetLtCurr;
	}

	[CRepr]
	public struct StdVideoDecodeH265ReferenceInfoFlags
	{
		public uint32 used_for_long_term_reference;
		public uint32 unused_for_reference;
	}

	[CRepr]
	public struct StdVideoDecodeH265ReferenceInfo
	{
		public StdVideoDecodeH265ReferenceInfoFlags flags;
		public int32 PicOrderCntVal;
	}

	[CRepr]
	public struct VkVideoDecodeH265ProfileInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoH265ProfileIdc stdProfileIdc;
	}

	[CRepr]
	public struct VkVideoDecodeH265CapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoH265LevelIdc maxLevelIdc;
	}

	[CRepr]
	public struct VkVideoDecodeH265SessionParametersAddInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 stdVPSCount;
		public StdVideoH265VideoParameterSet* pStdVPSs;
		public uint32 stdSPSCount;
		public StdVideoH265SequenceParameterSet* pStdSPSs;
		public uint32 stdPPSCount;
		public StdVideoH265PictureParameterSet* pStdPPSs;
	}

	[CRepr]
	public struct VkVideoDecodeH265SessionParametersCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxStdVPSCount;
		public uint32 maxStdSPSCount;
		public uint32 maxStdPPSCount;
		public VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo;
	}

	[CRepr]
	public struct VkVideoDecodeH265PictureInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoDecodeH265PictureInfo* pStdPictureInfo;
		public uint32 sliceSegmentCount;
		public uint32* pSliceSegmentOffsets;
	}

	[CRepr]
	public struct VkVideoDecodeH265DpbSlotInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo;
	}

	public typealias VkQueueGlobalPriorityKHR = VkQueueGlobalPriority;

	public typealias VkDeviceQueueGlobalPriorityCreateInfoKHR = VkDeviceQueueGlobalPriorityCreateInfo;

	public typealias VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = VkPhysicalDeviceGlobalPriorityQueryFeatures;

	public typealias VkQueueFamilyGlobalPriorityPropertiesKHR = VkQueueFamilyGlobalPriorityProperties;

	public typealias VkDriverIdKHR = VkDriverId;

	public typealias VkConformanceVersionKHR = VkConformanceVersion;

	public typealias VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;

	public typealias VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence;

	public typealias VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;

	public typealias VkResolveModeFlagBitsKHR = VkResolveModeFlagBits;

	public typealias VkResolveModeFlagsKHR = VkResolveModeFlags;

	public typealias VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;

	public typealias VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties;

	public typealias VkSemaphoreTypeKHR = VkSemaphoreType;

	public typealias VkSemaphoreWaitFlagBitsKHR = VkSemaphoreWaitFlagBits;

	public typealias VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;

	public typealias VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;

	public typealias VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties;

	public typealias VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;

	public typealias VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;

	public typealias VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;

	public typealias VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetSemaphoreCounterValueKHR(VkDevice, VkSemaphore, uint64*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkWaitSemaphoresKHR(VkDevice, VkSemaphoreWaitInfo*, uint64);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkSignalSemaphoreKHR(VkDevice, VkSemaphoreSignalInfo*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, out uint64 pValue);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkWaitSemaphoresKHR(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, uint64 timeout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkSignalSemaphoreKHR(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo);

	public typealias VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;

	public typealias VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = VkPhysicalDeviceShaderTerminateInvocationFeatures;

	[CRepr, AllowDuplicates]
	public enum VkFragmentShadingRateCombinerOpKHR : c_int
	{
		VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,
		VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,
		VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,
		VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,
		VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4,
		VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr]
	public struct VkFragmentShadingRateAttachmentInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAttachmentReference2* pFragmentShadingRateAttachment;
		public VkExtent2D shadingRateAttachmentTexelSize;
	}

	[CRepr]
	public struct VkPipelineFragmentShadingRateStateCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D fragmentSize;
		public VkFragmentShadingRateCombinerOpKHR[2] combinerOps;
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelineFragmentShadingRate;
		public VkBool32 primitiveFragmentShadingRate;
		public VkBool32 attachmentFragmentShadingRate;
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D minFragmentShadingRateAttachmentTexelSize;
		public VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
		public uint32 maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
		public VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
		public VkBool32 layeredShadingRateAttachments;
		public VkBool32 fragmentShadingRateNonTrivialCombinerOps;
		public VkExtent2D maxFragmentSize;
		public uint32 maxFragmentSizeAspectRatio;
		public uint32 maxFragmentShadingRateCoverageSamples;
		public VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
		public VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
		public VkBool32 fragmentShadingRateWithSampleMask;
		public VkBool32 fragmentShadingRateWithShaderSampleMask;
		public VkBool32 fragmentShadingRateWithConservativeRasterization;
		public VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
		public VkBool32 fragmentShadingRateWithCustomSampleLocations;
		public VkBool32 fragmentShadingRateStrictMultiplyCombiner;
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentShadingRateKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSampleCountFlags sampleCounts;
		public VkExtent2D fragmentSize;
	}

	[CRepr]
	public struct VkRenderingFragmentShadingRateAttachmentInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageView imageView;
		public VkImageLayout imageLayout;
		public VkExtent2D shadingRateAttachmentTexelSize;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice, uint32*, VkPhysicalDeviceFragmentShadingRateKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetFragmentShadingRateKHR(VkCommandBuffer, VkExtent2D*, VkFragmentShadingRateCombinerOpKHR[2]);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, out uint32 pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, VkExtent2D* pFragmentSize, VkFragmentShadingRateCombinerOpKHR[2] combinerOps);

	public typealias VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR = VkPhysicalDeviceDynamicRenderingLocalReadFeatures;

	public typealias VkRenderingAttachmentLocationInfoKHR = VkRenderingAttachmentLocationInfo;

	public typealias VkRenderingInputAttachmentIndexInfoKHR = VkRenderingInputAttachmentIndexInfo;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetRenderingAttachmentLocationsKHR(VkCommandBuffer, VkRenderingAttachmentLocationInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetRenderingInputAttachmentIndicesKHR(VkCommandBuffer, VkRenderingInputAttachmentIndexInfo*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetRenderingAttachmentLocationsKHR(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* pLocationInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetRenderingInputAttachmentIndicesKHR(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo);

	[CRepr]
	public struct VkPhysicalDeviceShaderQuadControlFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderQuadControl;
	}

	[CRepr]
	public struct VkSurfaceProtectedCapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 supportsProtected;
	}

	public typealias VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

	public typealias VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;

	public typealias VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;

	[CRepr]
	public struct VkPhysicalDevicePresentWaitFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 presentWait;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkWaitForPresentKHR(VkDevice, VkSwapchainKHR, uint64, uint64);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64 presentId, uint64 timeout);

	public typealias VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;

	public typealias VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures;

	public typealias VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;

	public typealias VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;

	public typealias VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;

	public typealias VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;

	[CallingConvention(VKAPI_CALL)]
	public function VkDeviceAddress PFN_vkGetBufferDeviceAddressKHR(VkDevice, VkBufferDeviceAddressInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function uint64 PFN_vkGetBufferOpaqueCaptureAddressKHR(VkDevice, VkBufferDeviceAddressInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function uint64 PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice, VkDeviceMemoryOpaqueCaptureAddressInfo*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkDeviceAddress vkGetBufferDeviceAddressKHR(VkDevice device, VkBufferDeviceAddressInfo* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern uint64 vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, VkBufferDeviceAddressInfo* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern uint64 vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo);

	public struct VkDeferredOperationKHR_T;
	public typealias VkDeferredOperationKHR = VkDeferredOperationKHR_T*;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateDeferredOperationKHR(VkDevice, VkAllocationCallbacks*, VkDeferredOperationKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyDeferredOperationKHR(VkDevice, VkDeferredOperationKHR, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function uint32 PFN_vkGetDeferredOperationMaxConcurrencyKHR(VkDevice, VkDeferredOperationKHR);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDeferredOperationResultKHR(VkDevice, VkDeferredOperationKHR);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkDeferredOperationJoinKHR(VkDevice, VkDeferredOperationKHR);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateDeferredOperationKHR(VkDevice device, VkAllocationCallbacks* pAllocator, out VkDeferredOperationKHR pDeferredOperation);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern uint32 vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation);

	[CRepr, AllowDuplicates]
	public enum VkPipelineExecutableStatisticFormatKHR : c_int
	{
		VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
		VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
		VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
		VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
		VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelineExecutableInfo;
	}

	[CRepr]
	public struct VkPipelineInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipeline pipeline;
	}

	[CRepr]
	public struct VkPipelineExecutablePropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderStageFlags stages;
		public c_char[256] name;
		public c_char[256] description;
		public uint32 subgroupSize;
	}

	[CRepr]
	public struct VkPipelineExecutableInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipeline pipeline;
		public uint32 executableIndex;
	}

	[CRepr, Union]
	public struct VkPipelineExecutableStatisticValueKHR
	{
		public VkBool32 b32;
		public int64 i64;
		public uint64 u64;
		public double f64;
	}

	[CRepr]
	public struct VkPipelineExecutableStatisticKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public c_char[256] name;
		public c_char[256] description;
		public VkPipelineExecutableStatisticFormatKHR format;
		public VkPipelineExecutableStatisticValueKHR value;
	}

	[CRepr]
	public struct VkPipelineExecutableInternalRepresentationKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public c_char[256] name;
		public c_char[256] description;
		public VkBool32 isText;
		public c_size dataSize;
		public void* pData;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPipelineExecutablePropertiesKHR(VkDevice, VkPipelineInfoKHR*, uint32*, VkPipelineExecutablePropertiesKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPipelineExecutableStatisticsKHR(VkDevice, VkPipelineExecutableInfoKHR*, uint32*, VkPipelineExecutableStatisticKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice, VkPipelineExecutableInfoKHR*, uint32*, VkPipelineExecutableInternalRepresentationKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfoKHR* pPipelineInfo, out uint32 pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, out uint32 pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, out uint32 pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations);

	public typealias VkMemoryUnmapFlagBitsKHR = VkMemoryUnmapFlagBits;

	public typealias VkMemoryUnmapFlagsKHR = VkMemoryUnmapFlags;

	public typealias VkMemoryMapInfoKHR = VkMemoryMapInfo;

	public typealias VkMemoryUnmapInfoKHR = VkMemoryUnmapInfo;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkMapMemory2KHR(VkDevice, VkMemoryMapInfo*, void**);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkUnmapMemory2KHR(VkDevice, VkMemoryUnmapInfo*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkMapMemory2KHR(VkDevice device, VkMemoryMapInfo* pMemoryMapInfo, void** ppData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkUnmapMemory2KHR(VkDevice device, VkMemoryUnmapInfo* pMemoryUnmapInfo);

	public typealias VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = VkPhysicalDeviceShaderIntegerDotProductFeatures;

	public typealias VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = VkPhysicalDeviceShaderIntegerDotProductProperties;

	[CRepr]
	public struct VkPipelineLibraryCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 libraryCount;
		public VkPipeline* pLibraries;
	}

	[CRepr]
	public struct VkPresentIdKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 swapchainCount;
		public uint64* pPresentIds;
	}

	[CRepr]
	public struct VkPhysicalDevicePresentIdFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 presentId;
	}

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeTuningModeKHR : c_int
	{
		VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0,
		VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1,
		VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2,
		VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3,
		VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4,
		VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR = 1,
		VK_VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR = 2,
		VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeFlagsKHR = VkVideoEncodeFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeCapabilityFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 1,
		VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = 2,
		VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR = 4,
		VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR = 8,
		VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeCapabilityFlagsKHR = VkVideoEncodeCapabilityFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeRateControlModeFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0,
		VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = 1,
		VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 2,
		VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 4,
		VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeRateControlModeFlagsKHR = VkVideoEncodeRateControlModeFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeFeedbackFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = 1,
		VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = 2,
		VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = 4,
		VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeFeedbackFlagsKHR = VkVideoEncodeFeedbackFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeUsageFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0,
		VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 1,
		VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 2,
		VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 4,
		VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 8,
		VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeUsageFlagsKHR = VkVideoEncodeUsageFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeContentFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0,
		VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 1,
		VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 2,
		VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 4,
		VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeContentFlagsKHR = VkVideoEncodeContentFlagBitsKHR;

	public typealias VkVideoEncodeRateControlFlagsKHR = VkFlags;

	[CRepr]
	public struct VkVideoEncodeInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeFlagsKHR flags;
		public VkBuffer dstBuffer;
		public VkDeviceSize dstBufferOffset;
		public VkDeviceSize dstBufferRange;
		public VkVideoPictureResourceInfoKHR srcPictureResource;
		public VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
		public uint32 referenceSlotCount;
		public VkVideoReferenceSlotInfoKHR* pReferenceSlots;
		public uint32 precedingExternallyEncodedBytes;
	}

	[CRepr]
	public struct VkVideoEncodeCapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeCapabilityFlagsKHR flags;
		public VkVideoEncodeRateControlModeFlagsKHR rateControlModes;
		public uint32 maxRateControlLayers;
		public uint64 maxBitrate;
		public uint32 maxQualityLevels;
		public VkExtent2D encodeInputPictureGranularity;
		public VkVideoEncodeFeedbackFlagsKHR supportedEncodeFeedbackFlags;
	}

	[CRepr]
	public struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeFeedbackFlagsKHR encodeFeedbackFlags;
	}

	[CRepr]
	public struct VkVideoEncodeUsageInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeUsageFlagsKHR videoUsageHints;
		public VkVideoEncodeContentFlagsKHR videoContentHints;
		public VkVideoEncodeTuningModeKHR tuningMode;
	}

	[CRepr]
	public struct VkVideoEncodeRateControlLayerInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 averageBitrate;
		public uint64 maxBitrate;
		public uint32 frameRateNumerator;
		public uint32 frameRateDenominator;
	}

	[CRepr]
	public struct VkVideoEncodeRateControlInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeRateControlFlagsKHR flags;
		public VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode;
		public uint32 layerCount;
		public VkVideoEncodeRateControlLayerInfoKHR* pLayers;
		public uint32 virtualBufferSizeInMs;
		public uint32 initialVirtualBufferSizeInMs;
	}

	[CRepr]
	public struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoProfileInfoKHR* pVideoProfile;
		public uint32 qualityLevel;
	}

	[CRepr]
	public struct VkVideoEncodeQualityLevelPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeRateControlModeFlagBitsKHR preferredRateControlMode;
		public uint32 preferredRateControlLayerCount;
	}

	[CRepr]
	public struct VkVideoEncodeQualityLevelInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 qualityLevel;
	}

	[CRepr]
	public struct VkVideoEncodeSessionParametersGetInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoSessionParametersKHR videoSessionParameters;
	}

	[CRepr]
	public struct VkVideoEncodeSessionParametersFeedbackInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 hasOverrides;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice, VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR*, VkVideoEncodeQualityLevelPropertiesKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetEncodedVideoSessionParametersKHR(VkDevice, VkVideoEncodeSessionParametersGetInfoKHR*, VkVideoEncodeSessionParametersFeedbackInfoKHR*, c_size*, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEncodeVideoKHR(VkCommandBuffer, VkVideoEncodeInfoKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo, out VkVideoEncodeQualityLevelPropertiesKHR pQualityLevelProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetEncodedVideoSessionParametersKHR(VkDevice device, VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo, out VkVideoEncodeSessionParametersFeedbackInfoKHR pFeedbackInfo, out c_size pDataSize, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, VkVideoEncodeInfoKHR* pEncodeInfo);

	public typealias VkPipelineStageFlags2KHR = VkPipelineStageFlags2;

	public typealias VkPipelineStageFlagBits2KHR = VkPipelineStageFlagBits2;

	public typealias VkAccessFlags2KHR = VkAccessFlags2;

	public typealias VkAccessFlagBits2KHR = VkAccessFlagBits2;

	public typealias VkSubmitFlagBitsKHR = VkSubmitFlagBits;

	public typealias VkSubmitFlagsKHR = VkSubmitFlags;

	public typealias VkMemoryBarrier2KHR = VkMemoryBarrier2;

	public typealias VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2;

	public typealias VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2;

	public typealias VkDependencyInfoKHR = VkDependencyInfo;

	public typealias VkSubmitInfo2KHR = VkSubmitInfo2;

	public typealias VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo;

	public typealias VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo;

	public typealias VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetEvent2KHR(VkCommandBuffer, VkEvent, VkDependencyInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdResetEvent2KHR(VkCommandBuffer, VkEvent, VkPipelineStageFlags2);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWaitEvents2KHR(VkCommandBuffer, uint32, VkEvent*, VkDependencyInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPipelineBarrier2KHR(VkCommandBuffer, VkDependencyInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWriteTimestamp2KHR(VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkQueueSubmit2KHR(VkQueue, uint32, VkSubmitInfo2*, VkFence);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkDependencyInfo* pDependencyInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32 eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32 query);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkQueueSubmit2KHR(VkQueue queue, uint32 submitCount, VkSubmitInfo2* pSubmits, VkFence fence);

	[CRepr]
	public struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 fragmentShaderBarycentric;
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 triStripVertexOrderIndependentOfProvokingVertex;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderSubgroupUniformControlFlow;
	}

	public typealias VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;

	[CRepr]
	public struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 workgroupMemoryExplicitLayout;
		public VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout;
		public VkBool32 workgroupMemoryExplicitLayout8BitAccess;
		public VkBool32 workgroupMemoryExplicitLayout16BitAccess;
	}

	public typealias VkCopyBufferInfo2KHR = VkCopyBufferInfo2;

	public typealias VkCopyImageInfo2KHR = VkCopyImageInfo2;

	public typealias VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2;

	public typealias VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2;

	public typealias VkBlitImageInfo2KHR = VkBlitImageInfo2;

	public typealias VkResolveImageInfo2KHR = VkResolveImageInfo2;

	public typealias VkBufferCopy2KHR = VkBufferCopy2;

	public typealias VkImageCopy2KHR = VkImageCopy2;

	public typealias VkImageBlit2KHR = VkImageBlit2;

	public typealias VkBufferImageCopy2KHR = VkBufferImageCopy2;

	public typealias VkImageResolve2KHR = VkImageResolve2;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyBuffer2KHR(VkCommandBuffer, VkCopyBufferInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyImage2KHR(VkCommandBuffer, VkCopyImageInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyBufferToImage2KHR(VkCommandBuffer, VkCopyBufferToImageInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyImageToBuffer2KHR(VkCommandBuffer, VkCopyImageToBufferInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBlitImage2KHR(VkCommandBuffer, VkBlitImageInfo2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdResolveImage2KHR(VkCommandBuffer, VkResolveImageInfo2*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo);

	public typealias VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2;

	public typealias VkFormatFeatureFlagBits2KHR = VkFormatFeatureFlagBits2;

	public typealias VkFormatProperties3KHR = VkFormatProperties3;

	[CRepr]
	public struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 rayTracingMaintenance1;
		public VkBool32 rayTracingPipelineTraceRaysIndirect2;
	}

	[CRepr]
	public struct VkTraceRaysIndirectCommand2KHR
	{
		public VkDeviceAddress raygenShaderRecordAddress;
		public VkDeviceSize raygenShaderRecordSize;
		public VkDeviceAddress missShaderBindingTableAddress;
		public VkDeviceSize missShaderBindingTableSize;
		public VkDeviceSize missShaderBindingTableStride;
		public VkDeviceAddress hitShaderBindingTableAddress;
		public VkDeviceSize hitShaderBindingTableSize;
		public VkDeviceSize hitShaderBindingTableStride;
		public VkDeviceAddress callableShaderBindingTableAddress;
		public VkDeviceSize callableShaderBindingTableSize;
		public VkDeviceSize callableShaderBindingTableStride;
		public uint32 width;
		public uint32 height;
		public uint32 depth;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdTraceRaysIndirect2KHR(VkCommandBuffer, VkDeviceAddress);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress);

	public typealias VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features;

	public typealias VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties;

	public typealias VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements;

	public typealias VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceBufferMemoryRequirementsKHR(VkDevice, VkDeviceBufferMemoryRequirements*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceImageMemoryRequirementsKHR(VkDevice, VkDeviceImageMemoryRequirements*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice, VkDeviceImageMemoryRequirements*, uint32*, VkSparseImageMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, out uint32 pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

	public typealias VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR = VkPhysicalDeviceShaderSubgroupRotateFeatures;

	[CRepr]
	public struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderMaximalReconvergence;
	}

	public typealias VkPipelineCreateFlags2KHR = VkPipelineCreateFlags2;

	public typealias VkPipelineCreateFlagBits2KHR = VkPipelineCreateFlagBits2;

	public typealias VkBufferUsageFlags2KHR = VkBufferUsageFlags2;

	public typealias VkBufferUsageFlagBits2KHR = VkBufferUsageFlagBits2;

	public typealias VkPhysicalDeviceMaintenance5FeaturesKHR = VkPhysicalDeviceMaintenance5Features;

	public typealias VkPhysicalDeviceMaintenance5PropertiesKHR = VkPhysicalDeviceMaintenance5Properties;

	public typealias VkRenderingAreaInfoKHR = VkRenderingAreaInfo;

	public typealias VkDeviceImageSubresourceInfoKHR = VkDeviceImageSubresourceInfo;

	public typealias VkImageSubresource2KHR = VkImageSubresource2;

	public typealias VkSubresourceLayout2KHR = VkSubresourceLayout2;

	public typealias VkPipelineCreateFlags2CreateInfoKHR = VkPipelineCreateFlags2CreateInfo;

	public typealias VkBufferUsageFlags2CreateInfoKHR = VkBufferUsageFlags2CreateInfo;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindIndexBuffer2KHR(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, VkIndexType);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetRenderingAreaGranularityKHR(VkDevice, VkRenderingAreaInfo*, VkExtent2D*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceImageSubresourceLayoutKHR(VkDevice, VkDeviceImageSubresourceInfo*, VkSubresourceLayout2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetImageSubresourceLayout2KHR(VkDevice, VkImage, VkImageSubresource2*, VkSubresourceLayout2*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetRenderingAreaGranularityKHR(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, out VkExtent2D pGranularity);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, out VkSubresourceLayout2 pLayout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, out VkSubresourceLayout2 pLayout);

	[CRepr]
	public struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 rayTracingPositionFetch;
	}

	public struct VkPipelineBinaryKHR_T;
	public typealias VkPipelineBinaryKHR = VkPipelineBinaryKHR_T*;

	[CRepr]
	public struct VkPhysicalDevicePipelineBinaryFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelineBinaries;
	}

	[CRepr]
	public struct VkPhysicalDevicePipelineBinaryPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelineBinaryInternalCache;
		public VkBool32 pipelineBinaryInternalCacheControl;
		public VkBool32 pipelineBinaryPrefersInternalCache;
		public VkBool32 pipelineBinaryPrecompiledInternalCache;
		public VkBool32 pipelineBinaryCompressedData;
	}

	[CRepr]
	public struct VkDevicePipelineBinaryInternalCacheControlKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 disableInternalCache;
	}

	[CRepr]
	public struct VkPipelineBinaryKeyKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 keySize;
		public uint8[32] key;
	}

	[CRepr]
	public struct VkPipelineBinaryDataKHR
	{
		public c_size dataSize;
		public void* pData;
	}

	[CRepr]
	public struct VkPipelineBinaryKeysAndDataKHR
	{
		public uint32 binaryCount;
		public VkPipelineBinaryKeyKHR* pPipelineBinaryKeys;
		public VkPipelineBinaryDataKHR* pPipelineBinaryData;
	}

	[CRepr]
	public struct VkPipelineCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
	}

	[CRepr]
	public struct VkPipelineBinaryCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineBinaryKeysAndDataKHR* pKeysAndDataInfo;
		public VkPipeline pipeline;
		public VkPipelineCreateInfoKHR* pPipelineCreateInfo;
	}

	[CRepr]
	public struct VkPipelineBinaryInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 binaryCount;
		public VkPipelineBinaryKHR* pPipelineBinaries;
	}

	[CRepr]
	public struct VkReleaseCapturedPipelineDataInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipeline pipeline;
	}

	[CRepr]
	public struct VkPipelineBinaryDataInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineBinaryKHR pipelineBinary;
	}

	[CRepr]
	public struct VkPipelineBinaryHandlesInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 pipelineBinaryCount;
		public VkPipelineBinaryKHR* pPipelineBinaries;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreatePipelineBinariesKHR(VkDevice, VkPipelineBinaryCreateInfoKHR*, VkAllocationCallbacks*, VkPipelineBinaryHandlesInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyPipelineBinaryKHR(VkDevice, VkPipelineBinaryKHR, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPipelineKeyKHR(VkDevice, VkPipelineCreateInfoKHR*, VkPipelineBinaryKeyKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPipelineBinaryDataKHR(VkDevice, VkPipelineBinaryDataInfoKHR*, VkPipelineBinaryKeyKHR*, c_size*, void*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkReleaseCapturedPipelineDataKHR(VkDevice, VkReleaseCapturedPipelineDataInfoKHR*, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreatePipelineBinariesKHR(VkDevice device, VkPipelineBinaryCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkPipelineBinaryHandlesInfoKHR pBinaries);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyPipelineBinaryKHR(VkDevice device, VkPipelineBinaryKHR pipelineBinary, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPipelineKeyKHR(VkDevice device, VkPipelineCreateInfoKHR* pPipelineCreateInfo, out VkPipelineBinaryKeyKHR pPipelineKey);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPipelineBinaryDataKHR(VkDevice device, VkPipelineBinaryDataInfoKHR* pInfo, out VkPipelineBinaryKeyKHR pPipelineBinaryKey, out c_size pPipelineBinaryDataSize, void* pPipelineBinaryData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkReleaseCapturedPipelineDataKHR(VkDevice device, VkReleaseCapturedPipelineDataInfoKHR* pInfo, VkAllocationCallbacks* pAllocator);

	[CRepr, AllowDuplicates]
	public enum VkComponentTypeKHR : c_int
	{
		VK_COMPONENT_TYPE_FLOAT16_KHR = 0,
		VK_COMPONENT_TYPE_FLOAT32_KHR = 1,
		VK_COMPONENT_TYPE_FLOAT64_KHR = 2,
		VK_COMPONENT_TYPE_SINT8_KHR = 3,
		VK_COMPONENT_TYPE_SINT16_KHR = 4,
		VK_COMPONENT_TYPE_SINT32_KHR = 5,
		VK_COMPONENT_TYPE_SINT64_KHR = 6,
		VK_COMPONENT_TYPE_UINT8_KHR = 7,
		VK_COMPONENT_TYPE_UINT16_KHR = 8,
		VK_COMPONENT_TYPE_UINT32_KHR = 9,
		VK_COMPONENT_TYPE_UINT64_KHR = 10,
		VK_COMPONENT_TYPE_FLOAT16_NV = 0,
		VK_COMPONENT_TYPE_FLOAT32_NV = 1,
		VK_COMPONENT_TYPE_FLOAT64_NV = 2,
		VK_COMPONENT_TYPE_SINT8_NV = 3,
		VK_COMPONENT_TYPE_SINT16_NV = 4,
		VK_COMPONENT_TYPE_SINT32_NV = 5,
		VK_COMPONENT_TYPE_SINT64_NV = 6,
		VK_COMPONENT_TYPE_UINT8_NV = 7,
		VK_COMPONENT_TYPE_UINT16_NV = 8,
		VK_COMPONENT_TYPE_UINT32_NV = 9,
		VK_COMPONENT_TYPE_UINT64_NV = 10,
		VK_COMPONENT_TYPE_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkScopeKHR : c_int
	{
		VK_SCOPE_DEVICE_KHR = 1,
		VK_SCOPE_WORKGROUP_KHR = 2,
		VK_SCOPE_SUBGROUP_KHR = 3,
		VK_SCOPE_QUEUE_FAMILY_KHR = 5,
		VK_SCOPE_DEVICE_NV = 1,
		VK_SCOPE_WORKGROUP_NV = 2,
		VK_SCOPE_SUBGROUP_NV = 3,
		VK_SCOPE_QUEUE_FAMILY_NV = 5,
		VK_SCOPE_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr]
	public struct VkCooperativeMatrixPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 MSize;
		public uint32 NSize;
		public uint32 KSize;
		public VkComponentTypeKHR AType;
		public VkComponentTypeKHR BType;
		public VkComponentTypeKHR CType;
		public VkComponentTypeKHR ResultType;
		public VkBool32 saturatingAccumulation;
		public VkScopeKHR @scope;
	}

	[CRepr]
	public struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 cooperativeMatrix;
		public VkBool32 cooperativeMatrixRobustBufferAccess;
	}

	[CRepr]
	public struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderStageFlags cooperativeMatrixSupportedStages;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice, uint32*, VkCooperativeMatrixPropertiesKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkCooperativeMatrixPropertiesKHR* pProperties);

	[CRepr]
	public struct VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 computeDerivativeGroupQuads;
		public VkBool32 computeDerivativeGroupLinear;
	}

	[CRepr]
	public struct VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 meshAndTaskShaderDerivatives;
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1Profile : c_int
	{
		STD_VIDEO_AV1_PROFILE_MAIN = 0,
		STD_VIDEO_AV1_PROFILE_HIGH = 1,
		STD_VIDEO_AV1_PROFILE_PROFESSIONAL = 2,
		STD_VIDEO_AV1_PROFILE_INVALID = 2147483647,
		STD_VIDEO_AV1_PROFILE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1Level : c_int
	{
		STD_VIDEO_AV1_LEVEL_2_0 = 0,
		STD_VIDEO_AV1_LEVEL_2_1 = 1,
		STD_VIDEO_AV1_LEVEL_2_2 = 2,
		STD_VIDEO_AV1_LEVEL_2_3 = 3,
		STD_VIDEO_AV1_LEVEL_3_0 = 4,
		STD_VIDEO_AV1_LEVEL_3_1 = 5,
		STD_VIDEO_AV1_LEVEL_3_2 = 6,
		STD_VIDEO_AV1_LEVEL_3_3 = 7,
		STD_VIDEO_AV1_LEVEL_4_0 = 8,
		STD_VIDEO_AV1_LEVEL_4_1 = 9,
		STD_VIDEO_AV1_LEVEL_4_2 = 10,
		STD_VIDEO_AV1_LEVEL_4_3 = 11,
		STD_VIDEO_AV1_LEVEL_5_0 = 12,
		STD_VIDEO_AV1_LEVEL_5_1 = 13,
		STD_VIDEO_AV1_LEVEL_5_2 = 14,
		STD_VIDEO_AV1_LEVEL_5_3 = 15,
		STD_VIDEO_AV1_LEVEL_6_0 = 16,
		STD_VIDEO_AV1_LEVEL_6_1 = 17,
		STD_VIDEO_AV1_LEVEL_6_2 = 18,
		STD_VIDEO_AV1_LEVEL_6_3 = 19,
		STD_VIDEO_AV1_LEVEL_7_0 = 20,
		STD_VIDEO_AV1_LEVEL_7_1 = 21,
		STD_VIDEO_AV1_LEVEL_7_2 = 22,
		STD_VIDEO_AV1_LEVEL_7_3 = 23,
		STD_VIDEO_AV1_LEVEL_INVALID = 2147483647,
		STD_VIDEO_AV1_LEVEL_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1FrameType : c_int
	{
		STD_VIDEO_AV1_FRAME_TYPE_KEY = 0,
		STD_VIDEO_AV1_FRAME_TYPE_INTER = 1,
		STD_VIDEO_AV1_FRAME_TYPE_INTRA_ONLY = 2,
		STD_VIDEO_AV1_FRAME_TYPE_SWITCH = 3,
		STD_VIDEO_AV1_FRAME_TYPE_INVALID = 2147483647,
		STD_VIDEO_AV1_FRAME_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1ReferenceName : c_int
	{
		STD_VIDEO_AV1_REFERENCE_NAME_INTRA_FRAME = 0,
		STD_VIDEO_AV1_REFERENCE_NAME_LAST_FRAME = 1,
		STD_VIDEO_AV1_REFERENCE_NAME_LAST2_FRAME = 2,
		STD_VIDEO_AV1_REFERENCE_NAME_LAST3_FRAME = 3,
		STD_VIDEO_AV1_REFERENCE_NAME_GOLDEN_FRAME = 4,
		STD_VIDEO_AV1_REFERENCE_NAME_BWDREF_FRAME = 5,
		STD_VIDEO_AV1_REFERENCE_NAME_ALTREF2_FRAME = 6,
		STD_VIDEO_AV1_REFERENCE_NAME_ALTREF_FRAME = 7,
		STD_VIDEO_AV1_REFERENCE_NAME_INVALID = 2147483647,
		STD_VIDEO_AV1_REFERENCE_NAME_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1InterpolationFilter : c_int
	{
		STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP = 0,
		STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH = 1,
		STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP = 2,
		STD_VIDEO_AV1_INTERPOLATION_FILTER_BILINEAR = 3,
		STD_VIDEO_AV1_INTERPOLATION_FILTER_SWITCHABLE = 4,
		STD_VIDEO_AV1_INTERPOLATION_FILTER_INVALID = 2147483647,
		STD_VIDEO_AV1_INTERPOLATION_FILTER_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1TxMode : c_int
	{
		STD_VIDEO_AV1_TX_MODE_ONLY_4X4 = 0,
		STD_VIDEO_AV1_TX_MODE_LARGEST = 1,
		STD_VIDEO_AV1_TX_MODE_SELECT = 2,
		STD_VIDEO_AV1_TX_MODE_INVALID = 2147483647,
		STD_VIDEO_AV1_TX_MODE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1FrameRestorationType : c_int
	{
		STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_NONE = 0,
		STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_WIENER = 1,
		STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SGRPROJ = 2,
		STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SWITCHABLE = 3,
		STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_INVALID = 2147483647,
		STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1ColorPrimaries : c_int
	{
		STD_VIDEO_AV1_COLOR_PRIMARIES_BT_709 = 1,
		STD_VIDEO_AV1_COLOR_PRIMARIES_UNSPECIFIED = 2,
		STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_M = 4,
		STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_B_G = 5,
		STD_VIDEO_AV1_COLOR_PRIMARIES_BT_601 = 6,
		STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_240 = 7,
		STD_VIDEO_AV1_COLOR_PRIMARIES_GENERIC_FILM = 8,
		STD_VIDEO_AV1_COLOR_PRIMARIES_BT_2020 = 9,
		STD_VIDEO_AV1_COLOR_PRIMARIES_XYZ = 10,
		STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_431 = 11,
		STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_432 = 12,
		STD_VIDEO_AV1_COLOR_PRIMARIES_EBU_3213 = 22,
		STD_VIDEO_AV1_COLOR_PRIMARIES_INVALID = 2147483647,
		STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED = 2,
		STD_VIDEO_AV1_COLOR_PRIMARIES_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1TransferCharacteristics : c_int
	{
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_0 = 0,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_709 = 1,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_3 = 3,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_M = 4,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_B_G = 5,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_601 = 6,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_240 = 7,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LINEAR = 8,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100 = 9,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100_SQRT10 = 10,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_IEC_61966 = 11,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_1361 = 12,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SRGB = 13,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_10_BIT = 14,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_12_BIT = 15,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_2084 = 16,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_428 = 17,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_HLG = 18,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_INVALID = 2147483647,
		STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1MatrixCoefficients : c_int
	{
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_IDENTITY = 0,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_709 = 1,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_UNSPECIFIED = 2,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_RESERVED_3 = 3,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_FCC = 4,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_470_B_G = 5,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_601 = 6,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_240 = 7,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_YCGCO = 8,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_NCL = 9,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_CL = 10,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_2085 = 11,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_NCL = 12,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_CL = 13,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_ICTCP = 14,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_INVALID = 2147483647,
		STD_VIDEO_AV1_MATRIX_COEFFICIENTS_MAX_ENUM = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum StdVideoAV1ChromaSamplePosition : c_int
	{
		STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_UNKNOWN = 0,
		STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_VERTICAL = 1,
		STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_COLOCATED = 2,
		STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_RESERVED = 3,
		STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_INVALID = 2147483647,
		STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_MAX_ENUM = 2147483647,
	}

	[CRepr]
	public struct StdVideoAV1ColorConfigFlags
	{
		public uint32 mono_chrome;
		public uint32 color_range;
		public uint32 separate_uv_delta_q;
		public uint32 color_description_present_flag;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoAV1ColorConfig
	{
		public StdVideoAV1ColorConfigFlags flags;
		public uint8 BitDepth;
		public uint8 subsampling_x;
		public uint8 subsampling_y;
		public uint8 reserved1;
		public StdVideoAV1ColorPrimaries color_primaries;
		public StdVideoAV1TransferCharacteristics transfer_characteristics;
		public StdVideoAV1MatrixCoefficients matrix_coefficients;
		public StdVideoAV1ChromaSamplePosition chroma_sample_position;
	}

	[CRepr]
	public struct StdVideoAV1TimingInfoFlags
	{
		public uint32 equal_picture_interval;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoAV1TimingInfo
	{
		public StdVideoAV1TimingInfoFlags flags;
		public uint32 num_units_in_display_tick;
		public uint32 time_scale;
		public uint32 num_ticks_per_picture_minus_1;
	}

	[CRepr]
	public struct StdVideoAV1LoopFilterFlags
	{
		public uint32 loop_filter_delta_enabled;
		public uint32 loop_filter_delta_update;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoAV1LoopFilter
	{
		public StdVideoAV1LoopFilterFlags flags;
		public uint8[4] loop_filter_level;
		public uint8 loop_filter_sharpness;
		public uint8 update_ref_delta;
		public int8[8] loop_filter_ref_deltas;
		public uint8 update_mode_delta;
		public int8[2] loop_filter_mode_deltas;
	}

	[CRepr]
	public struct StdVideoAV1QuantizationFlags
	{
		public uint32 using_qmatrix;
		public uint32 diff_uv_delta;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoAV1Quantization
	{
		public StdVideoAV1QuantizationFlags flags;
		public uint8 base_q_idx;
		public int8 DeltaQYDc;
		public int8 DeltaQUDc;
		public int8 DeltaQUAc;
		public int8 DeltaQVDc;
		public int8 DeltaQVAc;
		public uint8 qm_y;
		public uint8 qm_u;
		public uint8 qm_v;
	}

	[CRepr]
	public struct StdVideoAV1Segmentation
	{
		public uint8[8] FeatureEnabled;
		public int16[8][8] FeatureData;
	}

	[CRepr]
	public struct StdVideoAV1TileInfoFlags
	{
		public uint32 uniform_tile_spacing_flag;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoAV1TileInfo
	{
		public StdVideoAV1TileInfoFlags flags;
		public uint8 TileCols;
		public uint8 TileRows;
		public uint16 context_update_tile_id;
		public uint8 tile_size_bytes_minus_1;
		public uint8[7] reserved1;
		public uint16* pMiColStarts;
		public uint16* pMiRowStarts;
		public uint16* pWidthInSbsMinus1;
		public uint16* pHeightInSbsMinus1;
	}

	[CRepr]
	public struct StdVideoAV1CDEF
	{
		public uint8 cdef_damping_minus_3;
		public uint8 cdef_bits;
		public uint8[8] cdef_y_pri_strength;
		public uint8[8] cdef_y_sec_strength;
		public uint8[8] cdef_uv_pri_strength;
		public uint8[8] cdef_uv_sec_strength;
	}

	[CRepr]
	public struct StdVideoAV1LoopRestoration
	{
		public StdVideoAV1FrameRestorationType[3] FrameRestorationType;
		public uint16[3] LoopRestorationSize;
	}

	[CRepr]
	public struct StdVideoAV1GlobalMotion
	{
		public uint8[8] GmType;
		public int32[6][8] gm_params;
	}

	[CRepr]
	public struct StdVideoAV1FilmGrainFlags
	{
		public uint32 chroma_scaling_from_luma;
		public uint32 overlap_flag;
		public uint32 clip_to_restricted_range;
		public uint32 update_grain;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoAV1FilmGrain
	{
		public StdVideoAV1FilmGrainFlags flags;
		public uint8 grain_scaling_minus_8;
		public uint8 ar_coeff_lag;
		public uint8 ar_coeff_shift_minus_6;
		public uint8 grain_scale_shift;
		public uint16 grain_seed;
		public uint8 film_grain_params_ref_idx;
		public uint8 num_y_points;
		public uint8[14] point_y_value;
		public uint8[14] point_y_scaling;
		public uint8 num_cb_points;
		public uint8[10] point_cb_value;
		public uint8[10] point_cb_scaling;
		public uint8 num_cr_points;
		public uint8[10] point_cr_value;
		public uint8[10] point_cr_scaling;
		public int8[24] ar_coeffs_y_plus_128;
		public int8[25] ar_coeffs_cb_plus_128;
		public int8[25] ar_coeffs_cr_plus_128;
		public uint8 cb_mult;
		public uint8 cb_luma_mult;
		public uint16 cb_offset;
		public uint8 cr_mult;
		public uint8 cr_luma_mult;
		public uint16 cr_offset;
	}

	[CRepr]
	public struct StdVideoAV1SequenceHeaderFlags
	{
		public uint32 still_picture;
		public uint32 reduced_still_picture_header;
		public uint32 use_128x128_superblock;
		public uint32 enable_filter_intra;
		public uint32 enable_intra_edge_filter;
		public uint32 enable_interintra_compound;
		public uint32 enable_masked_compound;
		public uint32 enable_warped_motion;
		public uint32 enable_dual_filter;
		public uint32 enable_order_hint;
		public uint32 enable_jnt_comp;
		public uint32 enable_ref_frame_mvs;
		public uint32 frame_id_numbers_present_flag;
		public uint32 enable_superres;
		public uint32 enable_cdef;
		public uint32 enable_restoration;
		public uint32 film_grain_params_present;
		public uint32 timing_info_present_flag;
		public uint32 initial_display_delay_present_flag;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoAV1SequenceHeader
	{
		public StdVideoAV1SequenceHeaderFlags flags;
		public StdVideoAV1Profile seq_profile;
		public uint8 frame_width_bits_minus_1;
		public uint8 frame_height_bits_minus_1;
		public uint16 max_frame_width_minus_1;
		public uint16 max_frame_height_minus_1;
		public uint8 delta_frame_id_length_minus_2;
		public uint8 additional_frame_id_length_minus_1;
		public uint8 order_hint_bits_minus_1;
		public uint8 seq_force_integer_mv;
		public uint8 seq_force_screen_content_tools;
		public uint8[5] reserved1;
		public StdVideoAV1ColorConfig* pColorConfig;
		public StdVideoAV1TimingInfo* pTimingInfo;
	}

	[CRepr]
	public struct StdVideoDecodeAV1PictureInfoFlags
	{
		public uint32 error_resilient_mode;
		public uint32 disable_cdf_update;
		public uint32 use_superres;
		public uint32 render_and_frame_size_different;
		public uint32 allow_screen_content_tools;
		public uint32 is_filter_switchable;
		public uint32 force_integer_mv;
		public uint32 frame_size_override_flag;
		public uint32 buffer_removal_time_present_flag;
		public uint32 allow_intrabc;
		public uint32 frame_refs_short_signaling;
		public uint32 allow_high_precision_mv;
		public uint32 is_motion_mode_switchable;
		public uint32 use_ref_frame_mvs;
		public uint32 disable_frame_end_update_cdf;
		public uint32 allow_warped_motion;
		public uint32 reduced_tx_set;
		public uint32 reference_select;
		public uint32 skip_mode_present;
		public uint32 delta_q_present;
		public uint32 delta_lf_present;
		public uint32 delta_lf_multi;
		public uint32 segmentation_enabled;
		public uint32 segmentation_update_map;
		public uint32 segmentation_temporal_update;
		public uint32 segmentation_update_data;
		public uint32 UsesLr;
		public uint32 usesChromaLr;
		public uint32 apply_grain;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoDecodeAV1PictureInfo
	{
		public StdVideoDecodeAV1PictureInfoFlags flags;
		public StdVideoAV1FrameType frame_type;
		public uint32 current_frame_id;
		public uint8 OrderHint;
		public uint8 primary_ref_frame;
		public uint8 refresh_frame_flags;
		public uint8 reserved1;
		public StdVideoAV1InterpolationFilter interpolation_filter;
		public StdVideoAV1TxMode TxMode;
		public uint8 delta_q_res;
		public uint8 delta_lf_res;
		public uint8[2] SkipModeFrame;
		public uint8 coded_denom;
		public uint8[3] reserved2;
		public uint8[8] OrderHints;
		public uint32[8] expectedFrameId;
		public StdVideoAV1TileInfo* pTileInfo;
		public StdVideoAV1Quantization* pQuantization;
		public StdVideoAV1Segmentation* pSegmentation;
		public StdVideoAV1LoopFilter* pLoopFilter;
		public StdVideoAV1CDEF* pCDEF;
		public StdVideoAV1LoopRestoration* pLoopRestoration;
		public StdVideoAV1GlobalMotion* pGlobalMotion;
		public StdVideoAV1FilmGrain* pFilmGrain;
	}

	[CRepr]
	public struct StdVideoDecodeAV1ReferenceInfoFlags
	{
		public uint32 disable_frame_end_update_cdf;
		public uint32 segmentation_enabled;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoDecodeAV1ReferenceInfo
	{
		public StdVideoDecodeAV1ReferenceInfoFlags flags;
		public uint8 frame_type;
		public uint8 RefFrameSignBias;
		public uint8 OrderHint;
		public uint8[8] SavedOrderHints;
	}

	[CRepr]
	public struct VkVideoDecodeAV1ProfileInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoAV1Profile stdProfile;
		public VkBool32 filmGrainSupport;
	}

	[CRepr]
	public struct VkVideoDecodeAV1CapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoAV1Level maxLevel;
	}

	[CRepr]
	public struct VkVideoDecodeAV1SessionParametersCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoAV1SequenceHeader* pStdSequenceHeader;
	}

	[CRepr]
	public struct VkVideoDecodeAV1PictureInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoDecodeAV1PictureInfo* pStdPictureInfo;
		public int32[7] referenceNameSlotIndices;
		public uint32 frameHeaderOffset;
		public uint32 tileCount;
		public uint32* pTileOffsets;
		public uint32* pTileSizes;
	}

	[CRepr]
	public struct VkVideoDecodeAV1DpbSlotInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoDecodeAV1ReferenceInfo* pStdReferenceInfo;
	}

	[CRepr]
	public struct StdVideoEncodeAV1DecoderModelInfo
	{
		public uint8 buffer_delay_length_minus_1;
		public uint8 buffer_removal_time_length_minus_1;
		public uint8 frame_presentation_time_length_minus_1;
		public uint8 reserved1;
		public uint32 num_units_in_decoding_tick;
	}

	[CRepr]
	public struct StdVideoEncodeAV1ExtensionHeader
	{
		public uint8 temporal_id;
		public uint8 spatial_id;
	}

	[CRepr]
	public struct StdVideoEncodeAV1OperatingPointInfoFlags
	{
		public uint32 decoder_model_present_for_this_op;
		public uint32 low_delay_mode_flag;
		public uint32 initial_display_delay_present_for_this_op;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeAV1OperatingPointInfo
	{
		public StdVideoEncodeAV1OperatingPointInfoFlags flags;
		public uint16 operating_point_idc;
		public uint8 seq_level_idx;
		public uint8 seq_tier;
		public uint32 decoder_buffer_delay;
		public uint32 encoder_buffer_delay;
		public uint8 initial_display_delay_minus_1;
	}

	[CRepr]
	public struct StdVideoEncodeAV1PictureInfoFlags
	{
		public uint32 error_resilient_mode;
		public uint32 disable_cdf_update;
		public uint32 use_superres;
		public uint32 render_and_frame_size_different;
		public uint32 allow_screen_content_tools;
		public uint32 is_filter_switchable;
		public uint32 force_integer_mv;
		public uint32 frame_size_override_flag;
		public uint32 buffer_removal_time_present_flag;
		public uint32 allow_intrabc;
		public uint32 frame_refs_short_signaling;
		public uint32 allow_high_precision_mv;
		public uint32 is_motion_mode_switchable;
		public uint32 use_ref_frame_mvs;
		public uint32 disable_frame_end_update_cdf;
		public uint32 allow_warped_motion;
		public uint32 reduced_tx_set;
		public uint32 skip_mode_present;
		public uint32 delta_q_present;
		public uint32 delta_lf_present;
		public uint32 delta_lf_multi;
		public uint32 segmentation_enabled;
		public uint32 segmentation_update_map;
		public uint32 segmentation_temporal_update;
		public uint32 segmentation_update_data;
		public uint32 UsesLr;
		public uint32 usesChromaLr;
		public uint32 show_frame;
		public uint32 showable_frame;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeAV1PictureInfo
	{
		public StdVideoEncodeAV1PictureInfoFlags flags;
		public StdVideoAV1FrameType frame_type;
		public uint32 frame_presentation_time;
		public uint32 current_frame_id;
		public uint8 order_hint;
		public uint8 primary_ref_frame;
		public uint8 refresh_frame_flags;
		public uint8 coded_denom;
		public uint16 render_width_minus_1;
		public uint16 render_height_minus_1;
		public StdVideoAV1InterpolationFilter interpolation_filter;
		public StdVideoAV1TxMode TxMode;
		public uint8 delta_q_res;
		public uint8 delta_lf_res;
		public uint8[8] ref_order_hint;
		public int8[7] ref_frame_idx;
		public uint8[3] reserved1;
		public uint32[7] delta_frame_id_minus_1;
		public StdVideoAV1TileInfo* pTileInfo;
		public StdVideoAV1Quantization* pQuantization;
		public StdVideoAV1Segmentation* pSegmentation;
		public StdVideoAV1LoopFilter* pLoopFilter;
		public StdVideoAV1CDEF* pCDEF;
		public StdVideoAV1LoopRestoration* pLoopRestoration;
		public StdVideoAV1GlobalMotion* pGlobalMotion;
		public StdVideoEncodeAV1ExtensionHeader* pExtensionHeader;
		public uint32* pBufferRemovalTimes;
	}

	[CRepr]
	public struct StdVideoEncodeAV1ReferenceInfoFlags
	{
		public uint32 disable_frame_end_update_cdf;
		public uint32 segmentation_enabled;
		public uint32 reserved;
	}

	[CRepr]
	public struct StdVideoEncodeAV1ReferenceInfo
	{
		public StdVideoEncodeAV1ReferenceInfoFlags flags;
		public uint32 RefFrameId;
		public StdVideoAV1FrameType frame_type;
		public uint8 OrderHint;
		public uint8[3] reserved1;
		public StdVideoEncodeAV1ExtensionHeader* pExtensionHeader;
	}

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeAV1PredictionModeKHR : c_int
	{
		VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_INTRA_ONLY_KHR = 0,
		VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_SINGLE_REFERENCE_KHR = 1,
		VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_UNIDIRECTIONAL_COMPOUND_KHR = 2,
		VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_BIDIRECTIONAL_COMPOUND_KHR = 3,
		VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeAV1RateControlGroupKHR : c_int
	{
		VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_INTRA_KHR = 0,
		VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_PREDICTIVE_KHR = 1,
		VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_BIPREDICTIVE_KHR = 2,
		VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeAV1CapabilityFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR = 1,
		VK_VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR = 2,
		VK_VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR = 4,
		VK_VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR = 8,
		VK_VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR = 16,
		VK_VIDEO_ENCODE_AV1_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeAV1CapabilityFlagsKHR = VkVideoEncodeAV1CapabilityFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeAV1StdFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR = 1,
		VK_VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR = 2,
		VK_VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR = 4,
		VK_VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR = 8,
		VK_VIDEO_ENCODE_AV1_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeAV1StdFlagsKHR = VkVideoEncodeAV1StdFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeAV1SuperblockSizeFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR = 1,
		VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR = 2,
		VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeAV1SuperblockSizeFlagsKHR = VkVideoEncodeAV1SuperblockSizeFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkVideoEncodeAV1RateControlFlagBitsKHR : c_int
	{
		VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 1,
		VK_VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 2,
		VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4,
		VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8,
		VK_VIDEO_ENCODE_AV1_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkVideoEncodeAV1RateControlFlagsKHR = VkVideoEncodeAV1RateControlFlagBitsKHR;

	[CRepr]
	public struct VkPhysicalDeviceVideoEncodeAV1FeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 videoEncodeAV1;
	}

	[CRepr]
	public struct VkVideoEncodeAV1CapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeAV1CapabilityFlagsKHR flags;
		public StdVideoAV1Level maxLevel;
		public VkExtent2D codedPictureAlignment;
		public VkExtent2D maxTiles;
		public VkExtent2D minTileSize;
		public VkExtent2D maxTileSize;
		public VkVideoEncodeAV1SuperblockSizeFlagsKHR superblockSizes;
		public uint32 maxSingleReferenceCount;
		public uint32 singleReferenceNameMask;
		public uint32 maxUnidirectionalCompoundReferenceCount;
		public uint32 maxUnidirectionalCompoundGroup1ReferenceCount;
		public uint32 unidirectionalCompoundReferenceNameMask;
		public uint32 maxBidirectionalCompoundReferenceCount;
		public uint32 maxBidirectionalCompoundGroup1ReferenceCount;
		public uint32 maxBidirectionalCompoundGroup2ReferenceCount;
		public uint32 bidirectionalCompoundReferenceNameMask;
		public uint32 maxTemporalLayerCount;
		public uint32 maxSpatialLayerCount;
		public uint32 maxOperatingPoints;
		public uint32 minQIndex;
		public uint32 maxQIndex;
		public VkBool32 prefersGopRemainingFrames;
		public VkBool32 requiresGopRemainingFrames;
		public VkVideoEncodeAV1StdFlagsKHR stdSyntaxFlags;
	}

	[CRepr]
	public struct VkVideoEncodeAV1QIndexKHR
	{
		public uint32 intraQIndex;
		public uint32 predictiveQIndex;
		public uint32 bipredictiveQIndex;
	}

	[CRepr]
	public struct VkVideoEncodeAV1QualityLevelPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeAV1RateControlFlagsKHR preferredRateControlFlags;
		public uint32 preferredGopFrameCount;
		public uint32 preferredKeyFramePeriod;
		public uint32 preferredConsecutiveBipredictiveFrameCount;
		public uint32 preferredTemporalLayerCount;
		public VkVideoEncodeAV1QIndexKHR preferredConstantQIndex;
		public uint32 preferredMaxSingleReferenceCount;
		public uint32 preferredSingleReferenceNameMask;
		public uint32 preferredMaxUnidirectionalCompoundReferenceCount;
		public uint32 preferredMaxUnidirectionalCompoundGroup1ReferenceCount;
		public uint32 preferredUnidirectionalCompoundReferenceNameMask;
		public uint32 preferredMaxBidirectionalCompoundReferenceCount;
		public uint32 preferredMaxBidirectionalCompoundGroup1ReferenceCount;
		public uint32 preferredMaxBidirectionalCompoundGroup2ReferenceCount;
		public uint32 preferredBidirectionalCompoundReferenceNameMask;
	}

	[CRepr]
	public struct VkVideoEncodeAV1SessionCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 useMaxLevel;
		public StdVideoAV1Level maxLevel;
	}

	[CRepr]
	public struct VkVideoEncodeAV1SessionParametersCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoAV1SequenceHeader* pStdSequenceHeader;
		public StdVideoEncodeAV1DecoderModelInfo* pStdDecoderModelInfo;
		public uint32 stdOperatingPointCount;
		public StdVideoEncodeAV1OperatingPointInfo* pStdOperatingPoints;
	}

	[CRepr]
	public struct VkVideoEncodeAV1PictureInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeAV1PredictionModeKHR predictionMode;
		public VkVideoEncodeAV1RateControlGroupKHR rateControlGroup;
		public uint32 constantQIndex;
		public StdVideoEncodeAV1PictureInfo* pStdPictureInfo;
		public int32[7] referenceNameSlotIndices;
		public VkBool32 primaryReferenceCdfOnly;
		public VkBool32 generateObuExtensionHeader;
	}

	[CRepr]
	public struct VkVideoEncodeAV1DpbSlotInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoEncodeAV1ReferenceInfo* pStdReferenceInfo;
	}

	[CRepr]
	public struct VkVideoEncodeAV1ProfileInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public StdVideoAV1Profile stdProfile;
	}

	[CRepr]
	public struct VkVideoEncodeAV1FrameSizeKHR
	{
		public uint32 intraFrameSize;
		public uint32 predictiveFrameSize;
		public uint32 bipredictiveFrameSize;
	}

	[CRepr]
	public struct VkVideoEncodeAV1GopRemainingFrameInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 useGopRemainingFrames;
		public uint32 gopRemainingIntra;
		public uint32 gopRemainingPredictive;
		public uint32 gopRemainingBipredictive;
	}

	[CRepr]
	public struct VkVideoEncodeAV1RateControlInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeAV1RateControlFlagsKHR flags;
		public uint32 gopFrameCount;
		public uint32 keyFramePeriod;
		public uint32 consecutiveBipredictiveFrameCount;
		public uint32 temporalLayerCount;
	}

	[CRepr]
	public struct VkVideoEncodeAV1RateControlLayerInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 useMinQIndex;
		public VkVideoEncodeAV1QIndexKHR minQIndex;
		public VkBool32 useMaxQIndex;
		public VkVideoEncodeAV1QIndexKHR maxQIndex;
		public VkBool32 useMaxFrameSize;
		public VkVideoEncodeAV1FrameSizeKHR maxFrameSize;
	}

	[CRepr]
	public struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 videoMaintenance1;
	}

	[CRepr]
	public struct VkVideoInlineQueryInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkQueryPool queryPool;
		public uint32 firstQuery;
		public uint32 queryCount;
	}

	public typealias VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR = VkPhysicalDeviceVertexAttributeDivisorProperties;

	public typealias VkVertexInputBindingDivisorDescriptionKHR = VkVertexInputBindingDivisorDescription;

	public typealias VkPipelineVertexInputDivisorStateCreateInfoKHR = VkPipelineVertexInputDivisorStateCreateInfo;

	public typealias VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR = VkPhysicalDeviceVertexAttributeDivisorFeatures;

	public typealias VkPhysicalDeviceShaderFloatControls2FeaturesKHR = VkPhysicalDeviceShaderFloatControls2Features;

	public typealias VkPhysicalDeviceIndexTypeUint8FeaturesKHR = VkPhysicalDeviceIndexTypeUint8Features;

	public typealias VkLineRasterizationModeKHR = VkLineRasterizationMode;

	public typealias VkPhysicalDeviceLineRasterizationFeaturesKHR = VkPhysicalDeviceLineRasterizationFeatures;

	public typealias VkPhysicalDeviceLineRasterizationPropertiesKHR = VkPhysicalDeviceLineRasterizationProperties;

	public typealias VkPipelineRasterizationLineStateCreateInfoKHR = VkPipelineRasterizationLineStateCreateInfo;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetLineStippleKHR(VkCommandBuffer, uint32, uint16);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetLineStippleKHR(VkCommandBuffer commandBuffer, uint32 lineStippleFactor, uint16 lineStipplePattern);

	[CRepr, AllowDuplicates]
	public enum VkTimeDomainKHR : c_int
	{
		VK_TIME_DOMAIN_DEVICE_KHR = 0,
		VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR = 1,
		VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = 2,
		VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = 3,
		VK_TIME_DOMAIN_DEVICE_EXT = 0,
		VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
		VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
		VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
		VK_TIME_DOMAIN_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr]
	public struct VkCalibratedTimestampInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkTimeDomainKHR timeDomain;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice, uint32*, VkTimeDomainKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetCalibratedTimestampsKHR(VkDevice, uint32, VkCalibratedTimestampInfoKHR*, uint64*, uint64*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice, out uint32 pTimeDomainCount, VkTimeDomainKHR* pTimeDomains);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetCalibratedTimestampsKHR(VkDevice device, uint32 timestampCount, VkCalibratedTimestampInfoKHR* pTimestampInfos, out uint64 pTimestamps, out uint64 pMaxDeviation);

	public typealias VkPhysicalDeviceShaderExpectAssumeFeaturesKHR = VkPhysicalDeviceShaderExpectAssumeFeatures;

	public typealias VkPhysicalDeviceMaintenance6FeaturesKHR = VkPhysicalDeviceMaintenance6Features;

	public typealias VkPhysicalDeviceMaintenance6PropertiesKHR = VkPhysicalDeviceMaintenance6Properties;

	public typealias VkBindMemoryStatusKHR = VkBindMemoryStatus;

	public typealias VkBindDescriptorSetsInfoKHR = VkBindDescriptorSetsInfo;

	public typealias VkPushConstantsInfoKHR = VkPushConstantsInfo;

	public typealias VkPushDescriptorSetInfoKHR = VkPushDescriptorSetInfo;

	public typealias VkPushDescriptorSetWithTemplateInfoKHR = VkPushDescriptorSetWithTemplateInfo;

	[CRepr]
	public struct VkSetDescriptorBufferOffsetsInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderStageFlags stageFlags;
		public VkPipelineLayout layout;
		public uint32 firstSet;
		public uint32 setCount;
		public uint32* pBufferIndices;
		public VkDeviceSize* pOffsets;
	}

	[CRepr]
	public struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderStageFlags stageFlags;
		public VkPipelineLayout layout;
		public uint32 set;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindDescriptorSets2KHR(VkCommandBuffer, VkBindDescriptorSetsInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushConstants2KHR(VkCommandBuffer, VkPushConstantsInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushDescriptorSet2KHR(VkCommandBuffer, VkPushDescriptorSetInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer, VkPushDescriptorSetWithTemplateInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer, VkSetDescriptorBufferOffsetsInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer, VkBindDescriptorBufferEmbeddedSamplersInfoEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* pBindDescriptorSetsInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushConstants2KHR(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pPushConstantsInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pPushDescriptorSetInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer commandBuffer, VkSetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer commandBuffer, VkBindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo);

	[CRepr]
	public struct VkVideoEncodeQuantizationMapCapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D maxQuantizationMapExtent;
	}

	[CRepr]
	public struct VkVideoFormatQuantizationMapPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D quantizationMapTexelSize;
	}

	[CRepr]
	public struct VkVideoEncodeQuantizationMapInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageView quantizationMap;
		public VkExtent2D quantizationMapExtent;
	}

	[CRepr]
	public struct VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D quantizationMapTexelSize;
	}

	[CRepr]
	public struct VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 videoEncodeQuantizationMap;
	}

	[CRepr]
	public struct VkVideoEncodeH264QuantizationMapCapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public int32 minQpDelta;
		public int32 maxQpDelta;
	}

	[CRepr]
	public struct VkVideoEncodeH265QuantizationMapCapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public int32 minQpDelta;
		public int32 maxQpDelta;
	}

	[CRepr]
	public struct VkVideoFormatH265QuantizationMapPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeH265CtbSizeFlagsKHR compatibleCtbSizes;
	}

	[CRepr]
	public struct VkVideoEncodeAV1QuantizationMapCapabilitiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public int32 minQIndexDelta;
		public int32 maxQIndexDelta;
	}

	[CRepr]
	public struct VkVideoFormatAV1QuantizationMapPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkVideoEncodeAV1SuperblockSizeFlagsKHR compatibleSuperblockSizes;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderRelaxedExtendedInstruction;
	}

	[CRepr, AllowDuplicates]
	public enum VkPhysicalDeviceLayeredApiKHR : c_int
	{
		VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR = 0,
		VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR = 1,
		VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR = 2,
		VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR = 3,
		VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR = 4,
		VK_PHYSICAL_DEVICE_LAYERED_API_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceMaintenance7FeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 maintenance7;
	}

	[CRepr]
	public struct VkPhysicalDeviceMaintenance7PropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 robustFragmentShadingRateAttachmentAccess;
		public VkBool32 separateDepthStencilAttachmentAccess;
		public uint32 maxDescriptorSetTotalUniformBuffersDynamic;
		public uint32 maxDescriptorSetTotalStorageBuffersDynamic;
		public uint32 maxDescriptorSetTotalBuffersDynamic;
		public uint32 maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic;
		public uint32 maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic;
		public uint32 maxDescriptorSetUpdateAfterBindTotalBuffersDynamic;
	}

	[CRepr]
	public struct VkPhysicalDeviceLayeredApiPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 vendorID;
		public uint32 deviceID;
		public VkPhysicalDeviceLayeredApiKHR layeredAPI;
		public c_char[256] deviceName;
	}

	[CRepr]
	public struct VkPhysicalDeviceLayeredApiPropertiesListKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 layeredApiCount;
		public VkPhysicalDeviceLayeredApiPropertiesKHR* pLayeredApis;
	}

	[CRepr]
	public struct VkPhysicalDeviceLayeredApiVulkanPropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPhysicalDeviceProperties2 properties;
	}

	public struct VkDebugReportCallbackEXT_T;
	public typealias VkDebugReportCallbackEXT = VkDebugReportCallbackEXT_T*;

	[CRepr, AllowDuplicates]
	public enum VkDebugReportObjectTypeEXT : c_int
	{
		VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
		VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
		VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
		VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
		VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
		VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
		VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
		VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
		VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
		VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
		VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
		VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
		VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
		VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
		VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
		VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
		VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
		VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
		VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
		VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
		VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
		VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
		VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
		VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
		VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
		VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
		VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
		VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
		VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
		VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
		VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
		VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
		VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
		VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
		VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000,
		VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001,
		VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000,
		VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
		VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT = 1000307000,
		VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT = 1000307001,
		VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000,
		VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28,
		VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33,
		VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000,
		VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000,
		VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkDebugReportFlagBitsEXT : c_int
	{
		VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
		VK_DEBUG_REPORT_WARNING_BIT_EXT = 2,
		VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
		VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
		VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
		VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkDebugReportFlagsEXT = VkDebugReportFlagBitsEXT;

	[CallingConvention(VKAPI_CALL)]
	public function VkBool32 PFN_vkDebugReportCallbackEXT(VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, uint64, c_size, int32, c_char*, c_char*, void*);

	[CRepr]
	public struct VkDebugReportCallbackCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDebugReportFlagsEXT flags;
		public PFN_vkDebugReportCallbackEXT pfnCallback;
		public void* pUserData;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateDebugReportCallbackEXT(VkInstance, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VkDebugReportCallbackEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyDebugReportCallbackEXT(VkInstance, VkDebugReportCallbackEXT, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDebugReportMessageEXT(VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, uint64, c_size, int32, c_char*, c_char*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDebugReportCallbackEXT pCallback);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64 object, c_size location, int32 messageCode, c_char* pLayerPrefix, c_char* pMessage);

	[CRepr, AllowDuplicates]
	public enum VkRasterizationOrderAMD : c_int
	{
		VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
		VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
		VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647,
	}

	[CRepr]
	public struct VkPipelineRasterizationStateRasterizationOrderAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRasterizationOrderAMD rasterizationOrder;
	}

	[CRepr]
	public struct VkDebugMarkerObjectNameInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDebugReportObjectTypeEXT objectType;
		public uint64 object;
		public c_char* pObjectName;
	}

	[CRepr]
	public struct VkDebugMarkerObjectTagInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDebugReportObjectTypeEXT objectType;
		public uint64 object;
		public uint64 tagName;
		public c_size tagSize;
		public void* pTag;
	}

	[CRepr]
	public struct VkDebugMarkerMarkerInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public c_char* pMarkerName;
		public float[4] color;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkDebugMarkerSetObjectTagEXT(VkDevice, VkDebugMarkerObjectTagInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkDebugMarkerSetObjectNameEXT(VkDevice, VkDebugMarkerObjectNameInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDebugMarkerBeginEXT(VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDebugMarkerEndEXT(VkCommandBuffer);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDebugMarkerInsertEXT(VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, VkDebugMarkerObjectTagInfoEXT* pTagInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfoEXT* pNameInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo);

	[CRepr]
	public struct VkDedicatedAllocationImageCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 dedicatedAllocation;
	}

	[CRepr]
	public struct VkDedicatedAllocationBufferCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 dedicatedAllocation;
	}

	[CRepr]
	public struct VkDedicatedAllocationMemoryAllocateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
		public VkBuffer buffer;
	}

	public typealias VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;

	[CRepr]
	public struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 transformFeedback;
		public VkBool32 geometryStreams;
	}

	[CRepr]
	public struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxTransformFeedbackStreams;
		public uint32 maxTransformFeedbackBuffers;
		public VkDeviceSize maxTransformFeedbackBufferSize;
		public uint32 maxTransformFeedbackStreamDataSize;
		public uint32 maxTransformFeedbackBufferDataSize;
		public uint32 maxTransformFeedbackBufferDataStride;
		public VkBool32 transformFeedbackQueries;
		public VkBool32 transformFeedbackStreamsLinesTriangles;
		public VkBool32 transformFeedbackRasterizationStreamSelect;
		public VkBool32 transformFeedbackDraw;
	}

	[CRepr]
	public struct VkPipelineRasterizationStateStreamCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
		public uint32 rasterizationStream;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer, uint32, uint32, VkBuffer*, VkDeviceSize*, VkDeviceSize*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginTransformFeedbackEXT(VkCommandBuffer, uint32, uint32, VkBuffer*, VkDeviceSize*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndTransformFeedbackEXT(VkCommandBuffer, uint32, uint32, VkBuffer*, VkDeviceSize*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginQueryIndexedEXT(VkCommandBuffer, VkQueryPool, uint32, VkQueryControlFlags, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndQueryIndexedEXT(VkCommandBuffer, VkQueryPool, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawIndirectByteCountEXT(VkCommandBuffer, uint32, uint32, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32 firstCounterBuffer, uint32 counterBufferCount, VkBuffer* pCounterBuffers, VkDeviceSize* pCounterBufferOffsets);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32 firstCounterBuffer, uint32 counterBufferCount, VkBuffer* pCounterBuffers, VkDeviceSize* pCounterBufferOffsets);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, VkQueryControlFlags flags, uint32 index);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, uint32 index);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32 instanceCount, uint32 firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32 counterOffset, uint32 vertexStride);

	public struct VkCuModuleNVX_T;
	public typealias VkCuModuleNVX = VkCuModuleNVX_T*;

	public struct VkCuFunctionNVX_T;
	public typealias VkCuFunctionNVX = VkCuFunctionNVX_T*;

	[CRepr]
	public struct VkCuModuleCreateInfoNVX
	{
		public VkStructureType sType;
		public void* pNext;
		public c_size dataSize;
		public void* pData;
	}

	[CRepr]
	public struct VkCuModuleTexturingModeCreateInfoNVX
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 use64bitTexturing;
	}

	[CRepr]
	public struct VkCuFunctionCreateInfoNVX
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCuModuleNVX module;
		public c_char* pName;
	}

	[CRepr]
	public struct VkCuLaunchInfoNVX
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCuFunctionNVX @function;
		public uint32 gridDimX;
		public uint32 gridDimY;
		public uint32 gridDimZ;
		public uint32 blockDimX;
		public uint32 blockDimY;
		public uint32 blockDimZ;
		public uint32 sharedMemBytes;
		public c_size paramCount;
		public void** pParams;
		public c_size extraCount;
		public void** pExtras;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateCuModuleNVX(VkDevice, VkCuModuleCreateInfoNVX*, VkAllocationCallbacks*, VkCuModuleNVX*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateCuFunctionNVX(VkDevice, VkCuFunctionCreateInfoNVX*, VkAllocationCallbacks*, VkCuFunctionNVX*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyCuModuleNVX(VkDevice, VkCuModuleNVX, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyCuFunctionNVX(VkDevice, VkCuFunctionNVX, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCuLaunchKernelNVX(VkCommandBuffer, VkCuLaunchInfoNVX*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateCuModuleNVX(VkDevice device, VkCuModuleCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkCuModuleNVX pModule);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateCuFunctionNVX(VkDevice device, VkCuFunctionCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkCuFunctionNVX pFunction);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX @function, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, VkCuLaunchInfoNVX* pLaunchInfo);

	[CRepr]
	public struct VkImageViewHandleInfoNVX
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageView imageView;
		public VkDescriptorType descriptorType;
		public VkSampler sampler;
	}

	[CRepr]
	public struct VkImageViewAddressPropertiesNVX
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceAddress deviceAddress;
		public VkDeviceSize size;
	}

	[CallingConvention(VKAPI_CALL)]
	public function uint32 PFN_vkGetImageViewHandleNVX(VkDevice, VkImageViewHandleInfoNVX*);

	[CallingConvention(VKAPI_CALL)]
	public function uint64 PFN_vkGetImageViewHandle64NVX(VkDevice, VkImageViewHandleInfoNVX*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetImageViewAddressNVX(VkDevice, VkImageView, VkImageViewAddressPropertiesNVX*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern uint32 vkGetImageViewHandleNVX(VkDevice device, VkImageViewHandleInfoNVX* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern uint64 vkGetImageViewHandle64NVX(VkDevice device, VkImageViewHandleInfoNVX* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, out VkImageViewAddressPropertiesNVX pProperties);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawIndirectCountAMD(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride);

	[CRepr]
	public struct VkTextureLODGatherFormatPropertiesAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 supportsTextureGatherLODBiasAMD;
	}

	[CRepr, AllowDuplicates]
	public enum VkShaderInfoTypeAMD : c_int
	{
		VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
		VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
		VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
		VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647,
	}

	[CRepr]
	public struct VkShaderResourceUsageAMD
	{
		public uint32 numUsedVgprs;
		public uint32 numUsedSgprs;
		public uint32 ldsSizePerLocalWorkGroup;
		public c_size ldsUsageSizeInBytes;
		public c_size scratchMemUsageInBytes;
	}

	[CRepr]
	public struct VkShaderStatisticsInfoAMD
	{
		public VkShaderStageFlags shaderStageMask;
		public VkShaderResourceUsageAMD resourceUsage;
		public uint32 numPhysicalVgprs;
		public uint32 numPhysicalSgprs;
		public uint32 numAvailableVgprs;
		public uint32 numAvailableSgprs;
		public uint32[3] computeWorkGroupSize;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetShaderInfoAMD(VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, c_size*, void*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, out c_size pInfoSize, void* pInfo);

	[CRepr]
	public struct VkPhysicalDeviceCornerSampledImageFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 cornerSampledImage;
	}

	[CRepr, AllowDuplicates]
	public enum VkExternalMemoryHandleTypeFlagBitsNV : c_int
	{
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8,
		VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkExternalMemoryHandleTypeFlagsNV = VkExternalMemoryHandleTypeFlagBitsNV;

	[CRepr, AllowDuplicates]
	public enum VkExternalMemoryFeatureFlagBitsNV : c_int
	{
		VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1,
		VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2,
		VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4,
		VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkExternalMemoryFeatureFlagsNV = VkExternalMemoryFeatureFlagBitsNV;

	[CRepr]
	public struct VkExternalImageFormatPropertiesNV
	{
		public VkImageFormatProperties imageFormatProperties;
		public VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
		public VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
		public VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, out VkExternalImageFormatPropertiesNV pExternalImageFormatProperties);

	[CRepr]
	public struct VkExternalMemoryImageCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlagsNV handleTypes;
	}

	[CRepr]
	public struct VkExportMemoryAllocateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlagsNV handleTypes;
	}

	[CRepr, AllowDuplicates]
	public enum VkValidationCheckEXT : c_int
	{
		VK_VALIDATION_CHECK_ALL_EXT = 0,
		VK_VALIDATION_CHECK_SHADERS_EXT = 1,
		VK_VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr]
	public struct VkValidationFlagsEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 disabledValidationCheckCount;
		public VkValidationCheckEXT* pDisabledValidationChecks;
	}

	public typealias VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = VkPhysicalDeviceTextureCompressionASTCHDRFeatures;

	[CRepr]
	public struct VkImageViewASTCDecodeModeEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFormat decodeMode;
	}

	[CRepr]
	public struct VkPhysicalDeviceASTCDecodeFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 decodeModeSharedExponent;
	}

	public typealias VkPipelineRobustnessBufferBehaviorEXT = VkPipelineRobustnessBufferBehavior;

	public typealias VkPipelineRobustnessImageBehaviorEXT = VkPipelineRobustnessImageBehavior;

	public typealias VkPhysicalDevicePipelineRobustnessFeaturesEXT = VkPhysicalDevicePipelineRobustnessFeatures;

	public typealias VkPhysicalDevicePipelineRobustnessPropertiesEXT = VkPhysicalDevicePipelineRobustnessProperties;

	public typealias VkPipelineRobustnessCreateInfoEXT = VkPipelineRobustnessCreateInfo;

	[CRepr, AllowDuplicates]
	public enum VkConditionalRenderingFlagBitsEXT : c_int
	{
		VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1,
		VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkConditionalRenderingFlagsEXT = VkConditionalRenderingFlagBitsEXT;

	[CRepr]
	public struct VkConditionalRenderingBeginInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBuffer buffer;
		public VkDeviceSize offset;
		public VkConditionalRenderingFlagsEXT flags;
	}

	[CRepr]
	public struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 conditionalRendering;
		public VkBool32 inheritedConditionalRendering;
	}

	[CRepr]
	public struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 conditionalRenderingEnable;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginConditionalRenderingEXT(VkCommandBuffer, VkConditionalRenderingBeginInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndConditionalRenderingEXT(VkCommandBuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer);

	[CRepr]
	public struct VkViewportWScalingNV
	{
		public float xcoeff;
		public float ycoeff;
	}

	[CRepr]
	public struct VkPipelineViewportWScalingStateCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 viewportWScalingEnable;
		public uint32 viewportCount;
		public VkViewportWScalingNV* pViewportWScalings;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetViewportWScalingNV(VkCommandBuffer, uint32, uint32, VkViewportWScalingNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkViewportWScalingNV* pViewportWScalings);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkReleaseDisplayEXT(VkPhysicalDevice, VkDisplayKHR);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display);

	[CRepr, AllowDuplicates]
	public enum VkSurfaceCounterFlagBitsEXT : c_int
	{
		VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1,
		VK_SURFACE_COUNTER_VBLANK_EXT = 1,
		VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkSurfaceCounterFlagsEXT = VkSurfaceCounterFlagBitsEXT;

	[CRepr]
	public struct VkSurfaceCapabilities2EXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 minImageCount;
		public uint32 maxImageCount;
		public VkExtent2D currentExtent;
		public VkExtent2D minImageExtent;
		public VkExtent2D maxImageExtent;
		public uint32 maxImageArrayLayers;
		public VkSurfaceTransformFlagsKHR supportedTransforms;
		public VkSurfaceTransformFlagBitsKHR currentTransform;
		public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
		public VkImageUsageFlags supportedUsageFlags;
		public VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilities2EXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out VkSurfaceCapabilities2EXT pSurfaceCapabilities);

	[CRepr, AllowDuplicates]
	public enum VkDisplayPowerStateEXT : c_int
	{
		VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
		VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
		VK_DISPLAY_POWER_STATE_ON_EXT = 2,
		VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkDeviceEventTypeEXT : c_int
	{
		VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
		VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkDisplayEventTypeEXT : c_int
	{
		VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
		VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr]
	public struct VkDisplayPowerInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDisplayPowerStateEXT powerState;
	}

	[CRepr]
	public struct VkDeviceEventInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceEventTypeEXT deviceEvent;
	}

	[CRepr]
	public struct VkDisplayEventInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDisplayEventTypeEXT displayEvent;
	}

	[CRepr]
	public struct VkSwapchainCounterCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceCounterFlagsEXT surfaceCounters;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkDisplayPowerControlEXT(VkDevice, VkDisplayKHR, VkDisplayPowerInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkRegisterDeviceEventEXT(VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VkFence*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkRegisterDisplayEventEXT(VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VkFence*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetSwapchainCounterEXT(VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, uint64*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, VkDisplayPowerInfoEXT* pDisplayPowerInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, out VkFence pFence);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, out VkFence pFence);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, out uint64 pCounterValue);

	[CRepr]
	public struct VkRefreshCycleDurationGOOGLE
	{
		public uint64 refreshDuration;
	}

	[CRepr]
	public struct VkPastPresentationTimingGOOGLE
	{
		public uint32 presentID;
		public uint64 desiredPresentTime;
		public uint64 actualPresentTime;
		public uint64 earliestPresentTime;
		public uint64 presentMargin;
	}

	[CRepr]
	public struct VkPresentTimeGOOGLE
	{
		public uint32 presentID;
		public uint64 desiredPresentTime;
	}

	[CRepr]
	public struct VkPresentTimesInfoGOOGLE
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 swapchainCount;
		public VkPresentTimeGOOGLE* pTimes;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetRefreshCycleDurationGOOGLE(VkDevice, VkSwapchainKHR, VkRefreshCycleDurationGOOGLE*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPastPresentationTimingGOOGLE(VkDevice, VkSwapchainKHR, uint32*, VkPastPresentationTimingGOOGLE*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, out VkRefreshCycleDurationGOOGLE pDisplayTimingProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, out uint32 pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings);

	[CRepr]
	public struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 perViewPositionAllComponents;
	}

	[CRepr]
	public struct VkMultiviewPerViewAttributesInfoNVX
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 perViewAttributes;
		public VkBool32 perViewAttributesPositionXOnly;
	}

	[CRepr, AllowDuplicates]
	public enum VkViewportCoordinateSwizzleNV : c_int
	{
		VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
		VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
		VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
		VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
		VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
		VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
		VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
		VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
		VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;

	[CRepr]
	public struct VkViewportSwizzleNV
	{
		public VkViewportCoordinateSwizzleNV x;
		public VkViewportCoordinateSwizzleNV y;
		public VkViewportCoordinateSwizzleNV z;
		public VkViewportCoordinateSwizzleNV w;
	}

	[CRepr]
	public struct VkPipelineViewportSwizzleStateCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineViewportSwizzleStateCreateFlagsNV flags;
		public uint32 viewportCount;
		public VkViewportSwizzleNV* pViewportSwizzles;
	}

	[CRepr, AllowDuplicates]
	public enum VkDiscardRectangleModeEXT : c_int
	{
		VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
		VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
		VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;

	[CRepr]
	public struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxDiscardRectangles;
	}

	[CRepr]
	public struct VkPipelineDiscardRectangleStateCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
		public VkDiscardRectangleModeEXT discardRectangleMode;
		public uint32 discardRectangleCount;
		public VkRect2D* pDiscardRectangles;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDiscardRectangleEXT(VkCommandBuffer, uint32, uint32, VkRect2D*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer, VkDiscardRectangleModeEXT);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32 firstDiscardRectangle, uint32 discardRectangleCount, VkRect2D* pDiscardRectangles);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode);

	[CRepr, AllowDuplicates]
	public enum VkConservativeRasterizationModeEXT : c_int
	{
		VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
		VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
		VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
		VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;

	[CRepr]
	public struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public float primitiveOverestimationSize;
		public float maxExtraPrimitiveOverestimationSize;
		public float extraPrimitiveOverestimationSizeGranularity;
		public VkBool32 primitiveUnderestimation;
		public VkBool32 conservativePointAndLineRasterization;
		public VkBool32 degenerateTrianglesRasterized;
		public VkBool32 degenerateLinesRasterized;
		public VkBool32 fullyCoveredFragmentShaderInputVariable;
		public VkBool32 conservativeRasterizationPostDepthCoverage;
	}

	[CRepr]
	public struct VkPipelineRasterizationConservativeStateCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
		public VkConservativeRasterizationModeEXT conservativeRasterizationMode;
		public float extraPrimitiveOverestimationSize;
	}

	public typealias VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;

	[CRepr]
	public struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 depthClipEnable;
	}

	[CRepr]
	public struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
		public VkBool32 depthClipEnable;
	}

	[CRepr]
	public struct VkXYColorEXT
	{
		public float x;
		public float y;
	}

	[CRepr]
	public struct VkHdrMetadataEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkXYColorEXT displayPrimaryRed;
		public VkXYColorEXT displayPrimaryGreen;
		public VkXYColorEXT displayPrimaryBlue;
		public VkXYColorEXT whitePoint;
		public float maxLuminance;
		public float minLuminance;
		public float maxContentLightLevel;
		public float maxFrameAverageLightLevel;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkSetHdrMetadataEXT(VkDevice, uint32, VkSwapchainKHR*, VkHdrMetadataEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkSetHdrMetadataEXT(VkDevice device, uint32 swapchainCount, VkSwapchainKHR* pSwapchains, VkHdrMetadataEXT* pMetadata);

	[CRepr]
	public struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 relaxedLineRasterization;
	}

	public struct VkDebugUtilsMessengerEXT_T;
	public typealias VkDebugUtilsMessengerEXT = VkDebugUtilsMessengerEXT_T*;

	public typealias VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;

	[CRepr, AllowDuplicates]
	public enum VkDebugUtilsMessageSeverityFlagBitsEXT : c_int
	{
		VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
		VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
		VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
		VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
		VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkDebugUtilsMessageTypeFlagBitsEXT : c_int
	{
		VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
		VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
		VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
		VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8,
		VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkDebugUtilsMessageTypeFlagsEXT = VkDebugUtilsMessageTypeFlagBitsEXT;

	public typealias VkDebugUtilsMessageSeverityFlagsEXT = VkDebugUtilsMessageSeverityFlagBitsEXT;

	public typealias VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;

	[CRepr]
	public struct VkDebugUtilsLabelEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public c_char* pLabelName;
		public float[4] color;
	}

	[CRepr]
	public struct VkDebugUtilsObjectNameInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkObjectType objectType;
		public uint64 objectHandle;
		public c_char* pObjectName;
	}

	[CRepr]
	public struct VkDebugUtilsMessengerCallbackDataEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
		public c_char* pMessageIdName;
		public int32 messageIdNumber;
		public c_char* pMessage;
		public uint32 queueLabelCount;
		public VkDebugUtilsLabelEXT* pQueueLabels;
		public uint32 cmdBufLabelCount;
		public VkDebugUtilsLabelEXT* pCmdBufLabels;
		public uint32 objectCount;
		public VkDebugUtilsObjectNameInfoEXT* pObjects;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkBool32 PFN_vkDebugUtilsMessengerCallbackEXT(VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void*);

	[CRepr]
	public struct VkDebugUtilsMessengerCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDebugUtilsMessengerCreateFlagsEXT flags;
		public VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
		public VkDebugUtilsMessageTypeFlagsEXT messageType;
		public PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback;
		public void* pUserData;
	}

	[CRepr]
	public struct VkDebugUtilsObjectTagInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkObjectType objectType;
		public uint64 objectHandle;
		public uint64 tagName;
		public c_size tagSize;
		public void* pTag;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkSetDebugUtilsObjectNameEXT(VkDevice, VkDebugUtilsObjectNameInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkSetDebugUtilsObjectTagEXT(VkDevice, VkDebugUtilsObjectTagInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkQueueBeginDebugUtilsLabelEXT(VkQueue, VkDebugUtilsLabelEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkQueueEndDebugUtilsLabelEXT(VkQueue);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkQueueInsertDebugUtilsLabelEXT(VkQueue, VkDebugUtilsLabelEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer, VkDebugUtilsLabelEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer, VkDebugUtilsLabelEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateDebugUtilsMessengerEXT(VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VkDebugUtilsMessengerEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyDebugUtilsMessengerEXT(VkInstance, VkDebugUtilsMessengerEXT, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkSubmitDebugUtilsMessageEXT(VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, VkDebugUtilsObjectNameInfoEXT* pNameInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, VkDebugUtilsObjectTagInfoEXT* pTagInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkQueueEndDebugUtilsLabelEXT(VkQueue queue);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkDebugUtilsMessengerEXT pMessenger);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);

	public typealias VkSamplerReductionModeEXT = VkSamplerReductionMode;

	public typealias VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;

	public typealias VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties;

	[CRepr]
	public struct VkAttachmentSampleCountInfoAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 colorAttachmentCount;
		public VkSampleCountFlagBits* pColorAttachmentSamples;
		public VkSampleCountFlagBits depthStencilAttachmentSamples;
	}

	public typealias VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;

	public typealias VkPhysicalDeviceInlineUniformBlockPropertiesEXT = VkPhysicalDeviceInlineUniformBlockProperties;

	public typealias VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;

	public typealias VkDescriptorPoolInlineUniformBlockCreateInfoEXT = VkDescriptorPoolInlineUniformBlockCreateInfo;

	[CRepr]
	public struct VkSampleLocationEXT
	{
		public float x;
		public float y;
	}

	[CRepr]
	public struct VkSampleLocationsInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSampleCountFlagBits sampleLocationsPerPixel;
		public VkExtent2D sampleLocationGridSize;
		public uint32 sampleLocationsCount;
		public VkSampleLocationEXT* pSampleLocations;
	}

	[CRepr]
	public struct VkAttachmentSampleLocationsEXT
	{
		public uint32 attachmentIndex;
		public VkSampleLocationsInfoEXT sampleLocationsInfo;
	}

	[CRepr]
	public struct VkSubpassSampleLocationsEXT
	{
		public uint32 subpassIndex;
		public VkSampleLocationsInfoEXT sampleLocationsInfo;
	}

	[CRepr]
	public struct VkRenderPassSampleLocationsBeginInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 attachmentInitialSampleLocationsCount;
		public VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations;
		public uint32 postSubpassSampleLocationsCount;
		public VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations;
	}

	[CRepr]
	public struct VkPipelineSampleLocationsStateCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 sampleLocationsEnable;
		public VkSampleLocationsInfoEXT sampleLocationsInfo;
	}

	[CRepr]
	public struct VkPhysicalDeviceSampleLocationsPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSampleCountFlags sampleLocationSampleCounts;
		public VkExtent2D maxSampleLocationGridSize;
		public float[2] sampleLocationCoordinateRange;
		public uint32 sampleLocationSubPixelBits;
		public VkBool32 variableSampleLocations;
	}

	[CRepr]
	public struct VkMultisamplePropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D maxSampleLocationGridSize;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetSampleLocationsEXT(VkCommandBuffer, VkSampleLocationsInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice, VkSampleCountFlagBits, VkMultisamplePropertiesEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT* pSampleLocationsInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, out VkMultisamplePropertiesEXT pMultisampleProperties);

	[CRepr, AllowDuplicates]
	public enum VkBlendOverlapEXT : c_int
	{
		VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
		VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
		VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
		VK_BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 advancedBlendCoherentOperations;
	}

	[CRepr]
	public struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 advancedBlendMaxColorAttachments;
		public VkBool32 advancedBlendIndependentBlend;
		public VkBool32 advancedBlendNonPremultipliedSrcColor;
		public VkBool32 advancedBlendNonPremultipliedDstColor;
		public VkBool32 advancedBlendCorrelatedOverlap;
		public VkBool32 advancedBlendAllOperations;
	}

	[CRepr]
	public struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 srcPremultiplied;
		public VkBool32 dstPremultiplied;
		public VkBlendOverlapEXT blendOverlap;
	}

	public typealias VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;

	[CRepr]
	public struct VkPipelineCoverageToColorStateCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCoverageToColorStateCreateFlagsNV flags;
		public VkBool32 coverageToColorEnable;
		public uint32 coverageToColorLocation;
	}

	[CRepr, AllowDuplicates]
	public enum VkCoverageModulationModeNV : c_int
	{
		VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
		VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
		VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
		VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
		VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;

	[CRepr]
	public struct VkPipelineCoverageModulationStateCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCoverageModulationStateCreateFlagsNV flags;
		public VkCoverageModulationModeNV coverageModulationMode;
		public VkBool32 coverageModulationTableEnable;
		public uint32 coverageModulationTableCount;
		public float* pCoverageModulationTable;
	}

	public typealias VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD;

	[CRepr]
	public struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 shaderSMCount;
		public uint32 shaderWarpsPerSM;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderSMBuiltins;
	}

	[CRepr]
	public struct VkDrmFormatModifierPropertiesEXT
	{
		public uint64 drmFormatModifier;
		public uint32 drmFormatModifierPlaneCount;
		public VkFormatFeatureFlags drmFormatModifierTilingFeatures;
	}

	[CRepr]
	public struct VkDrmFormatModifierPropertiesListEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 drmFormatModifierCount;
		public VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties;
	}

	[CRepr]
	public struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 drmFormatModifier;
		public VkSharingMode sharingMode;
		public uint32 queueFamilyIndexCount;
		public uint32* pQueueFamilyIndices;
	}

	[CRepr]
	public struct VkImageDrmFormatModifierListCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 drmFormatModifierCount;
		public uint64* pDrmFormatModifiers;
	}

	[CRepr]
	public struct VkImageDrmFormatModifierExplicitCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 drmFormatModifier;
		public uint32 drmFormatModifierPlaneCount;
		public VkSubresourceLayout* pPlaneLayouts;
	}

	[CRepr]
	public struct VkImageDrmFormatModifierPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 drmFormatModifier;
	}

	[CRepr]
	public struct VkDrmFormatModifierProperties2EXT
	{
		public uint64 drmFormatModifier;
		public uint32 drmFormatModifierPlaneCount;
		public VkFormatFeatureFlags2 drmFormatModifierTilingFeatures;
	}

	[CRepr]
	public struct VkDrmFormatModifierPropertiesList2EXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 drmFormatModifierCount;
		public VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetImageDrmFormatModifierPropertiesEXT(VkDevice, VkImage, VkImageDrmFormatModifierPropertiesEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, out VkImageDrmFormatModifierPropertiesEXT pProperties);

	public struct VkValidationCacheEXT_T;
	public typealias VkValidationCacheEXT = VkValidationCacheEXT_T*;

	[CRepr, AllowDuplicates]
	public enum VkValidationCacheHeaderVersionEXT : c_int
	{
		VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
		VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkValidationCacheCreateFlagsEXT = VkFlags;

	[CRepr]
	public struct VkValidationCacheCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkValidationCacheCreateFlagsEXT flags;
		public c_size initialDataSize;
		public void* pInitialData;
	}

	[CRepr]
	public struct VkShaderModuleValidationCacheCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkValidationCacheEXT validationCache;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateValidationCacheEXT(VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VkValidationCacheEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyValidationCacheEXT(VkDevice, VkValidationCacheEXT, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkMergeValidationCachesEXT(VkDevice, VkValidationCacheEXT, uint32, VkValidationCacheEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetValidationCacheDataEXT(VkDevice, VkValidationCacheEXT, c_size*, void*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkValidationCacheEXT pValidationCache);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32 srcCacheCount, VkValidationCacheEXT* pSrcCaches);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, out c_size pDataSize, void* pData);

	public typealias VkDescriptorBindingFlagBitsEXT = VkDescriptorBindingFlagBits;

	public typealias VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;

	public typealias VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo;

	public typealias VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;

	public typealias VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties;

	public typealias VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo;

	public typealias VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport;

	[CRepr, AllowDuplicates]
	public enum VkShadingRatePaletteEntryNV : c_int
	{
		VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
		VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
		VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
		VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
		VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
		VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
		VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
		VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
		VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
		VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
		VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
		VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
		VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkCoarseSampleOrderTypeNV : c_int
	{
		VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
		VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
		VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
		VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
		VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647,
	}

	[CRepr]
	public struct VkShadingRatePaletteNV
	{
		public uint32 shadingRatePaletteEntryCount;
		public VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries;
	}

	[CRepr]
	public struct VkPipelineViewportShadingRateImageStateCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shadingRateImageEnable;
		public uint32 viewportCount;
		public VkShadingRatePaletteNV* pShadingRatePalettes;
	}

	[CRepr]
	public struct VkPhysicalDeviceShadingRateImageFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shadingRateImage;
		public VkBool32 shadingRateCoarseSampleOrder;
	}

	[CRepr]
	public struct VkPhysicalDeviceShadingRateImagePropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D shadingRateTexelSize;
		public uint32 shadingRatePaletteSize;
		public uint32 shadingRateMaxCoarseSamples;
	}

	[CRepr]
	public struct VkCoarseSampleLocationNV
	{
		public uint32 pixelX;
		public uint32 pixelY;
		public uint32 sample;
	}

	[CRepr]
	public struct VkCoarseSampleOrderCustomNV
	{
		public VkShadingRatePaletteEntryNV shadingRate;
		public uint32 sampleCount;
		public uint32 sampleLocationCount;
		public VkCoarseSampleLocationNV* pSampleLocations;
	}

	[CRepr]
	public struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCoarseSampleOrderTypeNV sampleOrderType;
		public uint32 customSampleOrderCount;
		public VkCoarseSampleOrderCustomNV* pCustomSampleOrders;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindShadingRateImageNV(VkCommandBuffer, VkImageView, VkImageLayout);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer, uint32, uint32, VkShadingRatePaletteNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetCoarseSampleOrderNV(VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint32, VkCoarseSampleOrderCustomNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32 customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders);

	public struct VkAccelerationStructureNV_T;
	public typealias VkAccelerationStructureNV = VkAccelerationStructureNV_T*;

	[CRepr, AllowDuplicates]
	public enum VkRayTracingShaderGroupTypeKHR : c_int
	{
		VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
		VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
		VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
		VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0,
		VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1,
		VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2,
		VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR;

	[CRepr, AllowDuplicates]
	public enum VkGeometryTypeKHR : c_int
	{
		VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
		VK_GEOMETRY_TYPE_AABBS_KHR = 1,
		VK_GEOMETRY_TYPE_INSTANCES_KHR = 2,
		VK_GEOMETRY_TYPE_TRIANGLES_NV = 0,
		VK_GEOMETRY_TYPE_AABBS_NV = 1,
		VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkGeometryTypeNV = VkGeometryTypeKHR;

	[CRepr, AllowDuplicates]
	public enum VkAccelerationStructureTypeKHR : c_int
	{
		VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
		VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
		VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2,
		VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0,
		VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1,
		VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR;

	[CRepr, AllowDuplicates]
	public enum VkCopyAccelerationStructureModeKHR : c_int
	{
		VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
		VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
		VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
		VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
		VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0,
		VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1,
		VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR;

	[CRepr, AllowDuplicates]
	public enum VkAccelerationStructureMemoryRequirementsTypeNV : c_int
	{
		VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
		VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
		VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
		VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkGeometryFlagBitsKHR : c_int
	{
		VK_GEOMETRY_OPAQUE_BIT_KHR = 1,
		VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2,
		VK_GEOMETRY_OPAQUE_BIT_NV = 1,
		VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2,
		VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkGeometryFlagsKHR = VkGeometryFlagBitsKHR;

	public typealias VkGeometryFlagsNV = VkGeometryFlagsKHR;

	public typealias VkGeometryFlagBitsNV = VkGeometryFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkGeometryInstanceFlagBitsKHR : c_int
	{
		VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1,
		VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2,
		VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4,
		VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8,
		VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16,
		VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32,
		VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2,
		VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1,
		VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2,
		VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4,
		VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8,
		VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkGeometryInstanceFlagsKHR = VkGeometryInstanceFlagBitsKHR;

	public typealias VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;

	public typealias VkGeometryInstanceFlagBitsNV = VkGeometryInstanceFlagBitsKHR;

	[CRepr, AllowDuplicates]
	public enum VkBuildAccelerationStructureFlagBitsKHR : c_int
	{
		VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1,
		VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2,
		VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4,
		VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8,
		VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16,
		VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32,
		VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64,
		VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128,
		VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256,
		VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = 2048,
		VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1,
		VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2,
		VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4,
		VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8,
		VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16,
		VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkBuildAccelerationStructureFlagsKHR = VkBuildAccelerationStructureFlagBitsKHR;

	public typealias VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;

	public typealias VkBuildAccelerationStructureFlagBitsNV = VkBuildAccelerationStructureFlagBitsKHR;

	[CRepr]
	public struct VkRayTracingShaderGroupCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRayTracingShaderGroupTypeKHR type;
		public uint32 generalShader;
		public uint32 closestHitShader;
		public uint32 anyHitShader;
		public uint32 intersectionShader;
	}

	[CRepr]
	public struct VkRayTracingPipelineCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCreateFlags flags;
		public uint32 stageCount;
		public VkPipelineShaderStageCreateInfo* pStages;
		public uint32 groupCount;
		public VkRayTracingShaderGroupCreateInfoNV* pGroups;
		public uint32 maxRecursionDepth;
		public VkPipelineLayout layout;
		public VkPipeline basePipelineHandle;
		public int32 basePipelineIndex;
	}

	[CRepr]
	public struct VkGeometryTrianglesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBuffer vertexData;
		public VkDeviceSize vertexOffset;
		public uint32 vertexCount;
		public VkDeviceSize vertexStride;
		public VkFormat vertexFormat;
		public VkBuffer indexData;
		public VkDeviceSize indexOffset;
		public uint32 indexCount;
		public VkIndexType indexType;
		public VkBuffer transformData;
		public VkDeviceSize transformOffset;
	}

	[CRepr]
	public struct VkGeometryAABBNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBuffer aabbData;
		public uint32 numAABBs;
		public uint32 stride;
		public VkDeviceSize offset;
	}

	[CRepr]
	public struct VkGeometryDataNV
	{
		public VkGeometryTrianglesNV triangles;
		public VkGeometryAABBNV aabbs;
	}

	[CRepr]
	public struct VkGeometryNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkGeometryTypeKHR geometryType;
		public VkGeometryDataNV geometry;
		public VkGeometryFlagsKHR flags;
	}

	[CRepr]
	public struct VkAccelerationStructureInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureTypeNV type;
		public VkBuildAccelerationStructureFlagsNV flags;
		public uint32 instanceCount;
		public uint32 geometryCount;
		public VkGeometryNV* pGeometries;
	}

	[CRepr]
	public struct VkAccelerationStructureCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize compactedSize;
		public VkAccelerationStructureInfoNV info;
	}

	[CRepr]
	public struct VkBindAccelerationStructureMemoryInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureNV accelerationStructure;
		public VkDeviceMemory memory;
		public VkDeviceSize memoryOffset;
		public uint32 deviceIndexCount;
		public uint32* pDeviceIndices;
	}

	[CRepr]
	public struct VkWriteDescriptorSetAccelerationStructureNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 accelerationStructureCount;
		public VkAccelerationStructureNV* pAccelerationStructures;
	}

	[CRepr]
	public struct VkAccelerationStructureMemoryRequirementsInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureMemoryRequirementsTypeNV type;
		public VkAccelerationStructureNV accelerationStructure;
	}

	[CRepr]
	public struct VkPhysicalDeviceRayTracingPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 shaderGroupHandleSize;
		public uint32 maxRecursionDepth;
		public uint32 maxShaderGroupStride;
		public uint32 shaderGroupBaseAlignment;
		public uint64 maxGeometryCount;
		public uint64 maxInstanceCount;
		public uint64 maxTriangleCount;
		public uint32 maxDescriptorSetAccelerationStructures;
	}

	[CRepr]
	public struct VkTransformMatrixKHR
	{
		public float[4][3] matrix;
	}

	public typealias VkTransformMatrixNV = VkTransformMatrixKHR;

	[CRepr]
	public struct VkAabbPositionsKHR
	{
		public float minX;
		public float minY;
		public float minZ;
		public float maxX;
		public float maxY;
		public float maxZ;
	}

	public typealias VkAabbPositionsNV = VkAabbPositionsKHR;

	[CRepr]
	public struct VkAccelerationStructureInstanceKHR
	{
		public VkTransformMatrixKHR transform;
		public uint32 instanceCustomIndex;
		public uint32 mask;
		public uint32 instanceShaderBindingTableRecordOffset;
		public VkGeometryInstanceFlagsKHR flags;
		public uint64 accelerationStructureReference;
	}

	public typealias VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateAccelerationStructureNV(VkDevice, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VkAccelerationStructureNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyAccelerationStructureNV(VkDevice, VkAccelerationStructureNV, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetAccelerationStructureMemoryRequirementsNV(VkDevice, VkAccelerationStructureMemoryRequirementsInfoNV*, VkMemoryRequirements2KHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBindAccelerationStructureMemoryNV(VkDevice, uint32, VkBindAccelerationStructureMemoryInfoNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBuildAccelerationStructureNV(VkCommandBuffer, VkAccelerationStructureInfoNV*, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyAccelerationStructureNV(VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdTraceRaysNV(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint32, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateRayTracingPipelinesNV(VkDevice, VkPipelineCache, uint32, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VkPipeline*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetRayTracingShaderGroupHandlesKHR(VkDevice, VkPipeline, uint32, uint32, c_size, void*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetRayTracingShaderGroupHandlesNV(VkDevice, VkPipeline, uint32, uint32, c_size, void*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetAccelerationStructureHandleNV(VkDevice, VkAccelerationStructureNV, c_size, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer, uint32, VkAccelerationStructureNV*, VkQueryType, VkQueryPool, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCompileDeferredNV(VkDevice, VkPipeline, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkAccelerationStructureNV pAccelerationStructure);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, out VkMemoryRequirements2KHR pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint32 bindInfoCount, VkBindAccelerationStructureMemoryInfoNV* pBindInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32 width, uint32 height, uint32 depth);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkRayTracingPipelineCreateInfoNV* pCreateInfos, VkAllocationCallbacks* pAllocator, out VkPipeline pPipelines);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32 firstGroup, uint32 groupCount, c_size dataSize, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32 firstGroup, uint32 groupCount, c_size dataSize, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, c_size dataSize, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32 accelerationStructureCount, VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32 firstQuery);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32 shader);

	[CRepr]
	public struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 representativeFragmentTest;
	}

	[CRepr]
	public struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 representativeFragmentTestEnable;
	}

	[CRepr]
	public struct VkPhysicalDeviceImageViewImageFormatInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageViewType imageViewType;
	}

	[CRepr]
	public struct VkFilterCubicImageViewImageFormatPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 filterCubic;
		public VkBool32 filterCubicMinmax;
	}

	public typealias VkQueueGlobalPriorityEXT = VkQueueGlobalPriority;

	public typealias VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfo;

	[CRepr]
	public struct VkImportMemoryHostPointerInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExternalMemoryHandleTypeFlagBits handleType;
		public void* pHostPointer;
	}

	[CRepr]
	public struct VkMemoryHostPointerPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 memoryTypeBits;
	}

	[CRepr]
	public struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize minImportedHostPointerAlignment;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetMemoryHostPointerPropertiesEXT(VkDevice, VkExternalMemoryHandleTypeFlagBits, void*, VkMemoryHostPointerPropertiesEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, out VkMemoryHostPointerPropertiesEXT pMemoryHostPointerProperties);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWriteBufferMarkerAMD(VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWriteBufferMarker2AMD(VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32 marker);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32 marker);

	[CRepr, AllowDuplicates]
	public enum VkPipelineCompilerControlFlagBitsAMD : c_int
	{
		VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 2147483647,
	}

	public typealias VkPipelineCompilerControlFlagsAMD = VkPipelineCompilerControlFlagBitsAMD;

	[CRepr]
	public struct VkPipelineCompilerControlCreateInfoAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCompilerControlFlagsAMD compilerControlFlags;
	}

	public typealias VkTimeDomainEXT = VkTimeDomainKHR;

	public typealias VkCalibratedTimestampInfoEXT = VkCalibratedTimestampInfoKHR;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice, uint32*, VkTimeDomainKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetCalibratedTimestampsEXT(VkDevice, uint32, VkCalibratedTimestampInfoKHR*, uint64*, uint64*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, out uint32 pTimeDomainCount, VkTimeDomainKHR* pTimeDomains);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint32 timestampCount, VkCalibratedTimestampInfoKHR* pTimestampInfos, out uint64 pTimestamps, out uint64 pMaxDeviation);

	[CRepr]
	public struct VkPhysicalDeviceShaderCorePropertiesAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 shaderEngineCount;
		public uint32 shaderArraysPerEngineCount;
		public uint32 computeUnitsPerShaderArray;
		public uint32 simdPerComputeUnit;
		public uint32 wavefrontsPerSimd;
		public uint32 wavefrontSize;
		public uint32 sgprsPerSimd;
		public uint32 minSgprAllocation;
		public uint32 maxSgprAllocation;
		public uint32 sgprAllocationGranularity;
		public uint32 vgprsPerSimd;
		public uint32 minVgprAllocation;
		public uint32 maxVgprAllocation;
		public uint32 vgprAllocationGranularity;
	}

	[CRepr, AllowDuplicates]
	public enum VkMemoryOverallocationBehaviorAMD : c_int
	{
		VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
		VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
		VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
		VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647,
	}

	[CRepr]
	public struct VkDeviceMemoryOverallocationCreateInfoAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkMemoryOverallocationBehaviorAMD overallocationBehavior;
	}

	[CRepr]
	public struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxVertexAttribDivisor;
	}

	public typealias VkVertexInputBindingDivisorDescriptionEXT = VkVertexInputBindingDivisorDescription;

	public typealias VkPipelineVertexInputDivisorStateCreateInfoEXT = VkPipelineVertexInputDivisorStateCreateInfo;

	public typealias VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = VkPhysicalDeviceVertexAttributeDivisorFeatures;

	public typealias VkPipelineCreationFeedbackFlagBitsEXT = VkPipelineCreationFeedbackFlagBits;

	public typealias VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags;

	public typealias VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;

	public typealias VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;

	public typealias VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR;

	[CRepr]
	public struct VkPhysicalDeviceMeshShaderFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 taskShader;
		public VkBool32 meshShader;
	}

	[CRepr]
	public struct VkPhysicalDeviceMeshShaderPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxDrawMeshTasksCount;
		public uint32 maxTaskWorkGroupInvocations;
		public uint32[3] maxTaskWorkGroupSize;
		public uint32 maxTaskTotalMemorySize;
		public uint32 maxTaskOutputCount;
		public uint32 maxMeshWorkGroupInvocations;
		public uint32[3] maxMeshWorkGroupSize;
		public uint32 maxMeshTotalMemorySize;
		public uint32 maxMeshOutputVertices;
		public uint32 maxMeshOutputPrimitives;
		public uint32 maxMeshMultiviewViewCount;
		public uint32 meshOutputPerVertexGranularity;
		public uint32 meshOutputPerPrimitiveGranularity;
	}

	[CRepr]
	public struct VkDrawMeshTasksIndirectCommandNV
	{
		public uint32 taskCount;
		public uint32 firstTask;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawMeshTasksNV(VkCommandBuffer, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32 taskCount, uint32 firstTask);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride);

	public typealias VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;

	[CRepr]
	public struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 imageFootprint;
	}

	[CRepr]
	public struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 exclusiveScissorCount;
		public VkRect2D* pExclusiveScissors;
	}

	[CRepr]
	public struct VkPhysicalDeviceExclusiveScissorFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 exclusiveScissor;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer, uint32, uint32, VkBool32*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetExclusiveScissorNV(VkCommandBuffer, uint32, uint32, VkRect2D*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32 firstExclusiveScissor, uint32 exclusiveScissorCount, VkBool32* pExclusiveScissorEnables);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32 firstExclusiveScissor, uint32 exclusiveScissorCount, VkRect2D* pExclusiveScissors);

	[CRepr]
	public struct VkQueueFamilyCheckpointPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineStageFlags checkpointExecutionStageMask;
	}

	[CRepr]
	public struct VkCheckpointDataNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineStageFlagBits stage;
		public void* pCheckpointMarker;
	}

	[CRepr]
	public struct VkQueueFamilyCheckpointProperties2NV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineStageFlags2 checkpointExecutionStageMask;
	}

	[CRepr]
	public struct VkCheckpointData2NV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineStageFlags2 stage;
		public void* pCheckpointMarker;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetCheckpointNV(VkCommandBuffer, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetQueueCheckpointDataNV(VkQueue, uint32*, VkCheckpointDataNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetQueueCheckpointData2NV(VkQueue, uint32*, VkCheckpointData2NV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, void* pCheckpointMarker);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetQueueCheckpointDataNV(VkQueue queue, out uint32 pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetQueueCheckpointData2NV(VkQueue queue, out uint32 pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData);

	[CRepr]
	public struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderIntegerFunctions2;
	}

	public struct VkPerformanceConfigurationINTEL_T;
	public typealias VkPerformanceConfigurationINTEL = VkPerformanceConfigurationINTEL_T*;

	[CRepr, AllowDuplicates]
	public enum VkPerformanceConfigurationTypeINTEL : c_int
	{
		VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
		VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkQueryPoolSamplingModeINTEL : c_int
	{
		VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
		VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPerformanceOverrideTypeINTEL : c_int
	{
		VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
		VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
		VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPerformanceParameterTypeINTEL : c_int
	{
		VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
		VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
		VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkPerformanceValueTypeINTEL : c_int
	{
		VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
		VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
		VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
		VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
		VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
		VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647,
	}

	[CRepr, Union]
	public struct VkPerformanceValueDataINTEL
	{
		public uint32 value32;
		public uint64 value64;
		public float valueFloat;
		public VkBool32 valueBool;
		public c_char* valueString;
	}

	[CRepr]
	public struct VkPerformanceValueINTEL
	{
		public VkPerformanceValueTypeINTEL type;
		public VkPerformanceValueDataINTEL data;
	}

	[CRepr]
	public struct VkInitializePerformanceApiInfoINTEL
	{
		public VkStructureType sType;
		public void* pNext;
		public void* pUserData;
	}

	[CRepr]
	public struct VkQueryPoolPerformanceQueryCreateInfoINTEL
	{
		public VkStructureType sType;
		public void* pNext;
		public VkQueryPoolSamplingModeINTEL performanceCountersSampling;
	}

	public typealias VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;

	[CRepr]
	public struct VkPerformanceMarkerInfoINTEL
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 marker;
	}

	[CRepr]
	public struct VkPerformanceStreamMarkerInfoINTEL
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 marker;
	}

	[CRepr]
	public struct VkPerformanceOverrideInfoINTEL
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPerformanceOverrideTypeINTEL type;
		public VkBool32 enable;
		public uint64 parameter;
	}

	[CRepr]
	public struct VkPerformanceConfigurationAcquireInfoINTEL
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPerformanceConfigurationTypeINTEL type;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkInitializePerformanceApiINTEL(VkDevice, VkInitializePerformanceApiInfoINTEL*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkUninitializePerformanceApiINTEL(VkDevice);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer, VkPerformanceMarkerInfoINTEL*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer, VkPerformanceStreamMarkerInfoINTEL*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer, VkPerformanceOverrideInfoINTEL*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkAcquirePerformanceConfigurationINTEL(VkDevice, VkPerformanceConfigurationAcquireInfoINTEL*, VkPerformanceConfigurationINTEL*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkReleasePerformanceConfigurationINTEL(VkDevice, VkPerformanceConfigurationINTEL);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkQueueSetPerformanceConfigurationINTEL(VkQueue, VkPerformanceConfigurationINTEL);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPerformanceParameterINTEL(VkDevice, VkPerformanceParameterTypeINTEL, VkPerformanceValueINTEL*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkInitializePerformanceApiINTEL(VkDevice device, VkInitializePerformanceApiInfoINTEL* pInitializeInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkUninitializePerformanceApiINTEL(VkDevice device);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceMarkerInfoINTEL* pMarkerInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, VkPerformanceOverrideInfoINTEL* pOverrideInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, out VkPerformanceConfigurationINTEL pConfiguration);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, out VkPerformanceValueINTEL pValue);

	[CRepr]
	public struct VkPhysicalDevicePCIBusInfoPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 pciDomain;
		public uint32 pciBus;
		public uint32 pciDevice;
		public uint32 pciFunction;
	}

	[CRepr]
	public struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 localDimmingSupport;
	}

	[CRepr]
	public struct VkSwapchainDisplayNativeHdrCreateInfoAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 localDimmingEnable;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkSetLocalDimmingAMD(VkDevice, VkSwapchainKHR, VkBool32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable);

	[CRepr]
	public struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 fragmentDensityMap;
		public VkBool32 fragmentDensityMapDynamic;
		public VkBool32 fragmentDensityMapNonSubsampledImages;
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D minFragmentDensityTexelSize;
		public VkExtent2D maxFragmentDensityTexelSize;
		public VkBool32 fragmentDensityInvocations;
	}

	[CRepr]
	public struct VkRenderPassFragmentDensityMapCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAttachmentReference fragmentDensityMapAttachment;
	}

	[CRepr]
	public struct VkRenderingFragmentDensityMapAttachmentInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageView imageView;
		public VkImageLayout imageLayout;
	}

	public typealias VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;

	public typealias VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = VkPhysicalDeviceSubgroupSizeControlFeatures;

	public typealias VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = VkPhysicalDeviceSubgroupSizeControlProperties;

	public typealias VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;

	[CRepr, AllowDuplicates]
	public enum VkShaderCorePropertiesFlagBitsAMD : c_int
	{
		VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 2147483647,
	}

	public typealias VkShaderCorePropertiesFlagsAMD = VkShaderCorePropertiesFlagBitsAMD;

	[CRepr]
	public struct VkPhysicalDeviceShaderCoreProperties2AMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
		public uint32 activeComputeUnitCount;
	}

	[CRepr]
	public struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 deviceCoherentMemory;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderImageInt64Atomics;
		public VkBool32 sparseImageInt64Atomics;
	}

	[CRepr]
	public struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize[16] heapBudget;
		public VkDeviceSize[16] heapUsage;
	}

	[CRepr]
	public struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 memoryPriority;
	}

	[CRepr]
	public struct VkMemoryPriorityAllocateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public float priority;
	}

	[CRepr]
	public struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 dedicatedAllocationImageAliasing;
	}

	[CRepr]
	public struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 bufferDeviceAddress;
		public VkBool32 bufferDeviceAddressCaptureReplay;
		public VkBool32 bufferDeviceAddressMultiDevice;
	}

	public typealias VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

	public typealias VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;

	[CRepr]
	public struct VkBufferDeviceAddressCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceAddress deviceAddress;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkDeviceAddress PFN_vkGetBufferDeviceAddressEXT(VkDevice, VkBufferDeviceAddressInfo*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkDeviceAddress vkGetBufferDeviceAddressEXT(VkDevice device, VkBufferDeviceAddressInfo* pInfo);

	public typealias VkToolPurposeFlagBitsEXT = VkToolPurposeFlagBits;

	public typealias VkToolPurposeFlagsEXT = VkToolPurposeFlags;

	public typealias VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice, uint32*, VkPhysicalDeviceToolProperties*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, out uint32 pToolCount, VkPhysicalDeviceToolProperties* pToolProperties);

	public typealias VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;

	[CRepr, AllowDuplicates]
	public enum VkValidationFeatureEnableEXT : c_int
	{
		VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
		VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
		VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
		VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
		VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
		VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkValidationFeatureDisableEXT : c_int
	{
		VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
		VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
		VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
		VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
		VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
		VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
		VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
		VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7,
		VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr]
	public struct VkValidationFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 enabledValidationFeatureCount;
		public VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
		public uint32 disabledValidationFeatureCount;
		public VkValidationFeatureDisableEXT* pDisabledValidationFeatures;
	}

	public typealias VkComponentTypeNV = VkComponentTypeKHR;

	public typealias VkScopeNV = VkScopeKHR;

	[CRepr]
	public struct VkCooperativeMatrixPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 MSize;
		public uint32 NSize;
		public uint32 KSize;
		public VkComponentTypeNV AType;
		public VkComponentTypeNV BType;
		public VkComponentTypeNV CType;
		public VkComponentTypeNV DType;
		public VkScopeNV @scope;
	}

	[CRepr]
	public struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 cooperativeMatrix;
		public VkBool32 cooperativeMatrixRobustBufferAccess;
	}

	[CRepr]
	public struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderStageFlags cooperativeMatrixSupportedStages;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice, uint32*, VkCooperativeMatrixPropertiesNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties);

	[CRepr, AllowDuplicates]
	public enum VkCoverageReductionModeNV : c_int
	{
		VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
		VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
		VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;

	[CRepr]
	public struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 coverageReductionMode;
	}

	[CRepr]
	public struct VkPipelineCoverageReductionStateCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCoverageReductionStateCreateFlagsNV flags;
		public VkCoverageReductionModeNV coverageReductionMode;
	}

	[CRepr]
	public struct VkFramebufferMixedSamplesCombinationNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCoverageReductionModeNV coverageReductionMode;
		public VkSampleCountFlagBits rasterizationSamples;
		public VkSampleCountFlags depthStencilSamples;
		public VkSampleCountFlags colorSamples;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice, uint32*, VkFramebufferMixedSamplesCombinationNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, out uint32 pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations);

	[CRepr]
	public struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 fragmentShaderSampleInterlock;
		public VkBool32 fragmentShaderPixelInterlock;
		public VkBool32 fragmentShaderShadingRateInterlock;
	}

	[CRepr]
	public struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 ycbcrImageArrays;
	}

	[CRepr, AllowDuplicates]
	public enum VkProvokingVertexModeEXT : c_int
	{
		VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0,
		VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1,
		VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceProvokingVertexFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 provokingVertexLast;
		public VkBool32 transformFeedbackPreservesProvokingVertex;
	}

	[CRepr]
	public struct VkPhysicalDeviceProvokingVertexPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 provokingVertexModePerPipeline;
		public VkBool32 transformFeedbackPreservesTriangleFanProvokingVertex;
	}

	[CRepr]
	public struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkProvokingVertexModeEXT provokingVertexMode;
	}

	public typealias VkHeadlessSurfaceCreateFlagsEXT = VkFlags;

	[CRepr]
	public struct VkHeadlessSurfaceCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkHeadlessSurfaceCreateFlagsEXT flags;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateHeadlessSurfaceEXT(VkInstance, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkSurfaceKHR pSurface);

	public typealias VkLineRasterizationModeEXT = VkLineRasterizationMode;

	public typealias VkPhysicalDeviceLineRasterizationFeaturesEXT = VkPhysicalDeviceLineRasterizationFeatures;

	public typealias VkPhysicalDeviceLineRasterizationPropertiesEXT = VkPhysicalDeviceLineRasterizationProperties;

	public typealias VkPipelineRasterizationLineStateCreateInfoEXT = VkPipelineRasterizationLineStateCreateInfo;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetLineStippleEXT(VkCommandBuffer, uint32, uint16);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32 lineStippleFactor, uint16 lineStipplePattern);

	[CRepr]
	public struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderBufferFloat32Atomics;
		public VkBool32 shaderBufferFloat32AtomicAdd;
		public VkBool32 shaderBufferFloat64Atomics;
		public VkBool32 shaderBufferFloat64AtomicAdd;
		public VkBool32 shaderSharedFloat32Atomics;
		public VkBool32 shaderSharedFloat32AtomicAdd;
		public VkBool32 shaderSharedFloat64Atomics;
		public VkBool32 shaderSharedFloat64AtomicAdd;
		public VkBool32 shaderImageFloat32Atomics;
		public VkBool32 shaderImageFloat32AtomicAdd;
		public VkBool32 sparseImageFloat32Atomics;
		public VkBool32 sparseImageFloat32AtomicAdd;
	}

	public typealias VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkResetQueryPoolEXT(VkDevice, VkQueryPool, uint32, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount);

	public typealias VkPhysicalDeviceIndexTypeUint8FeaturesEXT = VkPhysicalDeviceIndexTypeUint8Features;

	[CRepr]
	public struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 extendedDynamicState;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetCullModeEXT(VkCommandBuffer, VkCullModeFlags);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetFrontFaceEXT(VkCommandBuffer, VkFrontFace);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer, VkPrimitiveTopology);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetViewportWithCountEXT(VkCommandBuffer, uint32, VkViewport*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetScissorWithCountEXT(VkCommandBuffer, uint32, VkRect2D*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindVertexBuffers2EXT(VkCommandBuffer, uint32, uint32, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthTestEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthWriteEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthCompareOpEXT(VkCommandBuffer, VkCompareOp);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetStencilTestEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetStencilOpEXT(VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32 viewportCount, VkViewport* pViewports);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32 scissorCount, VkRect2D* pScissors);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);

	public typealias VkHostImageCopyFlagBitsEXT = VkHostImageCopyFlagBits;

	public typealias VkHostImageCopyFlagsEXT = VkHostImageCopyFlags;

	public typealias VkPhysicalDeviceHostImageCopyFeaturesEXT = VkPhysicalDeviceHostImageCopyFeatures;

	public typealias VkPhysicalDeviceHostImageCopyPropertiesEXT = VkPhysicalDeviceHostImageCopyProperties;

	public typealias VkMemoryToImageCopyEXT = VkMemoryToImageCopy;

	public typealias VkImageToMemoryCopyEXT = VkImageToMemoryCopy;

	public typealias VkCopyMemoryToImageInfoEXT = VkCopyMemoryToImageInfo;

	public typealias VkCopyImageToMemoryInfoEXT = VkCopyImageToMemoryInfo;

	public typealias VkCopyImageToImageInfoEXT = VkCopyImageToImageInfo;

	public typealias VkHostImageLayoutTransitionInfoEXT = VkHostImageLayoutTransitionInfo;

	public typealias VkSubresourceHostMemcpySizeEXT = VkSubresourceHostMemcpySize;

	public typealias VkHostImageCopyDevicePerformanceQueryEXT = VkHostImageCopyDevicePerformanceQuery;

	public typealias VkSubresourceLayout2EXT = VkSubresourceLayout2;

	public typealias VkImageSubresource2EXT = VkImageSubresource2;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyMemoryToImageEXT(VkDevice, VkCopyMemoryToImageInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyImageToMemoryEXT(VkDevice, VkCopyImageToMemoryInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyImageToImageEXT(VkDevice, VkCopyImageToImageInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkTransitionImageLayoutEXT(VkDevice, uint32, VkHostImageLayoutTransitionInfo*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetImageSubresourceLayout2EXT(VkDevice, VkImage, VkImageSubresource2*, VkSubresourceLayout2*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyMemoryToImageEXT(VkDevice device, VkCopyMemoryToImageInfo* pCopyMemoryToImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyImageToMemoryEXT(VkDevice device, VkCopyImageToMemoryInfo* pCopyImageToMemoryInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyImageToImageEXT(VkDevice device, VkCopyImageToImageInfo* pCopyImageToImageInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkTransitionImageLayoutEXT(VkDevice device, uint32 transitionCount, VkHostImageLayoutTransitionInfo* pTransitions);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, out VkSubresourceLayout2 pLayout);

	[CRepr]
	public struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 memoryMapPlaced;
		public VkBool32 memoryMapRangePlaced;
		public VkBool32 memoryUnmapReserve;
	}

	[CRepr]
	public struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize minPlacedMemoryMapAlignment;
	}

	[CRepr]
	public struct VkMemoryMapPlacedInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public void* pPlacedAddress;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderBufferFloat16Atomics;
		public VkBool32 shaderBufferFloat16AtomicAdd;
		public VkBool32 shaderBufferFloat16AtomicMinMax;
		public VkBool32 shaderBufferFloat32AtomicMinMax;
		public VkBool32 shaderBufferFloat64AtomicMinMax;
		public VkBool32 shaderSharedFloat16Atomics;
		public VkBool32 shaderSharedFloat16AtomicAdd;
		public VkBool32 shaderSharedFloat16AtomicMinMax;
		public VkBool32 shaderSharedFloat32AtomicMinMax;
		public VkBool32 shaderSharedFloat64AtomicMinMax;
		public VkBool32 shaderImageFloat32AtomicMinMax;
		public VkBool32 sparseImageFloat32AtomicMinMax;
	}

	[CRepr, AllowDuplicates]
	public enum VkPresentScalingFlagBitsEXT : c_int
	{
		VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 1,
		VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 2,
		VK_PRESENT_SCALING_STRETCH_BIT_EXT = 4,
		VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkPresentScalingFlagsEXT = VkPresentScalingFlagBitsEXT;

	[CRepr, AllowDuplicates]
	public enum VkPresentGravityFlagBitsEXT : c_int
	{
		VK_PRESENT_GRAVITY_MIN_BIT_EXT = 1,
		VK_PRESENT_GRAVITY_MAX_BIT_EXT = 2,
		VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = 4,
		VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkPresentGravityFlagsEXT = VkPresentGravityFlagBitsEXT;

	[CRepr]
	public struct VkSurfacePresentModeEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPresentModeKHR presentMode;
	}

	[CRepr]
	public struct VkSurfacePresentScalingCapabilitiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPresentScalingFlagsEXT supportedPresentScaling;
		public VkPresentGravityFlagsEXT supportedPresentGravityX;
		public VkPresentGravityFlagsEXT supportedPresentGravityY;
		public VkExtent2D minScaledImageExtent;
		public VkExtent2D maxScaledImageExtent;
	}

	[CRepr]
	public struct VkSurfacePresentModeCompatibilityEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 presentModeCount;
		public VkPresentModeKHR* pPresentModes;
	}

	[CRepr]
	public struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 swapchainMaintenance1;
	}

	[CRepr]
	public struct VkSwapchainPresentFenceInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 swapchainCount;
		public VkFence* pFences;
	}

	[CRepr]
	public struct VkSwapchainPresentModesCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 presentModeCount;
		public VkPresentModeKHR* pPresentModes;
	}

	[CRepr]
	public struct VkSwapchainPresentModeInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 swapchainCount;
		public VkPresentModeKHR* pPresentModes;
	}

	[CRepr]
	public struct VkSwapchainPresentScalingCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPresentScalingFlagsEXT scalingBehavior;
		public VkPresentGravityFlagsEXT presentGravityX;
		public VkPresentGravityFlagsEXT presentGravityY;
	}

	[CRepr]
	public struct VkReleaseSwapchainImagesInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSwapchainKHR swapchain;
		public uint32 imageIndexCount;
		public uint32* pImageIndices;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkReleaseSwapchainImagesEXT(VkDevice, VkReleaseSwapchainImagesInfoEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkReleaseSwapchainImagesEXT(VkDevice device, VkReleaseSwapchainImagesInfoEXT* pReleaseInfo);

	public typealias VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;

	public struct VkIndirectCommandsLayoutNV_T;
	public typealias VkIndirectCommandsLayoutNV = VkIndirectCommandsLayoutNV_T*;

	[CRepr, AllowDuplicates]
	public enum VkIndirectCommandsTokenTypeNV : c_int
	{
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = 1000428003,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = 1000428004,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkIndirectStateFlagBitsNV : c_int
	{
		VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1,
		VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkIndirectStateFlagsNV = VkIndirectStateFlagBitsNV;

	[CRepr, AllowDuplicates]
	public enum VkIndirectCommandsLayoutUsageFlagBitsNV : c_int
	{
		VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1,
		VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2,
		VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4,
		VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkIndirectCommandsLayoutUsageFlagsNV = VkIndirectCommandsLayoutUsageFlagBitsNV;

	[CRepr]
	public struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxGraphicsShaderGroupCount;
		public uint32 maxIndirectSequenceCount;
		public uint32 maxIndirectCommandsTokenCount;
		public uint32 maxIndirectCommandsStreamCount;
		public uint32 maxIndirectCommandsTokenOffset;
		public uint32 maxIndirectCommandsStreamStride;
		public uint32 minSequencesCountBufferOffsetAlignment;
		public uint32 minSequencesIndexBufferOffsetAlignment;
		public uint32 minIndirectCommandsBufferOffsetAlignment;
	}

	[CRepr]
	public struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 deviceGeneratedCommands;
	}

	[CRepr]
	public struct VkGraphicsShaderGroupCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 stageCount;
		public VkPipelineShaderStageCreateInfo* pStages;
		public VkPipelineVertexInputStateCreateInfo* pVertexInputState;
		public VkPipelineTessellationStateCreateInfo* pTessellationState;
	}

	[CRepr]
	public struct VkGraphicsPipelineShaderGroupsCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 groupCount;
		public VkGraphicsShaderGroupCreateInfoNV* pGroups;
		public uint32 pipelineCount;
		public VkPipeline* pPipelines;
	}

	[CRepr]
	public struct VkBindShaderGroupIndirectCommandNV
	{
		public uint32 groupIndex;
	}

	[CRepr]
	public struct VkBindIndexBufferIndirectCommandNV
	{
		public VkDeviceAddress bufferAddress;
		public uint32 size;
		public VkIndexType indexType;
	}

	[CRepr]
	public struct VkBindVertexBufferIndirectCommandNV
	{
		public VkDeviceAddress bufferAddress;
		public uint32 size;
		public uint32 stride;
	}

	[CRepr]
	public struct VkSetStateFlagsIndirectCommandNV
	{
		public uint32 data;
	}

	[CRepr]
	public struct VkIndirectCommandsStreamNV
	{
		public VkBuffer buffer;
		public VkDeviceSize offset;
	}

	[CRepr]
	public struct VkIndirectCommandsLayoutTokenNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkIndirectCommandsTokenTypeNV tokenType;
		public uint32 stream;
		public uint32 offset;
		public uint32 vertexBindingUnit;
		public VkBool32 vertexDynamicStride;
		public VkPipelineLayout pushconstantPipelineLayout;
		public VkShaderStageFlags pushconstantShaderStageFlags;
		public uint32 pushconstantOffset;
		public uint32 pushconstantSize;
		public VkIndirectStateFlagsNV indirectStateFlags;
		public uint32 indexTypeCount;
		public VkIndexType* pIndexTypes;
		public uint32* pIndexTypeValues;
	}

	[CRepr]
	public struct VkIndirectCommandsLayoutCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkIndirectCommandsLayoutUsageFlagsNV flags;
		public VkPipelineBindPoint pipelineBindPoint;
		public uint32 tokenCount;
		public VkIndirectCommandsLayoutTokenNV* pTokens;
		public uint32 streamCount;
		public uint32* pStreamStrides;
	}

	[CRepr]
	public struct VkGeneratedCommandsInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineBindPoint pipelineBindPoint;
		public VkPipeline pipeline;
		public VkIndirectCommandsLayoutNV indirectCommandsLayout;
		public uint32 streamCount;
		public VkIndirectCommandsStreamNV* pStreams;
		public uint32 sequencesCount;
		public VkBuffer preprocessBuffer;
		public VkDeviceSize preprocessOffset;
		public VkDeviceSize preprocessSize;
		public VkBuffer sequencesCountBuffer;
		public VkDeviceSize sequencesCountOffset;
		public VkBuffer sequencesIndexBuffer;
		public VkDeviceSize sequencesIndexOffset;
	}

	[CRepr]
	public struct VkGeneratedCommandsMemoryRequirementsInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineBindPoint pipelineBindPoint;
		public VkPipeline pipeline;
		public VkIndirectCommandsLayoutNV indirectCommandsLayout;
		public uint32 maxSequencesCount;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice, VkGeneratedCommandsMemoryRequirementsInfoNV*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer, VkGeneratedCommandsInfoNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer, VkBool32, VkGeneratedCommandsInfoNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindPipelineShaderGroupNV(VkCommandBuffer, VkPipelineBindPoint, VkPipeline, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateIndirectCommandsLayoutNV(VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VkIndirectCommandsLayoutNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyIndirectCommandsLayoutNV(VkDevice, VkIndirectCommandsLayoutNV, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32 groupIndex);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkIndirectCommandsLayoutNV pIndirectCommandsLayout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, VkAllocationCallbacks* pAllocator);

	[CRepr]
	public struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 inheritedViewportScissor2D;
	}

	[CRepr]
	public struct VkCommandBufferInheritanceViewportScissorInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 viewportScissor2D;
		public uint32 viewportDepthCount;
		public VkViewport* pViewportDepths;
	}

	[CRepr]
	public struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 texelBufferAlignment;
	}

	public typealias VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = VkPhysicalDeviceTexelBufferAlignmentProperties;

	[CRepr]
	public struct VkRenderPassTransformBeginInfoQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceTransformFlagBitsKHR transform;
	}

	[CRepr]
	public struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceTransformFlagBitsKHR transform;
		public VkRect2D renderArea;
	}

	[CRepr, AllowDuplicates]
	public enum VkDepthBiasRepresentationEXT : c_int
	{
		VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = 0,
		VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = 1,
		VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = 2,
		VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceDepthBiasControlFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 depthBiasControl;
		public VkBool32 leastRepresentableValueForceUnormRepresentation;
		public VkBool32 floatRepresentation;
		public VkBool32 depthBiasExact;
	}

	[CRepr]
	public struct VkDepthBiasInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public float depthBiasConstantFactor;
		public float depthBiasClamp;
		public float depthBiasSlopeFactor;
	}

	[CRepr]
	public struct VkDepthBiasRepresentationInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDepthBiasRepresentationEXT depthBiasRepresentation;
		public VkBool32 depthBiasExact;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthBias2EXT(VkCommandBuffer, VkDepthBiasInfoEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, VkDepthBiasInfoEXT* pDepthBiasInfo);

	[CRepr, AllowDuplicates]
	public enum VkDeviceMemoryReportEventTypeEXT : c_int
	{
		VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,
		VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,
		VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,
		VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,
		VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4,
		VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkDeviceMemoryReportFlagsEXT = VkFlags;

	[CRepr]
	public struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 deviceMemoryReport;
	}

	[CRepr]
	public struct VkDeviceMemoryReportCallbackDataEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceMemoryReportFlagsEXT flags;
		public VkDeviceMemoryReportEventTypeEXT type;
		public uint64 memoryObjectId;
		public VkDeviceSize size;
		public VkObjectType objectType;
		public uint64 objectHandle;
		public uint32 heapIndex;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDeviceMemoryReportCallbackEXT(VkDeviceMemoryReportCallbackDataEXT*, void*);

	[CRepr]
	public struct VkDeviceDeviceMemoryReportCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceMemoryReportFlagsEXT flags;
		public PFN_vkDeviceMemoryReportCallbackEXT pfnUserCallback;
		public void* pUserData;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkAcquireDrmDisplayEXT(VkPhysicalDevice, int32, VkDisplayKHR);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDrmDisplayEXT(VkPhysicalDevice, int32, uint32, VkDisplayKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32 drmFd, VkDisplayKHR display);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32 drmFd, uint32 connectorId, out VkDisplayKHR display);

	[CRepr]
	public struct VkPhysicalDeviceRobustness2FeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 robustBufferAccess2;
		public VkBool32 robustImageAccess2;
		public VkBool32 nullDescriptor;
	}

	[CRepr]
	public struct VkPhysicalDeviceRobustness2PropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize robustStorageBufferAccessSizeAlignment;
		public VkDeviceSize robustUniformBufferAccessSizeAlignment;
	}

	[CRepr]
	public struct VkSamplerCustomBorderColorCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkClearColorValue customBorderColor;
		public VkFormat format;
	}

	[CRepr]
	public struct VkPhysicalDeviceCustomBorderColorPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxCustomBorderColorSamplers;
	}

	[CRepr]
	public struct VkPhysicalDeviceCustomBorderColorFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 customBorderColors;
		public VkBool32 customBorderColorWithoutFormat;
	}

	[CRepr]
	public struct VkPhysicalDevicePresentBarrierFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 presentBarrier;
	}

	[CRepr]
	public struct VkSurfaceCapabilitiesPresentBarrierNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 presentBarrierSupported;
	}

	[CRepr]
	public struct VkSwapchainPresentBarrierCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 presentBarrierEnable;
	}

	public typealias VkPrivateDataSlotEXT = VkPrivateDataSlot;

	public typealias VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags;

	public typealias VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;

	public typealias VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;

	public typealias VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreatePrivateDataSlotEXT(VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyPrivateDataSlotEXT(VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkSetPrivateDataEXT(VkDevice, VkObjectType, uint64, VkPrivateDataSlot, uint64);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPrivateDataEXT(VkDevice, VkObjectType, uint64, VkPrivateDataSlot, uint64*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreatePrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkPrivateDataSlot pPrivateDataSlot);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64 objectHandle, VkPrivateDataSlot privateDataSlot, uint64 data);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64 objectHandle, VkPrivateDataSlot privateDataSlot, out uint64 pData);

	public typealias VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = VkPhysicalDevicePipelineCreationCacheControlFeatures;

	[CRepr, AllowDuplicates]
	public enum VkDeviceDiagnosticsConfigFlagBitsNV : c_int
	{
		VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1,
		VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2,
		VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4,
		VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8,
		VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkDeviceDiagnosticsConfigFlagsNV = VkDeviceDiagnosticsConfigFlagBitsNV;

	[CRepr]
	public struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 diagnosticsConfig;
	}

	[CRepr]
	public struct VkDeviceDiagnosticsConfigCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceDiagnosticsConfigFlagsNV flags;
	}

	public struct VkCudaModuleNV_T;
	public typealias VkCudaModuleNV = VkCudaModuleNV_T*;

	public struct VkCudaFunctionNV_T;
	public typealias VkCudaFunctionNV = VkCudaFunctionNV_T*;

	[CRepr]
	public struct VkCudaModuleCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public c_size dataSize;
		public void* pData;
	}

	[CRepr]
	public struct VkCudaFunctionCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCudaModuleNV module;
		public c_char* pName;
	}

	[CRepr]
	public struct VkCudaLaunchInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCudaFunctionNV @function;
		public uint32 gridDimX;
		public uint32 gridDimY;
		public uint32 gridDimZ;
		public uint32 blockDimX;
		public uint32 blockDimY;
		public uint32 blockDimZ;
		public uint32 sharedMemBytes;
		public c_size paramCount;
		public void** pParams;
		public c_size extraCount;
		public void** pExtras;
	}

	[CRepr]
	public struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 cudaKernelLaunchFeatures;
	}

	[CRepr]
	public struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 computeCapabilityMinor;
		public uint32 computeCapabilityMajor;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateCudaModuleNV(VkDevice, VkCudaModuleCreateInfoNV*, VkAllocationCallbacks*, VkCudaModuleNV*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetCudaModuleCacheNV(VkDevice, VkCudaModuleNV, c_size*, void*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateCudaFunctionNV(VkDevice, VkCudaFunctionCreateInfoNV*, VkAllocationCallbacks*, VkCudaFunctionNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyCudaModuleNV(VkDevice, VkCudaModuleNV, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyCudaFunctionNV(VkDevice, VkCudaFunctionNV, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCudaLaunchKernelNV(VkCommandBuffer, VkCudaLaunchInfoNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateCudaModuleNV(VkDevice device, VkCudaModuleCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkCudaModuleNV pModule);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, out c_size pCacheSize, void* pCacheData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateCudaFunctionNV(VkDevice device, VkCudaFunctionCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkCudaFunctionNV pFunction);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV @function, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, VkCudaLaunchInfoNV* pLaunchInfo);

	[CRepr]
	public struct VkQueryLowLatencySupportNV
	{
		public VkStructureType sType;
		public void* pNext;
		public void* pQueriedLowLatencyData;
	}

	public struct VkAccelerationStructureKHR_T;
	public typealias VkAccelerationStructureKHR = VkAccelerationStructureKHR_T*;

	[CRepr]
	public struct VkPhysicalDeviceDescriptorBufferPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 combinedImageSamplerDescriptorSingleArray;
		public VkBool32 bufferlessPushDescriptors;
		public VkBool32 allowSamplerImageViewPostSubmitCreation;
		public VkDeviceSize descriptorBufferOffsetAlignment;
		public uint32 maxDescriptorBufferBindings;
		public uint32 maxResourceDescriptorBufferBindings;
		public uint32 maxSamplerDescriptorBufferBindings;
		public uint32 maxEmbeddedImmutableSamplerBindings;
		public uint32 maxEmbeddedImmutableSamplers;
		public c_size bufferCaptureReplayDescriptorDataSize;
		public c_size imageCaptureReplayDescriptorDataSize;
		public c_size imageViewCaptureReplayDescriptorDataSize;
		public c_size samplerCaptureReplayDescriptorDataSize;
		public c_size accelerationStructureCaptureReplayDescriptorDataSize;
		public c_size samplerDescriptorSize;
		public c_size combinedImageSamplerDescriptorSize;
		public c_size sampledImageDescriptorSize;
		public c_size storageImageDescriptorSize;
		public c_size uniformTexelBufferDescriptorSize;
		public c_size robustUniformTexelBufferDescriptorSize;
		public c_size storageTexelBufferDescriptorSize;
		public c_size robustStorageTexelBufferDescriptorSize;
		public c_size uniformBufferDescriptorSize;
		public c_size robustUniformBufferDescriptorSize;
		public c_size storageBufferDescriptorSize;
		public c_size robustStorageBufferDescriptorSize;
		public c_size inputAttachmentDescriptorSize;
		public c_size accelerationStructureDescriptorSize;
		public VkDeviceSize maxSamplerDescriptorBufferRange;
		public VkDeviceSize maxResourceDescriptorBufferRange;
		public VkDeviceSize samplerDescriptorBufferAddressSpaceSize;
		public VkDeviceSize resourceDescriptorBufferAddressSpaceSize;
		public VkDeviceSize descriptorBufferAddressSpaceSize;
	}

	[CRepr]
	public struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public c_size combinedImageSamplerDensityMapDescriptorSize;
	}

	[CRepr]
	public struct VkPhysicalDeviceDescriptorBufferFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 descriptorBuffer;
		public VkBool32 descriptorBufferCaptureReplay;
		public VkBool32 descriptorBufferImageLayoutIgnored;
		public VkBool32 descriptorBufferPushDescriptors;
	}

	[CRepr]
	public struct VkDescriptorAddressInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceAddress address;
		public VkDeviceSize range;
		public VkFormat format;
	}

	[CRepr]
	public struct VkDescriptorBufferBindingInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceAddress address;
		public VkBufferUsageFlags usage;
	}

	[CRepr]
	public struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBuffer buffer;
	}

	[CRepr, Union]
	public struct VkDescriptorDataEXT
	{
		public VkSampler* pSampler;
		public VkDescriptorImageInfo* pCombinedImageSampler;
		public VkDescriptorImageInfo* pInputAttachmentImage;
		public VkDescriptorImageInfo* pSampledImage;
		public VkDescriptorImageInfo* pStorageImage;
		public VkDescriptorAddressInfoEXT* pUniformTexelBuffer;
		public VkDescriptorAddressInfoEXT* pStorageTexelBuffer;
		public VkDescriptorAddressInfoEXT* pUniformBuffer;
		public VkDescriptorAddressInfoEXT* pStorageBuffer;
		public VkDeviceAddress accelerationStructure;
	}

	[CRepr]
	public struct VkDescriptorGetInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorType type;
		public VkDescriptorDataEXT data;
	}

	[CRepr]
	public struct VkBufferCaptureDescriptorDataInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBuffer buffer;
	}

	[CRepr]
	public struct VkImageCaptureDescriptorDataInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImage image;
	}

	[CRepr]
	public struct VkImageViewCaptureDescriptorDataInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageView imageView;
	}

	[CRepr]
	public struct VkSamplerCaptureDescriptorDataInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSampler sampler;
	}

	[CRepr]
	public struct VkOpaqueCaptureDescriptorDataCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public void* opaqueCaptureDescriptorData;
	}

	[CRepr]
	public struct VkAccelerationStructureCaptureDescriptorDataInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureKHR accelerationStructure;
		public VkAccelerationStructureNV accelerationStructureNV;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDescriptorSetLayoutSizeEXT(VkDevice, VkDescriptorSetLayout, VkDeviceSize*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice, VkDescriptorSetLayout, uint32, VkDeviceSize*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDescriptorEXT(VkDevice, VkDescriptorGetInfoEXT*, c_size, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindDescriptorBuffersEXT(VkCommandBuffer, uint32, VkDescriptorBufferBindingInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32, uint32, uint32*, VkDeviceSize*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice, VkBufferCaptureDescriptorDataInfoEXT*, void*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice, VkImageCaptureDescriptorDataInfoEXT*, void*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice, VkImageViewCaptureDescriptorDataInfoEXT*, void*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice, VkSamplerCaptureDescriptorDataInfoEXT*, void*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice, VkAccelerationStructureCaptureDescriptorDataInfoEXT*, void*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, out VkDeviceSize pLayoutSizeInBytes);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32 binding, out VkDeviceSize pOffset);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDescriptorEXT(VkDevice device, VkDescriptorGetInfoEXT* pDescriptorInfo, c_size dataSize, void* pDescriptor);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32 bufferCount, VkDescriptorBufferBindingInfoEXT* pBindingInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 firstSet, uint32 setCount, uint32* pBufferIndices, VkDeviceSize* pOffsets);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 set);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, VkBufferCaptureDescriptorDataInfoEXT* pInfo, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, VkImageCaptureDescriptorDataInfoEXT* pInfo, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, VkImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, VkSamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData);

	[CRepr, AllowDuplicates]
	public enum VkGraphicsPipelineLibraryFlagBitsEXT : c_int
	{
		VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1,
		VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2,
		VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4,
		VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8,
		VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkGraphicsPipelineLibraryFlagsEXT = VkGraphicsPipelineLibraryFlagBitsEXT;

	[CRepr]
	public struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 graphicsPipelineLibrary;
	}

	[CRepr]
	public struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 graphicsPipelineLibraryFastLinking;
		public VkBool32 graphicsPipelineLibraryIndependentInterpolationDecoration;
	}

	[CRepr]
	public struct VkGraphicsPipelineLibraryCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkGraphicsPipelineLibraryFlagsEXT flags;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderEarlyAndLateFragmentTests;
	}

	[CRepr, AllowDuplicates]
	public enum VkFragmentShadingRateTypeNV : c_int
	{
		VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,
		VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1,
		VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkFragmentShadingRateNV : c_int
	{
		VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,
		VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,
		VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,
		VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,
		VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,
		VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
		VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10,
		VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11,
		VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12,
		VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13,
		VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14,
		VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15,
		VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 fragmentShadingRateEnums;
		public VkBool32 supersampleFragmentShadingRates;
		public VkBool32 noInvocationFragmentShadingRates;
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSampleCountFlagBits maxFragmentShadingRateInvocationCount;
	}

	[CRepr]
	public struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFragmentShadingRateTypeNV shadingRateType;
		public VkFragmentShadingRateNV shadingRate;
		public VkFragmentShadingRateCombinerOpKHR[2] combinerOps;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR[2]);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, VkFragmentShadingRateCombinerOpKHR[2] combinerOps);

	[CRepr, AllowDuplicates]
	public enum VkAccelerationStructureMotionInstanceTypeNV : c_int
	{
		VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0,
		VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1,
		VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2,
		VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkAccelerationStructureMotionInfoFlagsNV = VkFlags;

	public typealias VkAccelerationStructureMotionInstanceFlagsNV = VkFlags;

	[CRepr, Union]
	public struct VkDeviceOrHostAddressConstKHR
	{
		public VkDeviceAddress deviceAddress;
		public void* hostAddress;
	}

	[CRepr]
	public struct VkAccelerationStructureGeometryMotionTrianglesDataNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceOrHostAddressConstKHR vertexData;
	}

	[CRepr]
	public struct VkAccelerationStructureMotionInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxInstances;
		public VkAccelerationStructureMotionInfoFlagsNV flags;
	}

	[CRepr]
	public struct VkAccelerationStructureMatrixMotionInstanceNV
	{
		public VkTransformMatrixKHR transformT0;
		public VkTransformMatrixKHR transformT1;
		public uint32 instanceCustomIndex;
		public uint32 mask;
		public uint32 instanceShaderBindingTableRecordOffset;
		public VkGeometryInstanceFlagsKHR flags;
		public uint64 accelerationStructureReference;
	}

	[CRepr]
	public struct VkSRTDataNV
	{
		public float sx;
		public float a;
		public float b;
		public float pvx;
		public float sy;
		public float c;
		public float pvy;
		public float sz;
		public float pvz;
		public float qx;
		public float qy;
		public float qz;
		public float qw;
		public float tx;
		public float ty;
		public float tz;
	}

	[CRepr]
	public struct VkAccelerationStructureSRTMotionInstanceNV
	{
		public VkSRTDataNV transformT0;
		public VkSRTDataNV transformT1;
		public uint32 instanceCustomIndex;
		public uint32 mask;
		public uint32 instanceShaderBindingTableRecordOffset;
		public VkGeometryInstanceFlagsKHR flags;
		public uint64 accelerationStructureReference;
	}

	[CRepr, Union]
	public struct VkAccelerationStructureMotionInstanceDataNV
	{
		public VkAccelerationStructureInstanceKHR staticInstance;
		public VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
		public VkAccelerationStructureSRTMotionInstanceNV srtMotionInstance;
	}

	[CRepr]
	public struct VkAccelerationStructureMotionInstanceNV
	{
		public VkAccelerationStructureMotionInstanceTypeNV type;
		public VkAccelerationStructureMotionInstanceFlagsNV flags;
		public VkAccelerationStructureMotionInstanceDataNV data;
	}

	[CRepr]
	public struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 rayTracingMotionBlur;
		public VkBool32 rayTracingMotionBlurPipelineTraceRaysIndirect;
	}

	[CRepr]
	public struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 ycbcr2plane444Formats;
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 fragmentDensityMapDeferred;
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 subsampledLoads;
		public VkBool32 subsampledCoarseReconstructionEarlyAccess;
		public uint32 maxSubsampledArrayLayers;
		public uint32 maxDescriptorSetSubsampledSamplers;
	}

	[CRepr]
	public struct VkCopyCommandTransformInfoQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSurfaceTransformFlagBitsKHR transform;
	}

	public typealias VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;

	[CRepr, AllowDuplicates]
	public enum VkImageCompressionFlagBitsEXT : c_int
	{
		VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0,
		VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1,
		VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2,
		VK_IMAGE_COMPRESSION_DISABLED_EXT = 4,
		VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkImageCompressionFlagsEXT = VkImageCompressionFlagBitsEXT;

	[CRepr, AllowDuplicates]
	public enum VkImageCompressionFixedRateFlagBitsEXT : c_int
	{
		VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0,
		VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1,
		VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2,
		VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4,
		VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8,
		VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16,
		VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32,
		VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64,
		VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128,
		VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256,
		VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512,
		VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024,
		VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048,
		VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096,
		VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192,
		VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384,
		VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768,
		VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536,
		VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072,
		VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144,
		VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288,
		VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576,
		VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152,
		VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304,
		VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608,
		VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkImageCompressionFixedRateFlagsEXT = VkImageCompressionFixedRateFlagBitsEXT;

	[CRepr]
	public struct VkPhysicalDeviceImageCompressionControlFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 imageCompressionControl;
	}

	[CRepr]
	public struct VkImageCompressionControlEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageCompressionFlagsEXT flags;
		public uint32 compressionControlPlaneCount;
		public VkImageCompressionFixedRateFlagsEXT* pFixedRateFlags;
	}

	[CRepr]
	public struct VkImageCompressionPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkImageCompressionFlagsEXT imageCompressionFlags;
		public VkImageCompressionFixedRateFlagsEXT imageCompressionFixedRateFlags;
	}

	[CRepr]
	public struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 attachmentFeedbackLoopLayout;
	}

	[CRepr]
	public struct VkPhysicalDevice4444FormatsFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 formatA4R4G4B4;
		public VkBool32 formatA4B4G4R4;
	}

	[CRepr, AllowDuplicates]
	public enum VkDeviceFaultAddressTypeEXT : c_int
	{
		VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0,
		VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1,
		VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2,
		VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3,
		VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4,
		VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5,
		VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6,
		VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkDeviceFaultVendorBinaryHeaderVersionEXT : c_int
	{
		VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1,
		VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceFaultFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 deviceFault;
		public VkBool32 deviceFaultVendorBinary;
	}

	[CRepr]
	public struct VkDeviceFaultCountsEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 addressInfoCount;
		public uint32 vendorInfoCount;
		public VkDeviceSize vendorBinarySize;
	}

	[CRepr]
	public struct VkDeviceFaultAddressInfoEXT
	{
		public VkDeviceFaultAddressTypeEXT addressType;
		public VkDeviceAddress reportedAddress;
		public VkDeviceSize addressPrecision;
	}

	[CRepr]
	public struct VkDeviceFaultVendorInfoEXT
	{
		public c_char[256] description;
		public uint64 vendorFaultCode;
		public uint64 vendorFaultData;
	}

	[CRepr]
	public struct VkDeviceFaultInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public c_char[256] description;
		public VkDeviceFaultAddressInfoEXT* pAddressInfos;
		public VkDeviceFaultVendorInfoEXT* pVendorInfos;
		public void* pVendorBinaryData;
	}

	[CRepr]
	public struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT
	{
		public uint32 headerSize;
		public VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion;
		public uint32 vendorID;
		public uint32 deviceID;
		public uint32 driverVersion;
		public uint8[16] pipelineCacheUUID;
		public uint32 applicationNameOffset;
		public uint32 applicationVersion;
		public uint32 engineNameOffset;
		public uint32 engineVersion;
		public uint32 apiVersion;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDeviceFaultInfoEXT(VkDevice, VkDeviceFaultCountsEXT*, VkDeviceFaultInfoEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDeviceFaultInfoEXT(VkDevice device, out VkDeviceFaultCountsEXT pFaultCounts, out VkDeviceFaultInfoEXT pFaultInfo);

	[CRepr]
	public struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 rasterizationOrderColorAttachmentAccess;
		public VkBool32 rasterizationOrderDepthAttachmentAccess;
		public VkBool32 rasterizationOrderStencilAttachmentAccess;
	}

	public typealias VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;

	[CRepr]
	public struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 formatRgba10x6WithoutYCbCrSampler;
	}

	[CRepr]
	public struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 mutableDescriptorType;
	}

	public typealias VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;

	[CRepr]
	public struct VkMutableDescriptorTypeListEXT
	{
		public uint32 descriptorTypeCount;
		public VkDescriptorType* pDescriptorTypes;
	}

	public typealias VkMutableDescriptorTypeListVALVE = VkMutableDescriptorTypeListEXT;

	[CRepr]
	public struct VkMutableDescriptorTypeCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 mutableDescriptorTypeListCount;
		public VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists;
	}

	public typealias VkMutableDescriptorTypeCreateInfoVALVE = VkMutableDescriptorTypeCreateInfoEXT;

	[CRepr]
	public struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 vertexInputDynamicState;
	}

	[CRepr]
	public struct VkVertexInputBindingDescription2EXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 binding;
		public uint32 stride;
		public VkVertexInputRate inputRate;
		public uint32 divisor;
	}

	[CRepr]
	public struct VkVertexInputAttributeDescription2EXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 location;
		public uint32 binding;
		public VkFormat format;
		public uint32 offset;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetVertexInputEXT(VkCommandBuffer, uint32, VkVertexInputBindingDescription2EXT*, uint32, VkVertexInputAttributeDescription2EXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32 vertexBindingDescriptionCount, VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32 vertexAttributeDescriptionCount, VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions);

	[CRepr]
	public struct VkPhysicalDeviceDrmPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 hasPrimary;
		public VkBool32 hasRender;
		public int64 primaryMajor;
		public int64 primaryMinor;
		public int64 renderMajor;
		public int64 renderMinor;
	}

	[CRepr, AllowDuplicates]
	public enum VkDeviceAddressBindingTypeEXT : c_int
	{
		VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0,
		VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1,
		VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkDeviceAddressBindingFlagBitsEXT : c_int
	{
		VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1,
		VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkDeviceAddressBindingFlagsEXT = VkDeviceAddressBindingFlagBitsEXT;

	[CRepr]
	public struct VkPhysicalDeviceAddressBindingReportFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 reportAddressBinding;
	}

	[CRepr]
	public struct VkDeviceAddressBindingCallbackDataEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceAddressBindingFlagsEXT flags;
		public VkDeviceAddress baseAddress;
		public VkDeviceSize size;
		public VkDeviceAddressBindingTypeEXT bindingType;
	}

	[CRepr]
	public struct VkPhysicalDeviceDepthClipControlFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 depthClipControl;
	}

	[CRepr]
	public struct VkPipelineViewportDepthClipControlCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 negativeOneToOne;
	}

	[CRepr]
	public struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 primitiveTopologyListRestart;
		public VkBool32 primitiveTopologyPatchListRestart;
	}

	[CRepr]
	public struct VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 presentModeFifoLatestReady;
	}

	[CRepr]
	public struct VkSubpassShadingPipelineCreateInfoHUAWEI
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRenderPass renderPass;
		public uint32 subpass;
	}

	[CRepr]
	public struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 subpassShading;
	}

	[CRepr]
	public struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxSubpassShadingWorkgroupSizeAspectRatio;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice, VkRenderPass, VkExtent2D*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSubpassShadingHUAWEI(VkCommandBuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, out VkExtent2D pMaxWorkgroupSize);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer);

	[CRepr]
	public struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 invocationMask;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer, VkImageView, VkImageLayout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);

	public typealias VkRemoteAddressNV = void*;

	[CRepr]
	public struct VkMemoryGetRemoteAddressInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceMemory memory;
		public VkExternalMemoryHandleTypeFlagBits handleType;
	}

	[CRepr]
	public struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 externalMemoryRDMA;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetMemoryRemoteAddressNV(VkDevice, VkMemoryGetRemoteAddressInfoNV*, VkRemoteAddressNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetMemoryRemoteAddressNV(VkDevice device, VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, out VkRemoteAddressNV pAddress);

	public typealias VkPipelineInfoEXT = VkPipelineInfoKHR;

	[CRepr]
	public struct VkPipelinePropertiesIdentifierEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint8[16] pipelineIdentifier;
	}

	[CRepr]
	public struct VkPhysicalDevicePipelinePropertiesFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelinePropertiesIdentifier;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPipelinePropertiesEXT(VkDevice, VkPipelineInfoEXT*, VkBaseOutStructure*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPipelinePropertiesEXT(VkDevice device, VkPipelineInfoEXT* pPipelineInfo, out VkBaseOutStructure pPipelineProperties);

	[CRepr, AllowDuplicates]
	public enum VkFrameBoundaryFlagBitsEXT : c_int
	{
		VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = 1,
		VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkFrameBoundaryFlagsEXT = VkFrameBoundaryFlagBitsEXT;

	[CRepr]
	public struct VkPhysicalDeviceFrameBoundaryFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 frameBoundary;
	}

	[CRepr]
	public struct VkFrameBoundaryEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFrameBoundaryFlagsEXT flags;
		public uint64 frameID;
		public uint32 imageCount;
		public VkImage* pImages;
		public uint32 bufferCount;
		public VkBuffer* pBuffers;
		public uint64 tagName;
		public c_size tagSize;
		public void* pTag;
	}

	[CRepr]
	public struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 multisampledRenderToSingleSampled;
	}

	[CRepr]
	public struct VkSubpassResolvePerformanceQueryEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 optimal;
	}

	[CRepr]
	public struct VkMultisampledRenderToSingleSampledInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 multisampledRenderToSingleSampledEnable;
		public VkSampleCountFlagBits rasterizationSamples;
	}

	[CRepr]
	public struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 extendedDynamicState2;
		public VkBool32 extendedDynamicState2LogicOp;
		public VkBool32 extendedDynamicState2PatchControlPoints;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetPatchControlPointsEXT(VkCommandBuffer, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthBiasEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetLogicOpEXT(VkCommandBuffer, VkLogicOp);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32 patchControlPoints);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);

	[CRepr]
	public struct VkPhysicalDeviceColorWriteEnableFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 colorWriteEnable;
	}

	[CRepr]
	public struct VkPipelineColorWriteCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 attachmentCount;
		public VkBool32* pColorWriteEnables;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetColorWriteEnableEXT(VkCommandBuffer, uint32, VkBool32*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32 attachmentCount, VkBool32* pColorWriteEnables);

	[CRepr]
	public struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 primitivesGeneratedQuery;
		public VkBool32 primitivesGeneratedQueryWithRasterizerDiscard;
		public VkBool32 primitivesGeneratedQueryWithNonZeroStreams;
	}

	public typealias VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = VkPhysicalDeviceGlobalPriorityQueryFeatures;

	public typealias VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityProperties;

	[CRepr]
	public struct VkPhysicalDeviceImageViewMinLodFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 minLod;
	}

	[CRepr]
	public struct VkImageViewMinLodCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public float minLod;
	}

	[CRepr]
	public struct VkPhysicalDeviceMultiDrawFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 multiDraw;
	}

	[CRepr]
	public struct VkPhysicalDeviceMultiDrawPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxMultiDrawCount;
	}

	[CRepr]
	public struct VkMultiDrawInfoEXT
	{
		public uint32 firstVertex;
		public uint32 vertexCount;
	}

	[CRepr]
	public struct VkMultiDrawIndexedInfoEXT
	{
		public uint32 firstIndex;
		public uint32 indexCount;
		public int32 vertexOffset;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawMultiEXT(VkCommandBuffer, uint32, VkMultiDrawInfoEXT*, uint32, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawMultiIndexedEXT(VkCommandBuffer, uint32, VkMultiDrawIndexedInfoEXT*, uint32, uint32, uint32, int32*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32 drawCount, VkMultiDrawInfoEXT* pVertexInfo, uint32 instanceCount, uint32 firstInstance, uint32 stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32 drawCount, VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32 instanceCount, uint32 firstInstance, uint32 stride, int32* pVertexOffset);

	[CRepr]
	public struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 image2DViewOf3D;
		public VkBool32 sampler2DViewOf3D;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderTileImageFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderTileImageColorReadAccess;
		public VkBool32 shaderTileImageDepthReadAccess;
		public VkBool32 shaderTileImageStencilReadAccess;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderTileImagePropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderTileImageCoherentReadAccelerated;
		public VkBool32 shaderTileImageReadSampleFromPixelRateInvocation;
		public VkBool32 shaderTileImageReadFromHelperInvocation;
	}

	public struct VkMicromapEXT_T;
	public typealias VkMicromapEXT = VkMicromapEXT_T*;

	[CRepr, AllowDuplicates]
	public enum VkMicromapTypeEXT : c_int
	{
		VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0,
		VK_MICROMAP_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkBuildMicromapModeEXT : c_int
	{
		VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0,
		VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkCopyMicromapModeEXT : c_int
	{
		VK_COPY_MICROMAP_MODE_CLONE_EXT = 0,
		VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1,
		VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2,
		VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3,
		VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkOpacityMicromapFormatEXT : c_int
	{
		VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1,
		VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2,
		VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkOpacityMicromapSpecialIndexEXT : c_int
	{
		VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1,
		VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2,
		VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3,
		VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4,
		VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkAccelerationStructureCompatibilityKHR : c_int
	{
		VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0,
		VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1,
		VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkAccelerationStructureBuildTypeKHR : c_int
	{
		VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,
		VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,
		VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2,
		VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkBuildMicromapFlagBitsEXT : c_int
	{
		VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 1,
		VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 2,
		VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 4,
		VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkBuildMicromapFlagsEXT = VkBuildMicromapFlagBitsEXT;

	[CRepr, AllowDuplicates]
	public enum VkMicromapCreateFlagBitsEXT : c_int
	{
		VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 1,
		VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkMicromapCreateFlagsEXT = VkMicromapCreateFlagBitsEXT;

	[CRepr]
	public struct VkMicromapUsageEXT
	{
		public uint32 count;
		public uint32 subdivisionLevel;
		public uint32 format;
	}

	[CRepr, Union]
	public struct VkDeviceOrHostAddressKHR
	{
		public VkDeviceAddress deviceAddress;
		public void* hostAddress;
	}

	[CRepr]
	public struct VkMicromapBuildInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkMicromapTypeEXT type;
		public VkBuildMicromapFlagsEXT flags;
		public VkBuildMicromapModeEXT mode;
		public VkMicromapEXT dstMicromap;
		public uint32 usageCountsCount;
		public VkMicromapUsageEXT* pUsageCounts;
		public VkMicromapUsageEXT** ppUsageCounts;
		public VkDeviceOrHostAddressConstKHR data;
		public VkDeviceOrHostAddressKHR scratchData;
		public VkDeviceOrHostAddressConstKHR triangleArray;
		public VkDeviceSize triangleArrayStride;
	}

	[CRepr]
	public struct VkMicromapCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkMicromapCreateFlagsEXT createFlags;
		public VkBuffer buffer;
		public VkDeviceSize offset;
		public VkDeviceSize size;
		public VkMicromapTypeEXT type;
		public VkDeviceAddress deviceAddress;
	}

	[CRepr]
	public struct VkPhysicalDeviceOpacityMicromapFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 micromap;
		public VkBool32 micromapCaptureReplay;
		public VkBool32 micromapHostCommands;
	}

	[CRepr]
	public struct VkPhysicalDeviceOpacityMicromapPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxOpacity2StateSubdivisionLevel;
		public uint32 maxOpacity4StateSubdivisionLevel;
	}

	[CRepr]
	public struct VkMicromapVersionInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint8* pVersionData;
	}

	[CRepr]
	public struct VkCopyMicromapToMemoryInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkMicromapEXT src;
		public VkDeviceOrHostAddressKHR dst;
		public VkCopyMicromapModeEXT mode;
	}

	[CRepr]
	public struct VkCopyMemoryToMicromapInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceOrHostAddressConstKHR src;
		public VkMicromapEXT dst;
		public VkCopyMicromapModeEXT mode;
	}

	[CRepr]
	public struct VkCopyMicromapInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkMicromapEXT src;
		public VkMicromapEXT dst;
		public VkCopyMicromapModeEXT mode;
	}

	[CRepr]
	public struct VkMicromapBuildSizesInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize micromapSize;
		public VkDeviceSize buildScratchSize;
		public VkBool32 discardable;
	}

	[CRepr]
	public struct VkAccelerationStructureTrianglesOpacityMicromapEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkIndexType indexType;
		public VkDeviceOrHostAddressConstKHR indexBuffer;
		public VkDeviceSize indexStride;
		public uint32 baseTriangle;
		public uint32 usageCountsCount;
		public VkMicromapUsageEXT* pUsageCounts;
		public VkMicromapUsageEXT** ppUsageCounts;
		public VkMicromapEXT micromap;
	}

	[CRepr]
	public struct VkMicromapTriangleEXT
	{
		public uint32 dataOffset;
		public uint16 subdivisionLevel;
		public uint16 format;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateMicromapEXT(VkDevice, VkMicromapCreateInfoEXT*, VkAllocationCallbacks*, VkMicromapEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyMicromapEXT(VkDevice, VkMicromapEXT, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBuildMicromapsEXT(VkCommandBuffer, uint32, VkMicromapBuildInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBuildMicromapsEXT(VkDevice, VkDeferredOperationKHR, uint32, VkMicromapBuildInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyMicromapEXT(VkDevice, VkDeferredOperationKHR, VkCopyMicromapInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyMicromapToMemoryEXT(VkDevice, VkDeferredOperationKHR, VkCopyMicromapToMemoryInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyMemoryToMicromapEXT(VkDevice, VkDeferredOperationKHR, VkCopyMemoryToMicromapInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkWriteMicromapsPropertiesEXT(VkDevice, uint32, VkMicromapEXT*, VkQueryType, c_size, void*, c_size);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyMicromapEXT(VkCommandBuffer, VkCopyMicromapInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer, VkCopyMicromapToMemoryInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer, VkCopyMemoryToMicromapInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer, uint32, VkMicromapEXT*, VkQueryType, VkQueryPool, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceMicromapCompatibilityEXT(VkDevice, VkMicromapVersionInfoEXT*, VkAccelerationStructureCompatibilityKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetMicromapBuildSizesEXT(VkDevice, VkAccelerationStructureBuildTypeKHR, VkMicromapBuildInfoEXT*, VkMicromapBuildSizesInfoEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateMicromapEXT(VkDevice device, VkMicromapCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkMicromapEXT pMicromap);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32 infoCount, VkMicromapBuildInfoEXT* pInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32 infoCount, VkMicromapBuildInfoEXT* pInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapInfoEXT* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapToMemoryInfoEXT* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToMicromapInfoEXT* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkWriteMicromapsPropertiesEXT(VkDevice device, uint32 micromapCount, VkMicromapEXT* pMicromaps, VkQueryType queryType, c_size dataSize, void* pData, c_size stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, VkCopyMicromapInfoEXT* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, VkCopyMicromapToMemoryInfoEXT* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, VkCopyMemoryToMicromapInfoEXT* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint32 micromapCount, VkMicromapEXT* pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32 firstQuery);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceMicromapCompatibilityEXT(VkDevice device, VkMicromapVersionInfoEXT* pVersionInfo, out VkAccelerationStructureCompatibilityKHR pCompatibility);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkMicromapBuildInfoEXT* pBuildInfo, out VkMicromapBuildSizesInfoEXT pSizeInfo);

	[CRepr]
	public struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 clustercullingShader;
		public VkBool32 multiviewClusterCullingShader;
	}

	[CRepr]
	public struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32[3] maxWorkGroupCount;
		public uint32[3] maxWorkGroupSize;
		public uint32 maxOutputClusterCount;
		public VkDeviceSize indirectBufferOffsetAlignment;
	}

	[CRepr]
	public struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 clusterShadingRate;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawClusterHUAWEI(VkCommandBuffer, uint32, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer, VkBuffer, VkDeviceSize);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);

	[CRepr]
	public struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 borderColorSwizzle;
		public VkBool32 borderColorSwizzleFromImage;
	}

	[CRepr]
	public struct VkSamplerBorderColorComponentMappingCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkComponentMapping components;
		public VkBool32 srgb;
	}

	[CRepr]
	public struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pageableDeviceLocalMemory;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkSetDeviceMemoryPriorityEXT(VkDevice, VkDeviceMemory, float);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority);

	[CRepr]
	public struct VkPhysicalDeviceShaderCorePropertiesARM
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 pixelRate;
		public uint32 texelRate;
		public uint32 fmaRate;
	}

	public typealias VkPhysicalDeviceSchedulingControlsFlagsARM = VkFlags64;

	public typealias VkPhysicalDeviceSchedulingControlsFlagBitsARM = VkFlags64;

	[CRepr]
	public struct VkDeviceQueueShaderCoreControlCreateInfoARM
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 shaderCoreCount;
	}

	[CRepr]
	public struct VkPhysicalDeviceSchedulingControlsFeaturesARM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 schedulingControls;
	}

	[CRepr]
	public struct VkPhysicalDeviceSchedulingControlsPropertiesARM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPhysicalDeviceSchedulingControlsFlagsARM schedulingControlsFlags;
	}

	[CRepr]
	public struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 imageSlicedViewOf3D;
	}

	[CRepr]
	public struct VkImageViewSlicedCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 sliceOffset;
		public uint32 sliceCount;
	}

	[CRepr]
	public struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 descriptorSetHostMapping;
	}

	[CRepr]
	public struct VkDescriptorSetBindingReferenceVALVE
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDescriptorSetLayout descriptorSetLayout;
		public uint32 binding;
	}

	[CRepr]
	public struct VkDescriptorSetLayoutHostMappingInfoVALVE
	{
		public VkStructureType sType;
		public void* pNext;
		public c_size descriptorOffset;
		public uint32 descriptorSize;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice, VkDescriptorSetBindingReferenceVALVE*, VkDescriptorSetLayoutHostMappingInfoVALVE*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDescriptorSetHostMappingVALVE(VkDevice, VkDescriptorSet, void**);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, VkDescriptorSetBindingReferenceVALVE* pBindingReference, out VkDescriptorSetLayoutHostMappingInfoVALVE pHostMapping);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void** ppData);

	[CRepr]
	public struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 depthClampZeroOne;
	}

	[CRepr]
	public struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 nonSeamlessCubeMap;
	}

	[CRepr]
	public struct VkPhysicalDeviceRenderPassStripedFeaturesARM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 renderPassStriped;
	}

	[CRepr]
	public struct VkPhysicalDeviceRenderPassStripedPropertiesARM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D renderPassStripeGranularity;
		public uint32 maxRenderPassStripes;
	}

	[CRepr]
	public struct VkRenderPassStripeInfoARM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRect2D stripeArea;
	}

	[CRepr]
	public struct VkRenderPassStripeBeginInfoARM
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 stripeInfoCount;
		public VkRenderPassStripeInfoARM* pStripeInfos;
	}

	[CRepr]
	public struct VkRenderPassStripeSubmitInfoARM
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 stripeSemaphoreInfoCount;
		public VkSemaphoreSubmitInfo* pStripeSemaphoreInfos;
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 fragmentDensityMapOffset;
	}

	[CRepr]
	public struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D fragmentDensityOffsetGranularity;
	}

	[CRepr]
	public struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 fragmentDensityOffsetCount;
		public VkOffset2D* pFragmentDensityOffsets;
	}

	[CRepr]
	public struct VkCopyMemoryIndirectCommandNV
	{
		public VkDeviceAddress srcAddress;
		public VkDeviceAddress dstAddress;
		public VkDeviceSize size;
	}

	[CRepr]
	public struct VkCopyMemoryToImageIndirectCommandNV
	{
		public VkDeviceAddress srcAddress;
		public uint32 bufferRowLength;
		public uint32 bufferImageHeight;
		public VkImageSubresourceLayers imageSubresource;
		public VkOffset3D imageOffset;
		public VkExtent3D imageExtent;
	}

	[CRepr]
	public struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 indirectCopy;
	}

	[CRepr]
	public struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkQueueFlags supportedQueues;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyMemoryIndirectNV(VkCommandBuffer, VkDeviceAddress, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer, VkDeviceAddress, uint32, uint32, VkImage, VkImageLayout, VkImageSubresourceLayers*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32 copyCount, uint32 stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32 copyCount, uint32 stride, VkImage dstImage, VkImageLayout dstImageLayout, VkImageSubresourceLayers* pImageSubresources);

	public typealias VkMemoryDecompressionMethodFlagBitsNV = VkFlags64;

	public typealias VkMemoryDecompressionMethodFlagsNV = VkFlags64;

	[CRepr]
	public struct VkDecompressMemoryRegionNV
	{
		public VkDeviceAddress srcAddress;
		public VkDeviceAddress dstAddress;
		public VkDeviceSize compressedSize;
		public VkDeviceSize decompressedSize;
		public VkMemoryDecompressionMethodFlagsNV decompressionMethod;
	}

	[CRepr]
	public struct VkPhysicalDeviceMemoryDecompressionFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 memoryDecompression;
	}

	[CRepr]
	public struct VkPhysicalDeviceMemoryDecompressionPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkMemoryDecompressionMethodFlagsNV decompressionMethods;
		public uint64 maxDecompressionIndirectCount;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDecompressMemoryNV(VkCommandBuffer, uint32, VkDecompressMemoryRegionNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer, VkDeviceAddress, VkDeviceAddress, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32 decompressRegionCount, VkDecompressMemoryRegionNV* pDecompressMemoryRegions);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32 stride);

	[CRepr]
	public struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 deviceGeneratedCompute;
		public VkBool32 deviceGeneratedComputePipelines;
		public VkBool32 deviceGeneratedComputeCaptureReplay;
	}

	[CRepr]
	public struct VkComputePipelineIndirectBufferInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceAddress deviceAddress;
		public VkDeviceSize size;
		public VkDeviceAddress pipelineDeviceAddressCaptureReplay;
	}

	[CRepr]
	public struct VkPipelineIndirectDeviceAddressInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineBindPoint pipelineBindPoint;
		public VkPipeline pipeline;
	}

	[CRepr]
	public struct VkBindPipelineIndirectCommandNV
	{
		public VkDeviceAddress pipelineAddress;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetPipelineIndirectMemoryRequirementsNV(VkDevice, VkComputePipelineCreateInfo*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer, VkPipelineBindPoint, VkPipeline);

	[CallingConvention(VKAPI_CALL)]
	public function VkDeviceAddress PFN_vkGetPipelineIndirectDeviceAddressNV(VkDevice, VkPipelineIndirectDeviceAddressInfoNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetPipelineIndirectMemoryRequirementsNV(VkDevice device, VkComputePipelineCreateInfo* pCreateInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkDeviceAddress vkGetPipelineIndirectDeviceAddressNV(VkDevice device, VkPipelineIndirectDeviceAddressInfoNV* pInfo);

	[CRepr]
	public struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 linearColorAttachment;
	}

	[CRepr]
	public struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 imageCompressionControlSwapchain;
	}

	[CRepr]
	public struct VkImageViewSampleWeightCreateInfoQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkOffset2D filterCenter;
		public VkExtent2D filterSize;
		public uint32 numPhases;
	}

	[CRepr]
	public struct VkPhysicalDeviceImageProcessingFeaturesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 textureSampleWeighted;
		public VkBool32 textureBoxFilter;
		public VkBool32 textureBlockMatch;
	}

	[CRepr]
	public struct VkPhysicalDeviceImageProcessingPropertiesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxWeightFilterPhases;
		public VkExtent2D maxWeightFilterDimension;
		public VkExtent2D maxBlockMatchRegion;
		public VkExtent2D maxBoxFilterBlockSize;
	}

	[CRepr]
	public struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 nestedCommandBuffer;
		public VkBool32 nestedCommandBufferRendering;
		public VkBool32 nestedCommandBufferSimultaneousUse;
	}

	[CRepr]
	public struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxCommandBufferNestingLevel;
	}

	[CRepr]
	public struct VkExternalMemoryAcquireUnmodifiedEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 acquireUnmodifiedMemory;
	}

	[CRepr]
	public struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 extendedDynamicState3TessellationDomainOrigin;
		public VkBool32 extendedDynamicState3DepthClampEnable;
		public VkBool32 extendedDynamicState3PolygonMode;
		public VkBool32 extendedDynamicState3RasterizationSamples;
		public VkBool32 extendedDynamicState3SampleMask;
		public VkBool32 extendedDynamicState3AlphaToCoverageEnable;
		public VkBool32 extendedDynamicState3AlphaToOneEnable;
		public VkBool32 extendedDynamicState3LogicOpEnable;
		public VkBool32 extendedDynamicState3ColorBlendEnable;
		public VkBool32 extendedDynamicState3ColorBlendEquation;
		public VkBool32 extendedDynamicState3ColorWriteMask;
		public VkBool32 extendedDynamicState3RasterizationStream;
		public VkBool32 extendedDynamicState3ConservativeRasterizationMode;
		public VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize;
		public VkBool32 extendedDynamicState3DepthClipEnable;
		public VkBool32 extendedDynamicState3SampleLocationsEnable;
		public VkBool32 extendedDynamicState3ColorBlendAdvanced;
		public VkBool32 extendedDynamicState3ProvokingVertexMode;
		public VkBool32 extendedDynamicState3LineRasterizationMode;
		public VkBool32 extendedDynamicState3LineStippleEnable;
		public VkBool32 extendedDynamicState3DepthClipNegativeOneToOne;
		public VkBool32 extendedDynamicState3ViewportWScalingEnable;
		public VkBool32 extendedDynamicState3ViewportSwizzle;
		public VkBool32 extendedDynamicState3CoverageToColorEnable;
		public VkBool32 extendedDynamicState3CoverageToColorLocation;
		public VkBool32 extendedDynamicState3CoverageModulationMode;
		public VkBool32 extendedDynamicState3CoverageModulationTableEnable;
		public VkBool32 extendedDynamicState3CoverageModulationTable;
		public VkBool32 extendedDynamicState3CoverageReductionMode;
		public VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable;
		public VkBool32 extendedDynamicState3ShadingRateImageEnable;
	}

	[CRepr]
	public struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 dynamicPrimitiveTopologyUnrestricted;
	}

	[CRepr]
	public struct VkColorBlendEquationEXT
	{
		public VkBlendFactor srcColorBlendFactor;
		public VkBlendFactor dstColorBlendFactor;
		public VkBlendOp colorBlendOp;
		public VkBlendFactor srcAlphaBlendFactor;
		public VkBlendFactor dstAlphaBlendFactor;
		public VkBlendOp alphaBlendOp;
	}

	[CRepr]
	public struct VkColorBlendAdvancedEXT
	{
		public VkBlendOp advancedBlendOp;
		public VkBool32 srcPremultiplied;
		public VkBool32 dstPremultiplied;
		public VkBlendOverlapEXT blendOverlap;
		public VkBool32 clampResults;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthClampEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetPolygonModeEXT(VkCommandBuffer, VkPolygonMode);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetRasterizationSamplesEXT(VkCommandBuffer, VkSampleCountFlagBits);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetSampleMaskEXT(VkCommandBuffer, VkSampleCountFlagBits, VkSampleMask*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetLogicOpEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetColorBlendEnableEXT(VkCommandBuffer, uint32, uint32, VkBool32*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetColorBlendEquationEXT(VkCommandBuffer, uint32, uint32, VkColorBlendEquationEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetColorWriteMaskEXT(VkCommandBuffer, uint32, uint32, VkColorComponentFlags*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer, VkTessellationDomainOrigin);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetRasterizationStreamEXT(VkCommandBuffer, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer, VkConservativeRasterizationModeEXT);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer, float);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthClipEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer, uint32, uint32, VkColorBlendAdvancedEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetProvokingVertexModeEXT(VkCommandBuffer, VkProvokingVertexModeEXT);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetLineRasterizationModeEXT(VkCommandBuffer, VkLineRasterizationModeEXT);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetLineStippleEnableEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetViewportWScalingEnableNV(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetViewportSwizzleNV(VkCommandBuffer, uint32, uint32, VkViewportSwizzleNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetCoverageToColorEnableNV(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetCoverageToColorLocationNV(VkCommandBuffer, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetCoverageModulationModeNV(VkCommandBuffer, VkCoverageModulationModeNV);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetCoverageModulationTableNV(VkCommandBuffer, uint32, float*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetShadingRateImageEnableNV(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer, VkBool32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetCoverageReductionModeNV(VkCommandBuffer, VkCoverageReductionModeNV);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, VkSampleMask* pSampleMask);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32 firstAttachment, uint32 attachmentCount, VkBool32* pColorBlendEnables);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32 firstAttachment, uint32 attachmentCount, VkColorBlendEquationEXT* pColorBlendEquations);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32 firstAttachment, uint32 attachmentCount, VkColorComponentFlags* pColorWriteMasks);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32 rasterizationStream);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32 firstAttachment, uint32 attachmentCount, VkColorBlendAdvancedEXT* pColorBlendAdvanced);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkViewportSwizzleNV* pViewportSwizzles);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32 coverageToColorLocation);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint32 coverageModulationTableCount, float* pCoverageModulationTable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode);

	[CRepr, AllowDuplicates]
	public enum VkSubpassMergeStatusEXT : c_int
	{
		VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0,
		VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12,
		VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13,
		VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 subpassMergeFeedback;
	}

	[CRepr]
	public struct VkRenderPassCreationControlEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 disallowMerging;
	}

	[CRepr]
	public struct VkRenderPassCreationFeedbackInfoEXT
	{
		public uint32 postMergeSubpassCount;
	}

	[CRepr]
	public struct VkRenderPassCreationFeedbackCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback;
	}

	[CRepr]
	public struct VkRenderPassSubpassFeedbackInfoEXT
	{
		public VkSubpassMergeStatusEXT subpassMergeStatus;
		public c_char[256] description;
		public uint32 postMergeIndex;
	}

	[CRepr]
	public struct VkRenderPassSubpassFeedbackCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback;
	}

	[CRepr, AllowDuplicates]
	public enum VkDirectDriverLoadingModeLUNARG : c_int
	{
		VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0,
		VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1,
		VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = 2147483647,
	}

	public typealias VkDirectDriverLoadingFlagsLUNARG = VkFlags;

	[CallingConvention(VKAPI_CALL)]
	public function PFN_vkVoidFunction PFN_vkGetInstanceProcAddrLUNARG(VkInstance, c_char*);

	[CRepr]
	public struct VkDirectDriverLoadingInfoLUNARG
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDirectDriverLoadingFlagsLUNARG flags;
		public PFN_vkGetInstanceProcAddrLUNARG pfnGetInstanceProcAddr;
	}

	[CRepr]
	public struct VkDirectDriverLoadingListLUNARG
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDirectDriverLoadingModeLUNARG mode;
		public uint32 driverCount;
		public VkDirectDriverLoadingInfoLUNARG* pDrivers;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderModuleIdentifier;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint8[16] shaderModuleIdentifierAlgorithmUUID;
	}

	[CRepr]
	public struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 identifierSize;
		public uint8* pIdentifier;
	}

	[CRepr]
	public struct VkShaderModuleIdentifierEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 identifierSize;
		public uint8[32] identifier;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetShaderModuleIdentifierEXT(VkDevice, VkShaderModule, VkShaderModuleIdentifierEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice, VkShaderModuleCreateInfo*, VkShaderModuleIdentifierEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule, out VkShaderModuleIdentifierEXT pIdentifier);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, out VkShaderModuleIdentifierEXT pIdentifier);

	public struct VkOpticalFlowSessionNV_T;
	public typealias VkOpticalFlowSessionNV = VkOpticalFlowSessionNV_T*;

	[CRepr, AllowDuplicates]
	public enum VkOpticalFlowPerformanceLevelNV : c_int
	{
		VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0,
		VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1,
		VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2,
		VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3,
		VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkOpticalFlowSessionBindingPointNV : c_int
	{
		VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0,
		VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1,
		VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2,
		VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3,
		VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4,
		VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5,
		VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6,
		VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7,
		VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8,
		VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkOpticalFlowGridSizeFlagBitsNV : c_int
	{
		VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0,
		VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 1,
		VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 2,
		VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 4,
		VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 8,
		VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkOpticalFlowGridSizeFlagsNV = VkOpticalFlowGridSizeFlagBitsNV;

	[CRepr, AllowDuplicates]
	public enum VkOpticalFlowUsageFlagBitsNV : c_int
	{
		VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0,
		VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 1,
		VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 2,
		VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 4,
		VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 8,
		VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 16,
		VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkOpticalFlowUsageFlagsNV = VkOpticalFlowUsageFlagBitsNV;

	[CRepr, AllowDuplicates]
	public enum VkOpticalFlowSessionCreateFlagBitsNV : c_int
	{
		VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 1,
		VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 2,
		VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 4,
		VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 8,
		VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 16,
		VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkOpticalFlowSessionCreateFlagsNV = VkOpticalFlowSessionCreateFlagBitsNV;

	[CRepr, AllowDuplicates]
	public enum VkOpticalFlowExecuteFlagBitsNV : c_int
	{
		VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 1,
		VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
	}

	public typealias VkOpticalFlowExecuteFlagsNV = VkOpticalFlowExecuteFlagBitsNV;

	[CRepr]
	public struct VkPhysicalDeviceOpticalFlowFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 opticalFlow;
	}

	[CRepr]
	public struct VkPhysicalDeviceOpticalFlowPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
		public VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
		public VkBool32 hintSupported;
		public VkBool32 costSupported;
		public VkBool32 bidirectionalFlowSupported;
		public VkBool32 globalFlowSupported;
		public uint32 minWidth;
		public uint32 minHeight;
		public uint32 maxWidth;
		public uint32 maxHeight;
		public uint32 maxNumRegionsOfInterest;
	}

	[CRepr]
	public struct VkOpticalFlowImageFormatInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkOpticalFlowUsageFlagsNV usage;
	}

	[CRepr]
	public struct VkOpticalFlowImageFormatPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFormat format;
	}

	[CRepr]
	public struct VkOpticalFlowSessionCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 width;
		public uint32 height;
		public VkFormat imageFormat;
		public VkFormat flowVectorFormat;
		public VkFormat costFormat;
		public VkOpticalFlowGridSizeFlagsNV outputGridSize;
		public VkOpticalFlowGridSizeFlagsNV hintGridSize;
		public VkOpticalFlowPerformanceLevelNV performanceLevel;
		public VkOpticalFlowSessionCreateFlagsNV flags;
	}

	[CRepr]
	public struct VkOpticalFlowSessionCreatePrivateDataInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 id;
		public uint32 size;
		public void* pPrivateData;
	}

	[CRepr]
	public struct VkOpticalFlowExecuteInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkOpticalFlowExecuteFlagsNV flags;
		public uint32 regionCount;
		public VkRect2D* pRegions;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice, VkOpticalFlowImageFormatInfoNV*, uint32*, VkOpticalFlowImageFormatPropertiesNV*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateOpticalFlowSessionNV(VkDevice, VkOpticalFlowSessionCreateInfoNV*, VkAllocationCallbacks*, VkOpticalFlowSessionNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyOpticalFlowSessionNV(VkDevice, VkOpticalFlowSessionNV, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBindOpticalFlowSessionImageNV(VkDevice, VkOpticalFlowSessionNV, VkOpticalFlowSessionBindingPointNV, VkImageView, VkImageLayout);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdOpticalFlowExecuteNV(VkCommandBuffer, VkOpticalFlowSessionNV, VkOpticalFlowExecuteInfoNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, out uint32 pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkOpticalFlowSessionNV pSession);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, VkOpticalFlowExecuteInfoNV* pExecuteInfo);

	[CRepr]
	public struct VkPhysicalDeviceLegacyDitheringFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 legacyDithering;
	}

	public typealias VkPhysicalDevicePipelineProtectedAccessFeaturesEXT = VkPhysicalDevicePipelineProtectedAccessFeatures;

	[CRepr, AllowDuplicates]
	public enum VkAntiLagModeAMD : c_int
	{
		VK_ANTI_LAG_MODE_DRIVER_CONTROL_AMD = 0,
		VK_ANTI_LAG_MODE_ON_AMD = 1,
		VK_ANTI_LAG_MODE_OFF_AMD = 2,
		VK_ANTI_LAG_MODE_MAX_ENUM_AMD = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkAntiLagStageAMD : c_int
	{
		VK_ANTI_LAG_STAGE_INPUT_AMD = 0,
		VK_ANTI_LAG_STAGE_PRESENT_AMD = 1,
		VK_ANTI_LAG_STAGE_MAX_ENUM_AMD = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceAntiLagFeaturesAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 antiLag;
	}

	[CRepr]
	public struct VkAntiLagPresentationInfoAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAntiLagStageAMD stage;
		public uint64 frameIndex;
	}

	[CRepr]
	public struct VkAntiLagDataAMD
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAntiLagModeAMD mode;
		public uint32 maxFPS;
		public VkAntiLagPresentationInfoAMD* pPresentationInfo;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkAntiLagUpdateAMD(VkDevice, VkAntiLagDataAMD*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkAntiLagUpdateAMD(VkDevice device, VkAntiLagDataAMD* pData);

	public struct VkShaderEXT_T;
	public typealias VkShaderEXT = VkShaderEXT_T*;

	[CRepr, AllowDuplicates]
	public enum VkShaderCodeTypeEXT : c_int
	{
		VK_SHADER_CODE_TYPE_BINARY_EXT = 0,
		VK_SHADER_CODE_TYPE_SPIRV_EXT = 1,
		VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkDepthClampModeEXT : c_int
	{
		VK_DEPTH_CLAMP_MODE_VIEWPORT_RANGE_EXT = 0,
		VK_DEPTH_CLAMP_MODE_USER_DEFINED_RANGE_EXT = 1,
		VK_DEPTH_CLAMP_MODE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkShaderCreateFlagBitsEXT : c_int
	{
		VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = 1,
		VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 2,
		VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 4,
		VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 8,
		VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 16,
		VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 32,
		VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 64,
		VK_SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT = 128,
		VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkShaderCreateFlagsEXT = VkShaderCreateFlagBitsEXT;

	[CRepr]
	public struct VkPhysicalDeviceShaderObjectFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderObject;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderObjectPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint8[16] shaderBinaryUUID;
		public uint32 shaderBinaryVersion;
	}

	[CRepr]
	public struct VkShaderCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderCreateFlagsEXT flags;
		public VkShaderStageFlagBits stage;
		public VkShaderStageFlags nextStage;
		public VkShaderCodeTypeEXT codeType;
		public c_size codeSize;
		public void* pCode;
		public c_char* pName;
		public uint32 setLayoutCount;
		public VkDescriptorSetLayout* pSetLayouts;
		public uint32 pushConstantRangeCount;
		public VkPushConstantRange* pPushConstantRanges;
		public VkSpecializationInfo* pSpecializationInfo;
	}

	public typealias VkShaderRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;

	[CRepr]
	public struct VkDepthClampRangeEXT
	{
		public float minDepthClamp;
		public float maxDepthClamp;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateShadersEXT(VkDevice, uint32, VkShaderCreateInfoEXT*, VkAllocationCallbacks*, VkShaderEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyShaderEXT(VkDevice, VkShaderEXT, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetShaderBinaryDataEXT(VkDevice, VkShaderEXT, c_size*, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBindShadersEXT(VkCommandBuffer, uint32, VkShaderStageFlagBits*, VkShaderEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetDepthClampRangeEXT(VkCommandBuffer, VkDepthClampModeEXT, VkDepthClampRangeEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateShadersEXT(VkDevice device, uint32 createInfoCount, VkShaderCreateInfoEXT* pCreateInfos, VkAllocationCallbacks* pAllocator, out VkShaderEXT pShaders);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, out c_size pDataSize, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBindShadersEXT(VkCommandBuffer commandBuffer, uint32 stageCount, VkShaderStageFlagBits* pStages, VkShaderEXT* pShaders);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetDepthClampRangeEXT(VkCommandBuffer commandBuffer, VkDepthClampModeEXT depthClampMode, VkDepthClampRangeEXT* pDepthClampRange);

	[CRepr]
	public struct VkPhysicalDeviceTilePropertiesFeaturesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 tileProperties;
	}

	[CRepr]
	public struct VkTilePropertiesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent3D tileSize;
		public VkExtent2D apronSize;
		public VkOffset2D origin;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetFramebufferTilePropertiesQCOM(VkDevice, VkFramebuffer, uint32*, VkTilePropertiesQCOM*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetDynamicRenderingTilePropertiesQCOM(VkDevice, VkRenderingInfo*, VkTilePropertiesQCOM*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, out uint32 pPropertiesCount, VkTilePropertiesQCOM* pProperties);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetDynamicRenderingTilePropertiesQCOM(VkDevice device, VkRenderingInfo* pRenderingInfo, out VkTilePropertiesQCOM pProperties);

	[CRepr]
	public struct VkPhysicalDeviceAmigoProfilingFeaturesSEC
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 amigoProfiling;
	}

	[CRepr]
	public struct VkAmigoProfilingSubmitInfoSEC
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 firstDrawTimestamp;
		public uint64 swapBufferTimestamp;
	}

	[CRepr]
	public struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 multiviewPerViewViewports;
	}

	[CRepr, AllowDuplicates]
	public enum VkRayTracingInvocationReorderModeNV : c_int
	{
		VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0,
		VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1,
		VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint;
	}

	[CRepr]
	public struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 rayTracingInvocationReorder;
	}

	[CRepr]
	public struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 extendedSparseAddressSpace;
	}

	[CRepr]
	public struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize extendedSparseAddressSpaceSize;
		public VkImageUsageFlags extendedSparseImageUsageFlags;
		public VkBufferUsageFlags extendedSparseBufferUsageFlags;
	}

	[CRepr]
	public struct VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 legacyVertexAttributes;
	}

	[CRepr]
	public struct VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 nativeUnalignedPerformance;
	}

	[CRepr, AllowDuplicates]
	public enum VkLayerSettingTypeEXT : c_int
	{
		VK_LAYER_SETTING_TYPE_BOOL32_EXT = 0,
		VK_LAYER_SETTING_TYPE_INT32_EXT = 1,
		VK_LAYER_SETTING_TYPE_INT64_EXT = 2,
		VK_LAYER_SETTING_TYPE_UINT32_EXT = 3,
		VK_LAYER_SETTING_TYPE_UINT64_EXT = 4,
		VK_LAYER_SETTING_TYPE_FLOAT32_EXT = 5,
		VK_LAYER_SETTING_TYPE_FLOAT64_EXT = 6,
		VK_LAYER_SETTING_TYPE_STRING_EXT = 7,
		VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr]
	public struct VkLayerSettingEXT
	{
		public c_char* pLayerName;
		public c_char* pSettingName;
		public VkLayerSettingTypeEXT type;
		public uint32 valueCount;
		public void* pValues;
	}

	[CRepr]
	public struct VkLayerSettingsCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 settingCount;
		public VkLayerSettingEXT* pSettings;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderCoreBuiltins;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 shaderCoreMask;
		public uint32 shaderCoreCount;
		public uint32 shaderWarpsPerCore;
	}

	[CRepr]
	public struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 pipelineLibraryGroupHandles;
	}

	[CRepr]
	public struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 dynamicRenderingUnusedAttachments;
	}

	[CRepr, AllowDuplicates]
	public enum VkLatencyMarkerNV : c_int
	{
		VK_LATENCY_MARKER_SIMULATION_START_NV = 0,
		VK_LATENCY_MARKER_SIMULATION_END_NV = 1,
		VK_LATENCY_MARKER_RENDERSUBMIT_START_NV = 2,
		VK_LATENCY_MARKER_RENDERSUBMIT_END_NV = 3,
		VK_LATENCY_MARKER_PRESENT_START_NV = 4,
		VK_LATENCY_MARKER_PRESENT_END_NV = 5,
		VK_LATENCY_MARKER_INPUT_SAMPLE_NV = 6,
		VK_LATENCY_MARKER_TRIGGER_FLASH_NV = 7,
		VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV = 8,
		VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV = 9,
		VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV = 10,
		VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV = 11,
		VK_LATENCY_MARKER_MAX_ENUM_NV = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkOutOfBandQueueTypeNV : c_int
	{
		VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV = 0,
		VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV = 1,
		VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV = 2147483647,
	}

	[CRepr]
	public struct VkLatencySleepModeInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 lowLatencyMode;
		public VkBool32 lowLatencyBoost;
		public uint32 minimumIntervalUs;
	}

	[CRepr]
	public struct VkLatencySleepInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkSemaphore signalSemaphore;
		public uint64 value;
	}

	[CRepr]
	public struct VkSetLatencyMarkerInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 presentID;
		public VkLatencyMarkerNV marker;
	}

	[CRepr]
	public struct VkLatencyTimingsFrameReportNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 presentID;
		public uint64 inputSampleTimeUs;
		public uint64 simStartTimeUs;
		public uint64 simEndTimeUs;
		public uint64 renderSubmitStartTimeUs;
		public uint64 renderSubmitEndTimeUs;
		public uint64 presentStartTimeUs;
		public uint64 presentEndTimeUs;
		public uint64 driverStartTimeUs;
		public uint64 driverEndTimeUs;
		public uint64 osRenderQueueStartTimeUs;
		public uint64 osRenderQueueEndTimeUs;
		public uint64 gpuRenderStartTimeUs;
		public uint64 gpuRenderEndTimeUs;
	}

	[CRepr]
	public struct VkGetLatencyMarkerInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 timingCount;
		public VkLatencyTimingsFrameReportNV* pTimings;
	}

	[CRepr]
	public struct VkLatencySubmissionPresentIdNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 presentID;
	}

	[CRepr]
	public struct VkSwapchainLatencyCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 latencyModeEnable;
	}

	[CRepr]
	public struct VkOutOfBandQueueTypeInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkOutOfBandQueueTypeNV queueType;
	}

	[CRepr]
	public struct VkLatencySurfaceCapabilitiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 presentModeCount;
		public VkPresentModeKHR* pPresentModes;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkSetLatencySleepModeNV(VkDevice, VkSwapchainKHR, VkLatencySleepModeInfoNV*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkLatencySleepNV(VkDevice, VkSwapchainKHR, VkLatencySleepInfoNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkSetLatencyMarkerNV(VkDevice, VkSwapchainKHR, VkSetLatencyMarkerInfoNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetLatencyTimingsNV(VkDevice, VkSwapchainKHR, VkGetLatencyMarkerInfoNV*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkQueueNotifyOutOfBandNV(VkQueue, VkOutOfBandQueueTypeInfoNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkSetLatencySleepModeNV(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepModeInfoNV* pSleepModeInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkLatencySleepNV(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepInfoNV* pSleepInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkSetLatencyMarkerNV(VkDevice device, VkSwapchainKHR swapchain, VkSetLatencyMarkerInfoNV* pLatencyMarkerInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetLatencyTimingsNV(VkDevice device, VkSwapchainKHR swapchain, out VkGetLatencyMarkerInfoNV pLatencyMarkerInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkQueueNotifyOutOfBandNV(VkQueue queue, VkOutOfBandQueueTypeInfoNV* pQueueTypeInfo);

	[CRepr]
	public struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 multiviewPerViewRenderAreas;
	}

	[CRepr]
	public struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 perViewRenderAreaCount;
		public VkRect2D* pPerViewRenderAreas;
	}

	[CRepr]
	public struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 perStageDescriptorSet;
		public VkBool32 dynamicPipelineLayout;
	}

	[CRepr, AllowDuplicates]
	public enum VkBlockMatchWindowCompareModeQCOM : c_int
	{
		VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM = 0,
		VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM = 1,
		VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceImageProcessing2FeaturesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 textureBlockMatch2;
	}

	[CRepr]
	public struct VkPhysicalDeviceImageProcessing2PropertiesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D maxBlockMatchWindow;
	}

	[CRepr]
	public struct VkSamplerBlockMatchWindowCreateInfoQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkExtent2D windowExtent;
		public VkBlockMatchWindowCompareModeQCOM windowCompareMode;
	}

	[CRepr, AllowDuplicates]
	public enum VkCubicFilterWeightsQCOM : c_int
	{
		VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM = 0,
		VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM = 1,
		VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM = 2,
		VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM = 3,
		VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceCubicWeightsFeaturesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 selectableCubicWeights;
	}

	[CRepr]
	public struct VkSamplerCubicWeightsCreateInfoQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCubicFilterWeightsQCOM cubicWeights;
	}

	[CRepr]
	public struct VkBlitImageCubicWeightsInfoQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkCubicFilterWeightsQCOM cubicWeights;
	}

	[CRepr]
	public struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 ycbcrDegamma;
	}

	[CRepr]
	public struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 enableYDegamma;
		public VkBool32 enableCbCrDegamma;
	}

	[CRepr]
	public struct VkPhysicalDeviceCubicClampFeaturesQCOM
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 cubicRangeClamp;
	}

	[CRepr]
	public struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 attachmentFeedbackLoopDynamicState;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer, VkImageAspectFlags);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask);

	[CRepr, AllowDuplicates]
	public enum VkLayeredDriverUnderlyingApiMSFT : c_int
	{
		VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT = 0,
		VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT = 1,
		VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT = 2147483647,
	}

	[CRepr]
	public struct VkPhysicalDeviceLayeredDriverPropertiesMSFT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkLayeredDriverUnderlyingApiMSFT underlyingAPI;
	}

	[CRepr]
	public struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 descriptorPoolOverallocation;
	}

	[CRepr, AllowDuplicates]
	public enum VkDisplaySurfaceStereoTypeNV : c_int
	{
		VK_DISPLAY_SURFACE_STEREO_TYPE_NONE_NV = 0,
		VK_DISPLAY_SURFACE_STEREO_TYPE_ONBOARD_DIN_NV = 1,
		VK_DISPLAY_SURFACE_STEREO_TYPE_HDMI_3D_NV = 2,
		VK_DISPLAY_SURFACE_STEREO_TYPE_INBAND_DISPLAYPORT_NV = 3,
		VK_DISPLAY_SURFACE_STEREO_TYPE_MAX_ENUM_NV = 2147483647,
	}

	[CRepr]
	public struct VkDisplaySurfaceStereoCreateInfoNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDisplaySurfaceStereoTypeNV stereoType;
	}

	[CRepr]
	public struct VkDisplayModeStereoPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 hdmi3DSupported;
	}

	[CRepr]
	public struct VkPhysicalDeviceRawAccessChainsFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderRawAccessChains;
	}

	[CRepr]
	public struct VkPhysicalDeviceCommandBufferInheritanceFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 commandBufferInheritance;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderFloat16VectorAtomics;
	}

	[CRepr]
	public struct VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 shaderReplicatedComposites;
	}

	[CRepr]
	public struct VkPhysicalDeviceRayTracingValidationFeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 rayTracingValidation;
	}

	public struct VkIndirectExecutionSetEXT_T;
	public typealias VkIndirectExecutionSetEXT = VkIndirectExecutionSetEXT_T*;

	public struct VkIndirectCommandsLayoutEXT_T;
	public typealias VkIndirectCommandsLayoutEXT = VkIndirectCommandsLayoutEXT_T*;

	[CRepr, AllowDuplicates]
	public enum VkIndirectExecutionSetInfoTypeEXT : c_int
	{
		VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT = 0,
		VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT = 1,
		VK_INDIRECT_EXECUTION_SET_INFO_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkIndirectCommandsTokenTypeEXT : c_int
	{
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT = 0,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT = 1,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT = 2,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT = 3,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT = 4,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_EXT = 5,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_EXT = 6,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_COUNT_EXT = 7,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_COUNT_EXT = 8,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_EXT = 9,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV_EXT = 1000202002,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_NV_EXT = 1000202003,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_EXT = 1000328000,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_EXT = 1000328001,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_TRACE_RAYS2_EXT = 1000386004,
		VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_EXT = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkIndirectCommandsInputModeFlagBitsEXT : c_int
	{
		VK_INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT = 1,
		VK_INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT = 2,
		VK_INDIRECT_COMMANDS_INPUT_MODE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkIndirectCommandsInputModeFlagsEXT = VkIndirectCommandsInputModeFlagBitsEXT;

	[CRepr, AllowDuplicates]
	public enum VkIndirectCommandsLayoutUsageFlagBitsEXT : c_int
	{
		VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT = 1,
		VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT = 2,
		VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
	}

	public typealias VkIndirectCommandsLayoutUsageFlagsEXT = VkIndirectCommandsLayoutUsageFlagBitsEXT;

	[CRepr]
	public struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 deviceGeneratedCommands;
		public VkBool32 dynamicGeneratedPipelineLayout;
	}

	[CRepr]
	public struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxIndirectPipelineCount;
		public uint32 maxIndirectShaderObjectCount;
		public uint32 maxIndirectSequenceCount;
		public uint32 maxIndirectCommandsTokenCount;
		public uint32 maxIndirectCommandsTokenOffset;
		public uint32 maxIndirectCommandsIndirectStride;
		public VkIndirectCommandsInputModeFlagsEXT supportedIndirectCommandsInputModes;
		public VkShaderStageFlags supportedIndirectCommandsShaderStages;
		public VkShaderStageFlags supportedIndirectCommandsShaderStagesPipelineBinding;
		public VkShaderStageFlags supportedIndirectCommandsShaderStagesShaderBinding;
		public VkBool32 deviceGeneratedCommandsTransformFeedback;
		public VkBool32 deviceGeneratedCommandsMultiDrawIndirectCount;
	}

	[CRepr]
	public struct VkGeneratedCommandsMemoryRequirementsInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkIndirectExecutionSetEXT indirectExecutionSet;
		public VkIndirectCommandsLayoutEXT indirectCommandsLayout;
		public uint32 maxSequenceCount;
		public uint32 maxDrawCount;
	}

	[CRepr]
	public struct VkIndirectExecutionSetPipelineInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipeline initialPipeline;
		public uint32 maxPipelineCount;
	}

	[CRepr]
	public struct VkIndirectExecutionSetShaderLayoutInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 setLayoutCount;
		public VkDescriptorSetLayout* pSetLayouts;
	}

	[CRepr]
	public struct VkIndirectExecutionSetShaderInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 shaderCount;
		public VkShaderEXT* pInitialShaders;
		public VkIndirectExecutionSetShaderLayoutInfoEXT* pSetLayoutInfos;
		public uint32 maxShaderCount;
		public uint32 pushConstantRangeCount;
		public VkPushConstantRange* pPushConstantRanges;
	}

	[CRepr, Union]
	public struct VkIndirectExecutionSetInfoEXT
	{
		public VkIndirectExecutionSetPipelineInfoEXT* pPipelineInfo;
		public VkIndirectExecutionSetShaderInfoEXT* pShaderInfo;
	}

	[CRepr]
	public struct VkIndirectExecutionSetCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkIndirectExecutionSetInfoTypeEXT type;
		public VkIndirectExecutionSetInfoEXT info;
	}

	[CRepr]
	public struct VkGeneratedCommandsInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkShaderStageFlags shaderStages;
		public VkIndirectExecutionSetEXT indirectExecutionSet;
		public VkIndirectCommandsLayoutEXT indirectCommandsLayout;
		public VkDeviceAddress indirectAddress;
		public VkDeviceSize indirectAddressSize;
		public VkDeviceAddress preprocessAddress;
		public VkDeviceSize preprocessSize;
		public uint32 maxSequenceCount;
		public VkDeviceAddress sequenceCountAddress;
		public uint32 maxDrawCount;
	}

	[CRepr]
	public struct VkWriteIndirectExecutionSetPipelineEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 index;
		public VkPipeline pipeline;
	}

	[CRepr]
	public struct VkIndirectCommandsPushConstantTokenEXT
	{
		public VkPushConstantRange updateRange;
	}

	[CRepr]
	public struct VkIndirectCommandsVertexBufferTokenEXT
	{
		public uint32 vertexBindingUnit;
	}

	[CRepr]
	public struct VkIndirectCommandsIndexBufferTokenEXT
	{
		public VkIndirectCommandsInputModeFlagBitsEXT mode;
	}

	[CRepr]
	public struct VkIndirectCommandsExecutionSetTokenEXT
	{
		public VkIndirectExecutionSetInfoTypeEXT type;
		public VkShaderStageFlags shaderStages;
	}

	[CRepr, Union]
	public struct VkIndirectCommandsTokenDataEXT
	{
		public VkIndirectCommandsPushConstantTokenEXT* pPushConstant;
		public VkIndirectCommandsVertexBufferTokenEXT* pVertexBuffer;
		public VkIndirectCommandsIndexBufferTokenEXT* pIndexBuffer;
		public VkIndirectCommandsExecutionSetTokenEXT* pExecutionSet;
	}

	[CRepr]
	public struct VkIndirectCommandsLayoutTokenEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkIndirectCommandsTokenTypeEXT type;
		public VkIndirectCommandsTokenDataEXT data;
		public uint32 offset;
	}

	[CRepr]
	public struct VkIndirectCommandsLayoutCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkIndirectCommandsLayoutUsageFlagsEXT flags;
		public VkShaderStageFlags shaderStages;
		public uint32 indirectStride;
		public VkPipelineLayout pipelineLayout;
		public uint32 tokenCount;
		public VkIndirectCommandsLayoutTokenEXT* pTokens;
	}

	[CRepr]
	public struct VkDrawIndirectCountIndirectCommandEXT
	{
		public VkDeviceAddress bufferAddress;
		public uint32 stride;
		public uint32 commandCount;
	}

	[CRepr]
	public struct VkBindVertexBufferIndirectCommandEXT
	{
		public VkDeviceAddress bufferAddress;
		public uint32 size;
		public uint32 stride;
	}

	[CRepr]
	public struct VkBindIndexBufferIndirectCommandEXT
	{
		public VkDeviceAddress bufferAddress;
		public uint32 size;
		public VkIndexType indexType;
	}

	[CRepr]
	public struct VkGeneratedCommandsPipelineInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipeline pipeline;
	}

	[CRepr]
	public struct VkGeneratedCommandsShaderInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 shaderCount;
		public VkShaderEXT* pShaders;
	}

	[CRepr]
	public struct VkWriteIndirectExecutionSetShaderEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 index;
		public VkShaderEXT shader;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetGeneratedCommandsMemoryRequirementsEXT(VkDevice, VkGeneratedCommandsMemoryRequirementsInfoEXT*, VkMemoryRequirements2*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdPreprocessGeneratedCommandsEXT(VkCommandBuffer, VkGeneratedCommandsInfoEXT*, VkCommandBuffer);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdExecuteGeneratedCommandsEXT(VkCommandBuffer, VkBool32, VkGeneratedCommandsInfoEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateIndirectCommandsLayoutEXT(VkDevice, VkIndirectCommandsLayoutCreateInfoEXT*, VkAllocationCallbacks*, VkIndirectCommandsLayoutEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyIndirectCommandsLayoutEXT(VkDevice, VkIndirectCommandsLayoutEXT, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateIndirectExecutionSetEXT(VkDevice, VkIndirectExecutionSetCreateInfoEXT*, VkAllocationCallbacks*, VkIndirectExecutionSetEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyIndirectExecutionSetEXT(VkDevice, VkIndirectExecutionSetEXT, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkUpdateIndirectExecutionSetPipelineEXT(VkDevice, VkIndirectExecutionSetEXT, uint32, VkWriteIndirectExecutionSetPipelineEXT*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkUpdateIndirectExecutionSetShaderEXT(VkDevice, VkIndirectExecutionSetEXT, uint32, VkWriteIndirectExecutionSetShaderEXT*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetGeneratedCommandsMemoryRequirementsEXT(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoEXT* pInfo, out VkMemoryRequirements2 pMemoryRequirements);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdPreprocessGeneratedCommandsEXT(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoEXT* pGeneratedCommandsInfo, VkCommandBuffer stateCommandBuffer);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdExecuteGeneratedCommandsEXT(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoEXT* pGeneratedCommandsInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateIndirectCommandsLayoutEXT(VkDevice device, VkIndirectCommandsLayoutCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkIndirectCommandsLayoutEXT pIndirectCommandsLayout);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyIndirectCommandsLayoutEXT(VkDevice device, VkIndirectCommandsLayoutEXT indirectCommandsLayout, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateIndirectExecutionSetEXT(VkDevice device, VkIndirectExecutionSetCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkIndirectExecutionSetEXT pIndirectExecutionSet);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyIndirectExecutionSetEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkUpdateIndirectExecutionSetPipelineEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32 executionSetWriteCount, VkWriteIndirectExecutionSetPipelineEXT* pExecutionSetWrites);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkUpdateIndirectExecutionSetShaderEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint32 executionSetWriteCount, VkWriteIndirectExecutionSetShaderEXT* pExecutionSetWrites);

	[CRepr]
	public struct VkPhysicalDeviceImageAlignmentControlFeaturesMESA
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 imageAlignmentControl;
	}

	[CRepr]
	public struct VkPhysicalDeviceImageAlignmentControlPropertiesMESA
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 supportedImageAlignmentMask;
	}

	[CRepr]
	public struct VkImageAlignmentControlCreateInfoMESA
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maximumRequestedAlignment;
	}

	[CRepr]
	public struct VkPhysicalDeviceDepthClampControlFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 depthClampControl;
	}

	[CRepr]
	public struct VkPipelineViewportDepthClampControlCreateInfoEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDepthClampModeEXT depthClampMode;
		public VkDepthClampRangeEXT* pDepthClampRange;
	}

	[CRepr]
	public struct VkPhysicalDeviceHdrVividFeaturesHUAWEI
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 hdrVivid;
	}

	[CRepr]
	public struct VkHdrVividDynamicMetadataHUAWEI
	{
		public VkStructureType sType;
		public void* pNext;
		public c_size dynamicMetadataSize;
		public void* pDynamicMetadata;
	}

	[CRepr]
	public struct VkCooperativeMatrixFlexibleDimensionsPropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 MGranularity;
		public uint32 NGranularity;
		public uint32 KGranularity;
		public VkComponentTypeKHR AType;
		public VkComponentTypeKHR BType;
		public VkComponentTypeKHR CType;
		public VkComponentTypeKHR ResultType;
		public VkBool32 saturatingAccumulation;
		public VkScopeKHR @scope;
		public uint32 workgroupInvocations;
	}

	[CRepr]
	public struct VkPhysicalDeviceCooperativeMatrix2FeaturesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 cooperativeMatrixWorkgroupScope;
		public VkBool32 cooperativeMatrixFlexibleDimensions;
		public VkBool32 cooperativeMatrixReductions;
		public VkBool32 cooperativeMatrixConversions;
		public VkBool32 cooperativeMatrixPerElementOperations;
		public VkBool32 cooperativeMatrixTensorAddressing;
		public VkBool32 cooperativeMatrixBlockLoads;
	}

	[CRepr]
	public struct VkPhysicalDeviceCooperativeMatrix2PropertiesNV
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 cooperativeMatrixWorkgroupScopeMaxWorkgroupSize;
		public uint32 cooperativeMatrixFlexibleDimensionsMaxDimension;
		public uint32 cooperativeMatrixWorkgroupScopeReservedSharedMemory;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(VkPhysicalDevice, uint32*, VkCooperativeMatrixFlexibleDimensionsPropertiesNV*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(VkPhysicalDevice physicalDevice, out uint32 pPropertyCount, VkCooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties);

	[CRepr]
	public struct VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 vertexAttributeRobustness;
	}

	[CRepr, AllowDuplicates]
	public enum VkBuildAccelerationStructureModeKHR : c_int
	{
		VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0,
		VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1,
		VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr, AllowDuplicates]
	public enum VkAccelerationStructureCreateFlagBitsKHR : c_int
	{
		VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1,
		VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8,
		VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4,
		VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
	}

	public typealias VkAccelerationStructureCreateFlagsKHR = VkAccelerationStructureCreateFlagBitsKHR;

	[CRepr]
	public struct VkAccelerationStructureBuildRangeInfoKHR
	{
		public uint32 primitiveCount;
		public uint32 primitiveOffset;
		public uint32 firstVertex;
		public uint32 transformOffset;
	}

	[CRepr]
	public struct VkAccelerationStructureGeometryTrianglesDataKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkFormat vertexFormat;
		public VkDeviceOrHostAddressConstKHR vertexData;
		public VkDeviceSize vertexStride;
		public uint32 maxVertex;
		public VkIndexType indexType;
		public VkDeviceOrHostAddressConstKHR indexData;
		public VkDeviceOrHostAddressConstKHR transformData;
	}

	[CRepr]
	public struct VkAccelerationStructureGeometryAabbsDataKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceOrHostAddressConstKHR data;
		public VkDeviceSize stride;
	}

	[CRepr]
	public struct VkAccelerationStructureGeometryInstancesDataKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 arrayOfPointers;
		public VkDeviceOrHostAddressConstKHR data;
	}

	[CRepr, Union]
	public struct VkAccelerationStructureGeometryDataKHR
	{
		public VkAccelerationStructureGeometryTrianglesDataKHR triangles;
		public VkAccelerationStructureGeometryAabbsDataKHR aabbs;
		public VkAccelerationStructureGeometryInstancesDataKHR instances;
	}

	[CRepr]
	public struct VkAccelerationStructureGeometryKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkGeometryTypeKHR geometryType;
		public VkAccelerationStructureGeometryDataKHR geometry;
		public VkGeometryFlagsKHR flags;
	}

	[CRepr]
	public struct VkAccelerationStructureBuildGeometryInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureTypeKHR type;
		public VkBuildAccelerationStructureFlagsKHR flags;
		public VkBuildAccelerationStructureModeKHR mode;
		public VkAccelerationStructureKHR srcAccelerationStructure;
		public VkAccelerationStructureKHR dstAccelerationStructure;
		public uint32 geometryCount;
		public VkAccelerationStructureGeometryKHR* pGeometries;
		public VkAccelerationStructureGeometryKHR** ppGeometries;
		public VkDeviceOrHostAddressKHR scratchData;
	}

	[CRepr]
	public struct VkAccelerationStructureCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureCreateFlagsKHR createFlags;
		public VkBuffer buffer;
		public VkDeviceSize offset;
		public VkDeviceSize size;
		public VkAccelerationStructureTypeKHR type;
		public VkDeviceAddress deviceAddress;
	}

	[CRepr]
	public struct VkWriteDescriptorSetAccelerationStructureKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 accelerationStructureCount;
		public VkAccelerationStructureKHR* pAccelerationStructures;
	}

	[CRepr]
	public struct VkPhysicalDeviceAccelerationStructureFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 accelerationStructure;
		public VkBool32 accelerationStructureCaptureReplay;
		public VkBool32 accelerationStructureIndirectBuild;
		public VkBool32 accelerationStructureHostCommands;
		public VkBool32 descriptorBindingAccelerationStructureUpdateAfterBind;
	}

	[CRepr]
	public struct VkPhysicalDeviceAccelerationStructurePropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint64 maxGeometryCount;
		public uint64 maxInstanceCount;
		public uint64 maxPrimitiveCount;
		public uint32 maxPerStageDescriptorAccelerationStructures;
		public uint32 maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
		public uint32 maxDescriptorSetAccelerationStructures;
		public uint32 maxDescriptorSetUpdateAfterBindAccelerationStructures;
		public uint32 minAccelerationStructureScratchOffsetAlignment;
	}

	[CRepr]
	public struct VkAccelerationStructureDeviceAddressInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureKHR accelerationStructure;
	}

	[CRepr]
	public struct VkAccelerationStructureVersionInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint8* pVersionData;
	}

	[CRepr]
	public struct VkCopyAccelerationStructureToMemoryInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureKHR src;
		public VkDeviceOrHostAddressKHR dst;
		public VkCopyAccelerationStructureModeKHR mode;
	}

	[CRepr]
	public struct VkCopyMemoryToAccelerationStructureInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceOrHostAddressConstKHR src;
		public VkAccelerationStructureKHR dst;
		public VkCopyAccelerationStructureModeKHR mode;
	}

	[CRepr]
	public struct VkCopyAccelerationStructureInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkAccelerationStructureKHR src;
		public VkAccelerationStructureKHR dst;
		public VkCopyAccelerationStructureModeKHR mode;
	}

	[CRepr]
	public struct VkAccelerationStructureBuildSizesInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkDeviceSize accelerationStructureSize;
		public VkDeviceSize updateScratchSize;
		public VkDeviceSize buildScratchSize;
	}

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateAccelerationStructureKHR(VkDevice, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VkAccelerationStructureKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkDestroyAccelerationStructureKHR(VkDevice, VkAccelerationStructureKHR, VkAllocationCallbacks*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer, uint32, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer, uint32, VkAccelerationStructureBuildGeometryInfoKHR*, VkDeviceAddress*, uint32*, uint32**);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkBuildAccelerationStructuresKHR(VkDevice, VkDeferredOperationKHR, uint32, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyAccelerationStructureKHR(VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyAccelerationStructureToMemoryKHR(VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureToMemoryInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCopyMemoryToAccelerationStructureKHR(VkDevice, VkDeferredOperationKHR, VkCopyMemoryToAccelerationStructureInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkWriteAccelerationStructuresPropertiesKHR(VkDevice, uint32, VkAccelerationStructureKHR*, VkQueryType, c_size, void*, c_size);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyAccelerationStructureKHR(VkCommandBuffer, VkCopyAccelerationStructureInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function VkDeviceAddress PFN_vkGetAccelerationStructureDeviceAddressKHR(VkDevice, VkAccelerationStructureDeviceAddressInfoKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer, uint32, VkAccelerationStructureKHR*, VkQueryType, VkQueryPool, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice, VkAccelerationStructureVersionInfoKHR*, VkAccelerationStructureCompatibilityKHR*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkGetAccelerationStructureBuildSizesKHR(VkDevice, VkAccelerationStructureBuildTypeKHR, VkAccelerationStructureBuildGeometryInfoKHR*, uint32*, VkAccelerationStructureBuildSizesInfoKHR*);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateAccelerationStructureKHR(VkDevice device, VkAccelerationStructureCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, out VkAccelerationStructureKHR pAccelerationStructure);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, VkAllocationCallbacks* pAllocator);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32 infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32 infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkDeviceAddress* pIndirectDeviceAddresses, uint32* pIndirectStrides, uint32** ppMaxPrimitiveCounts);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkBuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32 infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureInfoKHR* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint32 accelerationStructureCount, VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, c_size dataSize, void* pData, c_size stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureInfoKHR* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, VkAccelerationStructureDeviceAddressInfoKHR* pInfo);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32 accelerationStructureCount, VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32 firstQuery);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, VkAccelerationStructureVersionInfoKHR* pVersionInfo, out VkAccelerationStructureCompatibilityKHR pCompatibility);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkGetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, uint32* pMaxPrimitiveCounts, out VkAccelerationStructureBuildSizesInfoKHR pSizeInfo);

	[CRepr, AllowDuplicates]
	public enum VkShaderGroupShaderKHR : c_int
	{
		VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0,
		VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1,
		VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2,
		VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3,
		VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 2147483647,
	}

	[CRepr]
	public struct VkRayTracingShaderGroupCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkRayTracingShaderGroupTypeKHR type;
		public uint32 generalShader;
		public uint32 closestHitShader;
		public uint32 anyHitShader;
		public uint32 intersectionShader;
		public void* pShaderGroupCaptureReplayHandle;
	}

	[CRepr]
	public struct VkRayTracingPipelineInterfaceCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxPipelineRayPayloadSize;
		public uint32 maxPipelineRayHitAttributeSize;
	}

	[CRepr]
	public struct VkRayTracingPipelineCreateInfoKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkPipelineCreateFlags flags;
		public uint32 stageCount;
		public VkPipelineShaderStageCreateInfo* pStages;
		public uint32 groupCount;
		public VkRayTracingShaderGroupCreateInfoKHR* pGroups;
		public uint32 maxPipelineRayRecursionDepth;
		public VkPipelineLibraryCreateInfoKHR* pLibraryInfo;
		public VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface;
		public VkPipelineDynamicStateCreateInfo* pDynamicState;
		public VkPipelineLayout layout;
		public VkPipeline basePipelineHandle;
		public int32 basePipelineIndex;
	}

	[CRepr]
	public struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 rayTracingPipeline;
		public VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplay;
		public VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
		public VkBool32 rayTracingPipelineTraceRaysIndirect;
		public VkBool32 rayTraversalPrimitiveCulling;
	}

	[CRepr]
	public struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 shaderGroupHandleSize;
		public uint32 maxRayRecursionDepth;
		public uint32 maxShaderGroupStride;
		public uint32 shaderGroupBaseAlignment;
		public uint32 shaderGroupHandleCaptureReplaySize;
		public uint32 maxRayDispatchInvocationCount;
		public uint32 shaderGroupHandleAlignment;
		public uint32 maxRayHitAttributeSize;
	}

	[CRepr]
	public struct VkStridedDeviceAddressRegionKHR
	{
		public VkDeviceAddress deviceAddress;
		public VkDeviceSize stride;
		public VkDeviceSize size;
	}

	[CRepr]
	public struct VkTraceRaysIndirectCommandKHR
	{
		public uint32 width;
		public uint32 height;
		public uint32 depth;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdTraceRaysKHR(VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint32, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkCreateRayTracingPipelinesKHR(VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint32, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VkPipeline*);

	[CallingConvention(VKAPI_CALL)]
	public function VkResult PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice, VkPipeline, uint32, uint32, c_size, void*);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdTraceRaysIndirectKHR(VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress);

	[CallingConvention(VKAPI_CALL)]
	public function VkDeviceSize PFN_vkGetRayTracingShaderGroupStackSizeKHR(VkDevice, VkPipeline, uint32, VkShaderGroupShaderKHR);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32 width, uint32 height, uint32 depth);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32 createInfoCount, VkRayTracingPipelineCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, out VkPipeline pPipelines);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32 firstGroup, uint32 groupCount, c_size dataSize, void* pData);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint32 group, VkShaderGroupShaderKHR groupShader);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32 pipelineStackSize);

	[CRepr]
	public struct VkPhysicalDeviceRayQueryFeaturesKHR
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 rayQuery;
	}

	[CRepr]
	public struct VkPhysicalDeviceMeshShaderFeaturesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public VkBool32 taskShader;
		public VkBool32 meshShader;
		public VkBool32 multiviewMeshShader;
		public VkBool32 primitiveFragmentShadingRateMeshShader;
		public VkBool32 meshShaderQueries;
	}

	[CRepr]
	public struct VkPhysicalDeviceMeshShaderPropertiesEXT
	{
		public VkStructureType sType;
		public void* pNext;
		public uint32 maxTaskWorkGroupTotalCount;
		public uint32[3] maxTaskWorkGroupCount;
		public uint32 maxTaskWorkGroupInvocations;
		public uint32[3] maxTaskWorkGroupSize;
		public uint32 maxTaskPayloadSize;
		public uint32 maxTaskSharedMemorySize;
		public uint32 maxTaskPayloadAndSharedMemorySize;
		public uint32 maxMeshWorkGroupTotalCount;
		public uint32[3] maxMeshWorkGroupCount;
		public uint32 maxMeshWorkGroupInvocations;
		public uint32[3] maxMeshWorkGroupSize;
		public uint32 maxMeshSharedMemorySize;
		public uint32 maxMeshPayloadAndSharedMemorySize;
		public uint32 maxMeshOutputMemorySize;
		public uint32 maxMeshPayloadAndOutputMemorySize;
		public uint32 maxMeshOutputComponents;
		public uint32 maxMeshOutputVertices;
		public uint32 maxMeshOutputPrimitives;
		public uint32 maxMeshOutputLayers;
		public uint32 maxMeshMultiviewViewCount;
		public uint32 meshOutputPerVertexGranularity;
		public uint32 meshOutputPerPrimitiveGranularity;
		public uint32 maxPreferredTaskWorkGroupInvocations;
		public uint32 maxPreferredMeshWorkGroupInvocations;
		public VkBool32 prefersLocalInvocationVertexOutput;
		public VkBool32 prefersLocalInvocationPrimitiveOutput;
		public VkBool32 prefersCompactVertexOutput;
		public VkBool32 prefersCompactPrimitiveOutput;
	}

	[CRepr]
	public struct VkDrawMeshTasksIndirectCommandEXT
	{
		public uint32 groupCountX;
		public uint32 groupCountY;
		public uint32 groupCountZ;
	}

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawMeshTasksEXT(VkCommandBuffer, uint32, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL)]
	public function void PFN_vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32, uint32);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride);

	[CallingConvention(VKAPI_CALL), CLink]
	public static extern void vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride);

}
